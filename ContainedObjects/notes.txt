setters should make the object take ownership of the object parameter

ClassDef*
	FormalParamDef*
		(Type)*
	VariableDeclAssignDef*
		(Type)*
		ValueDef*
			(Type)*
			LiteralValueDef
				(IntegerLiteralValueDef)*
				(StringLiteralValueDef)*
				(FloatLiteralValueDef)*
			(ReferencePathValueDef)*
			(ObjectInitValueDef)*
				ActualParamDef*
					[ValueDef]*
			ArrayInitValueDef*
				(Type)*
				[ValueDef]*

InterfaceDef*
	[FormalParamDef]*
	VariableDeclDef*
		(Type)*

----

Native:

Command : IObject {
	static instance(Map<String, Object>);
}

Procedure : IObject {
	static instance(Map<String, Object>);
}

State : IObject {
	static instance(Map<String, Object>);
}


NativeObjectFactoryImpl implements INativeObjectFactory {

}


-----------------------------------------------
Validations:

* all vars in the implemented interface must exist in the class.
* constructor signature must be equal to the interfaces'
* class variables should be assigned.
* Interfaces cannot be instantiated.

* names at objectInit must belong to a class
* Param names on objectInit must match with class declaration. : infer param types first.
* names & references check.
* Names cannot repeat on the same context.
* type check: variables, actual parameters.
x recursive references are not allowed.

* static vars cannot refer non static vars or parameters.

ClassCheck:
	- interface impl

InterfaceCheck:
	- non-initialized vars
	
ArrayCheck:
	- type check

context:
	class names, interface names.
	variable names,
	paramter names.
	
values: classes, objects, arrays, literals.

-----------------------------------------------

COBFramework {
	
	List<File> files;
	Map<String, ClassDefBase> classes;
	Map<String, InterfaceDef> interfaces;
	List<IObjectDef> objects;
	
	loadClassPath(String dirs);
	
	parse();
	
	instanceClasses();
	
	IClass getClass(String className);
	
	finalize();
}

IType {
	enum { float, integer, string, reference } simpleType;
	String name; // reference
	boolean array;
	
	isAssignableFrom(IType type);
}

Context {

	private Context parentContext;

	private Map<String, Object> entries;
	
	getVariable(String name);
}

INativeObjectFactory {

	IObject instanceNativeType(Type type, Map<String, Object>);

}

IInteger : IValue {
	int intValue;
}

IFloat : IValue {
	float floatValue;
}

IArray : IValue {
	List<IValue> elements;
}

IObject : IValue {

	IClass class;
	boolean isNative;
	
	Map<String, IVariable> instanceVariables;
}

IClass {
	ClassDefBase definition;
	
	Map<String, IVar> classVariables;
	
	IObject getStaticObject(String name);
	IObject newInstantiate(Context ctx);
}

IVariable {
	IVarDef definition;
	
	String name;
	int numericName;
	IValue value;
}

IValue {
	IType type;
}

// defs

InterfaceDef {
	String name;
	List<IFormalParamDef> params;
	List<IVariableDef> variableDefs;
}

ClassDefBase {
	String name;
	boolean isNative;
	
	List<IFormalParamDef> params;
	List<String> implementedInterfaces;
	List<IVariableDef> variableDefs;
	
	IClass instantiateClass(Context ctx);
}

IFormalParamDef {
	IType type;
	String name;
}

IActualParamDef {
	String name;
	IValueDef valueDef;
}



IVariableDecl {
	boolean static;
	IType declaredType;
	String name;
	IValueDef value;
}

IValueDef {
	IType inferredType;
	enum ValueDefType { objectInit, arrayInit, literal, reference } valueDefType;
	
	IValue eval(Context ctx);
}

IRerenceDef : IValueDef {
	List<String> referencePath;
	IValue eval(Context ctx);
}

IArrayInitDef : IValueDef {
	List<IValueDef> values;
	IArray eval(Context ctx);
}

IObjectInitDef : IValueDef {
	ClassDefBase classDef;
	IActualParamDef paramsDef;
	
	IObject eval(Context ctx);
}

ILiteralDef : IValueDef {
	enum LiteralDefType { integer, float, string } literalDefType;
}

IIntegerLiteralDef : ILiteralDef {
	int intValue;
}

IFloatLiteralDef : ILiteralDef {
	float floatValue;
}

IStringLiteralDef : ILiteralDef {
	String stringValue;
}

--------------------------------------

@members
{

 #include "FeedVizParser.h"

 int main(int argc, char * argv[])
 {

    pANTLR3_INPUT_STREAM           input;
    pSimpleCalcLexer               lex;
    pANTLR3_COMMON_TOKEN_STREAM    tokens;
    pSimpleCalcParser              parser;

    input  = antlr3AsciiFileStreamNew          ((pANTLR3_UINT8)argv[1]);
    lex    = SimpleCalcLexerNew                (input);
    tokens = antlr3CommonTokenStreamSourceNew  (ANTLR3_SIZE_HINT, TOKENSOURCE(lex));
    parser = SimpleCalcParserNew               (tokens);

    parser  ->expr(parser);

    // Must manually clean up
    //
    parser ->free(parser);
    tokens ->free(tokens);
    lex    ->free(lex);
    input  ->close(input);

    return 0;
 }

}
