/** \file
 *  This C source file was generated by $ANTLR version 3.3 Nov 30, 2010 12:45:30
 *
 *     -  From the grammar source file : C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g
 *     -                            On : 2011-01-03 23:41:44
 *     -                for the parser : ContainedObjectsParserParser *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
*/
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "ContainedObjectsParser.h"
/* ----------------------------------------- */





/* MACROS that hide the C interface implementations from the
 * generated code, which makes it a little more understandable to the human eye.
 * I am very much against using C pre-processor macros for function calls and bits
 * of code as you cannot see what is happening when single stepping in debuggers
 * and so on. The exception (in my book at least) is for generated code, where you are
 * not maintaining it, but may wish to read and understand it. If you single step it, you know that input()
 * hides some indirect calls, but is always referring to the input stream. This is
 * probably more readable than ctx->input->istream->input(snarfle0->blarg) and allows me to rejig
 * the runtime interfaces without changing the generated code too often, without
 * confusing the reader of the generated output, who may not wish to know the gory
 * details of the interface inheritance.
 */
 
#define		CTX	ctx

/* Aids in accessing scopes for grammar programmers
 */
#undef	SCOPE_TYPE
#undef	SCOPE_STACK
#undef	SCOPE_TOP
#define	SCOPE_TYPE(scope)   pContainedObjectsParser_##scope##_SCOPE
#define SCOPE_STACK(scope)  pContainedObjectsParser_##scope##Stack
#define	SCOPE_TOP(scope)    ctx->pContainedObjectsParser_##scope##Top
#define	SCOPE_SIZE(scope)		ctx->pContainedObjectsParser_##scope##Stack_limit
#define SCOPE_INSTANCE(scope, i)	(ctx->SCOPE_STACK(scope)->get(ctx->SCOPE_STACK(scope),i))

/* Macros for accessing things in the parser
 */
 
#undef	    PARSER		    
#undef	    RECOGNIZER		    
#undef	    HAVEPARSEDRULE
#undef		MEMOIZE
#undef	    INPUT
#undef	    STRSTREAM
#undef	    HASEXCEPTION
#undef	    EXCEPTION
#undef	    MATCHT
#undef	    MATCHANYT
#undef	    FOLLOWSTACK
#undef	    FOLLOWPUSH
#undef	    FOLLOWPOP
#undef	    PRECOVER
#undef	    PREPORTERROR
#undef	    LA
#undef	    LT
#undef	    CONSTRUCTEX
#undef	    CONSUME
#undef	    MARK
#undef	    REWIND
#undef	    REWINDLAST
#undef	    PERRORRECOVERY
#undef	    HASFAILED
#undef	    FAILEDFLAG
#undef	    RECOVERFROMMISMATCHEDSET
#undef	    RECOVERFROMMISMATCHEDELEMENT
#undef		INDEX
#undef      ADAPTOR
#undef		SEEK
#undef	    RULEMEMO		    
#undef		DBG

#define	    PARSER				ctx->pParser  
#define	    RECOGNIZER				PARSER->rec
#define	    PSRSTATE				RECOGNIZER->state
#define	    HAVEPARSEDRULE(r)			RECOGNIZER->alreadyParsedRule(RECOGNIZER, r)
#define	    MEMOIZE(ri,si)			RECOGNIZER->memoize(RECOGNIZER, ri, si)
#define	    INPUT				PARSER->tstream
#define	    STRSTREAM				INPUT
#define	    ISTREAM				INPUT->istream
#define	    INDEX()				ISTREAM->index(INPUT->istream)
#define	    HASEXCEPTION()			(PSRSTATE->error == ANTLR3_TRUE)
#define	    EXCEPTION				PSRSTATE->exception
#define	    MATCHT(t, fs)			RECOGNIZER->match(RECOGNIZER, t, fs)
#define	    MATCHANYT()				RECOGNIZER->matchAny(RECOGNIZER)
#define	    FOLLOWSTACK				PSRSTATE->following
#ifdef  SKIP_FOLLOW_SETS
#define	    FOLLOWPUSH(x)
#define	    FOLLOWPOP()
#else
#define	    FOLLOWPUSH(x)			FOLLOWSTACK->push(FOLLOWSTACK, ((void *)(&(x))), NULL)
#define	    FOLLOWPOP()				FOLLOWSTACK->pop(FOLLOWSTACK)
#endif
#define	    PRECOVER()				RECOGNIZER->recover(RECOGNIZER)
#define	    PREPORTERROR()			RECOGNIZER->reportError(RECOGNIZER)
#define	    LA(n)				INPUT->istream->_LA(ISTREAM, n)
#define	    LT(n)				INPUT->_LT(INPUT, n)
#define	    CONSTRUCTEX()			RECOGNIZER->exConstruct(RECOGNIZER)
#define	    CONSUME()				ISTREAM->consume(ISTREAM)
#define	    MARK()				ISTREAM->mark(ISTREAM)
#define	    REWIND(m)				ISTREAM->rewind(ISTREAM, m)
#define	    REWINDLAST()			ISTREAM->rewindLast(ISTREAM)
#define	    SEEK(n)				ISTREAM->seek(ISTREAM, n)
#define	    PERRORRECOVERY			PSRSTATE->errorRecovery
#define	    FAILEDFLAG				PSRSTATE->failed
#define	    HASFAILED()				(FAILEDFLAG == ANTLR3_TRUE)
#define	    BACKTRACKING			PSRSTATE->backtracking
#define	    RECOVERFROMMISMATCHEDSET(s)		RECOGNIZER->recoverFromMismatchedSet(RECOGNIZER, s)
#define	    RECOVERFROMMISMATCHEDELEMENT(e)	RECOGNIZER->recoverFromMismatchedElement(RECOGNIZER, s)
#define     ADAPTOR                         ctx->adaptor
#define		RULEMEMO						PSRSTATE->ruleMemo
#define		DBG								RECOGNIZER->debugger

#define		TOKTEXT(tok, txt)				tok, (pANTLR3_UINT8)txt

/* The 4 tokens defined below may well clash with your own #defines or token types. If so
 * then for the present you must use different names for your defines as these are hard coded
 * in the code generator. It would be better not to use such names internally, and maybe
 * we can change this in a forthcoming release. I deliberately do not #undef these
 * here as this will at least give you a redefined error somewhere if they clash.
 */
#define	    UP	    ANTLR3_TOKEN_UP
#define	    DOWN    ANTLR3_TOKEN_DOWN
#define	    EOR	    ANTLR3_TOKEN_EOR
#define	    INVALID ANTLR3_TOKEN_INVALID


/* =============================================================================
 * Functions to create and destroy scopes. First come the rule scopes, followed
 * by the global declared scopes.
 */



/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */



/** \brief Table of all token names in symbolic order, mainly used for
 *         error reporting.
 */
pANTLR3_UINT8   ContainedObjectsParserTokenNames[66+4]
     = {
        (pANTLR3_UINT8) "<invalid>",       /* String to print to indicate an invalid token */
        (pANTLR3_UINT8) "<EOR>",
        (pANTLR3_UINT8) "<DOWN>", 
        (pANTLR3_UINT8) "<UP>", 
        (pANTLR3_UINT8) "CLASS_KW",
        (pANTLR3_UINT8) "INTERFACE_KW",
        (pANTLR3_UINT8) "IMPLEMENTS_KW",
        (pANTLR3_UINT8) "STATIC_KW",
        (pANTLR3_UINT8) "INTEGER_KW",
        (pANTLR3_UINT8) "FLOAT_KW",
        (pANTLR3_UINT8) "STRING_KW",
        (pANTLR3_UINT8) "N_CLASS_DECL",
        (pANTLR3_UINT8) "N_IFACE_DECL",
        (pANTLR3_UINT8) "N_FORMAL_CLASS_PARAMS",
        (pANTLR3_UINT8) "N_BODY",
        (pANTLR3_UINT8) "N_IMPLEMENTS_DECL",
        (pANTLR3_UINT8) "N_IMPLEMENTED_IFACE",
        (pANTLR3_UINT8) "N_FORMAL_CLASS_PARAM",
        (pANTLR3_UINT8) "N_VARDEF",
        (pANTLR3_UINT8) "N_TYPE",
        (pANTLR3_UINT8) "N_OBJECT_TYPE",
        (pANTLR3_UINT8) "N_CLASS_TYPE",
        (pANTLR3_UINT8) "N_ARRAY_TYPE",
        (pANTLR3_UINT8) "N_VALUE",
        (pANTLR3_UINT8) "N_ACTUAL_PARAMS",
        (pANTLR3_UINT8) "N_ACTUAL_PARAM",
        (pANTLR3_UINT8) "N_SIMPLE_TYPE",
        (pANTLR3_UINT8) "N_ARRAY_VALUES",
        (pANTLR3_UINT8) "N_INTEGER_TYPE",
        (pANTLR3_UINT8) "N_FLOAT_TYPE",
        (pANTLR3_UINT8) "N_STRING_TYPE",
        (pANTLR3_UINT8) "N_OBJECT_INIT_VAL",
        (pANTLR3_UINT8) "N_ARRAY_INIT_VAL",
        (pANTLR3_UINT8) "N_LITERAL_VAL",
        (pANTLR3_UINT8) "N_REFERENCE_VAL",
        (pANTLR3_UINT8) "N_CLASS_NAME",
        (pANTLR3_UINT8) "N_IFACE_NAME",
        (pANTLR3_UINT8) "N_PARAM_CLASS",
        (pANTLR3_UINT8) "N_SCOPE",
        (pANTLR3_UINT8) "N_VAR_NAME",
        (pANTLR3_UINT8) "N_PARAM_NAME",
        (pANTLR3_UINT8) "N_TYPE_NAME",
        (pANTLR3_UINT8) "N_PROC_NAME",
        (pANTLR3_UINT8) "N_COMMAND_NAME",
        (pANTLR3_UINT8) "N_INT_LITERAL",
        (pANTLR3_UINT8) "N_FLOAT_LITERAL",
        (pANTLR3_UINT8) "N_STRING_LITERAL",
        (pANTLR3_UINT8) "N_REF_PATH",
        (pANTLR3_UINT8) "ID",
        (pANTLR3_UINT8) "INTL",
        (pANTLR3_UINT8) "FLOATL",
        (pANTLR3_UINT8) "STRINGL",
        (pANTLR3_UINT8) "UNICODE_CHAR",
        (pANTLR3_UINT8) "EXPONENT",
        (pANTLR3_UINT8) "COMMENT",
        (pANTLR3_UINT8) "ESC_SEQ",
        (pANTLR3_UINT8) "HEX_DIGIT",
        (pANTLR3_UINT8) "SPACE",
        (pANTLR3_UINT8) "'('",
        (pANTLR3_UINT8) "')'",
        (pANTLR3_UINT8) "'{'",
        (pANTLR3_UINT8) "'}'",
        (pANTLR3_UINT8) "','",
        (pANTLR3_UINT8) "'='",
        (pANTLR3_UINT8) "';'",
        (pANTLR3_UINT8) "'.'",
        (pANTLR3_UINT8) "'['",
        (pANTLR3_UINT8) "']'",
        (pANTLR3_UINT8) "'<'",
        (pANTLR3_UINT8) "'>'"
       };

        

// Forward declare the locally static matching functions we have generated.
//
static ContainedObjectsParser_init_return	init    (pContainedObjectsParser ctx);
static ContainedObjectsParser_interfaceDecl_return	interfaceDecl    (pContainedObjectsParser ctx);
static ContainedObjectsParser_classDecl_return	classDecl    (pContainedObjectsParser ctx);
static ContainedObjectsParser_formalClassParamList_return	formalClassParamList    (pContainedObjectsParser ctx);
static ContainedObjectsParser_formalClassParam_return	formalClassParam    (pContainedObjectsParser ctx);
static ContainedObjectsParser_implementsDecl_return	implementsDecl    (pContainedObjectsParser ctx);
static ContainedObjectsParser_body_return	body    (pContainedObjectsParser ctx);
static ContainedObjectsParser_varDef_return	varDef    (pContainedObjectsParser ctx);
static ContainedObjectsParser_actualParamList_return	actualParamList    (pContainedObjectsParser ctx);
static ContainedObjectsParser_actualParam_return	actualParam    (pContainedObjectsParser ctx);
static ContainedObjectsParser_value_return	value    (pContainedObjectsParser ctx);
static ContainedObjectsParser_reference_return	reference    (pContainedObjectsParser ctx);
static ContainedObjectsParser_literal_return	literal    (pContainedObjectsParser ctx);
static ContainedObjectsParser_arrayInit_return	arrayInit    (pContainedObjectsParser ctx);
static ContainedObjectsParser_objectInit_return	objectInit    (pContainedObjectsParser ctx);
static ContainedObjectsParser_type_return	type    (pContainedObjectsParser ctx);
static ContainedObjectsParser_arrayType_return	arrayType    (pContainedObjectsParser ctx);
static ContainedObjectsParser_simpleType_return	simpleType    (pContainedObjectsParser ctx);
static void	ContainedObjectsParserFree(pContainedObjectsParser ctx);
static void     ContainedObjectsParserReset (pContainedObjectsParser ctx);

/* For use in tree output where we are accumulating rule labels via label += ruleRef
 * we need a function that knows how to free a return scope when the list is destroyed. 
 * We cannot just use ANTLR3_FREE because in debug tracking mode, this is a macro.
 */
static	void ANTLR3_CDECL freeScope(void * scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g";

/** \brief Return the name of the grammar file that generated this code.
 */
static const char * getGrammarFileName()
{
	return fileName;
}
/** \brief Create a new ContainedObjectsParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pContainedObjectsParser
ContainedObjectsParserNew   (pANTLR3_COMMON_TOKEN_STREAM instream)
{
	// See if we can create a new parser with the standard constructor
	//
	return ContainedObjectsParserNewSSD(instream, NULL);
}

/** \brief Create a new ContainedObjectsParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pContainedObjectsParser
ContainedObjectsParserNewSSD   (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state)
{
    pContainedObjectsParser ctx;	    /* Context structure we will build and return   */
    
    ctx	= (pContainedObjectsParser) ANTLR3_CALLOC(1, sizeof(ContainedObjectsParser));
    
    if	(ctx == NULL)
    {
		// Failed to allocate memory for parser context
		//
        return  NULL;
    }
    
    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * the base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 parser function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function. 
     *
     * We don't use the macros defined in ContainedObjectsParser.h here, in order that you can get a sense
     * of what goes where.
     */

    /* Create a base parser/recognizer, using the supplied token stream
     */
    ctx->pParser	    = antlr3ParserNewStream(ANTLR3_SIZE_HINT, instream->tstream, state);
    /* Install the implementation of our ContainedObjectsParser interface
     */
    ctx->init	= init;
    ctx->interfaceDecl	= interfaceDecl;
    ctx->classDecl	= classDecl;
    ctx->formalClassParamList	= formalClassParamList;
    ctx->formalClassParam	= formalClassParam;
    ctx->implementsDecl	= implementsDecl;
    ctx->body	= body;
    ctx->varDef	= varDef;
    ctx->actualParamList	= actualParamList;
    ctx->actualParam	= actualParam;
    ctx->value	= value;
    ctx->reference	= reference;
    ctx->literal	= literal;
    ctx->arrayInit	= arrayInit;
    ctx->objectInit	= objectInit;
    ctx->type	= type;
    ctx->arrayType	= arrayType;
    ctx->simpleType	= simpleType;
    ctx->free			= ContainedObjectsParserFree;
    ctx->reset			= ContainedObjectsParserReset;
    ctx->getGrammarFileName	= getGrammarFileName;
    
    /* Install the scope pushing methods.
     */
    ADAPTOR	= ANTLR3_TREE_ADAPTORNew(instream->tstream->tokenSource->strFactory);
    ctx->vectors	= antlr3VectorFactoryNew(0);
    

	
    /* Install the token table
     */
    PSRSTATE->tokenNames   = ContainedObjectsParserTokenNames;
    
    
    /* Return the newly built parser to the caller
     */
    return  ctx;
}

static void
ContainedObjectsParserReset (pContainedObjectsParser ctx)
{
    RECOGNIZER->reset(RECOGNIZER);
}

/** Free the parser resources
 */
 static void
 ContainedObjectsParserFree(pContainedObjectsParser ctx)
 {
    /* Free any scope memory
     */
    
    ctx->vectors->close(ctx->vectors);
    /* We created the adaptor so we must free it
     */
    ADAPTOR->free(ADAPTOR);
	// Free this parser
	//
    ctx->pParser->free(ctx->pParser);
    
    ANTLR3_FREE(ctx);

    /* Everything is released, so we can return
     */
    return;
 }
 
/** Return token names used by this parser
 *
 * The returned pointer is used as an index into the token names table (using the token 
 * number as the index).
 * 
 * \return Pointer to first char * in the table.
 */
static pANTLR3_UINT8    *getTokenNames() 
{
        return ContainedObjectsParserTokenNames; 
}

    
/* Declare the bitsets
 */

/** Bitset defining follow set for error recovery in rule state: FOLLOW_classDecl_in_init274  */
static	ANTLR3_BITWORD FOLLOW_classDecl_in_init274_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_classDecl_in_init274	= { FOLLOW_classDecl_in_init274_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_interfaceDecl_in_init287  */
static	ANTLR3_BITWORD FOLLOW_interfaceDecl_in_init287_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_interfaceDecl_in_init287	= { FOLLOW_interfaceDecl_in_init287_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_INTERFACE_KW_in_interfaceDecl309  */
static	ANTLR3_BITWORD FOLLOW_INTERFACE_KW_in_interfaceDecl309_bits[]	= { ANTLR3_UINT64_LIT(0x0001000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_INTERFACE_KW_in_interfaceDecl309	= { FOLLOW_INTERFACE_KW_in_interfaceDecl309_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_interfaceDecl311  */
static	ANTLR3_BITWORD FOLLOW_ID_in_interfaceDecl311_bits[]	= { ANTLR3_UINT64_LIT(0x0400000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_interfaceDecl311	= { FOLLOW_ID_in_interfaceDecl311_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_58_in_interfaceDecl313  */
static	ANTLR3_BITWORD FOLLOW_58_in_interfaceDecl313_bits[]	= { ANTLR3_UINT64_LIT(0x0801000000000710) };
static  ANTLR3_BITSET_LIST FOLLOW_58_in_interfaceDecl313	= { FOLLOW_58_in_interfaceDecl313_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_formalClassParamList_in_interfaceDecl315  */
static	ANTLR3_BITWORD FOLLOW_formalClassParamList_in_interfaceDecl315_bits[]	= { ANTLR3_UINT64_LIT(0x0800000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_formalClassParamList_in_interfaceDecl315	= { FOLLOW_formalClassParamList_in_interfaceDecl315_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_59_in_interfaceDecl317  */
static	ANTLR3_BITWORD FOLLOW_59_in_interfaceDecl317_bits[]	= { ANTLR3_UINT64_LIT(0x1000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_59_in_interfaceDecl317	= { FOLLOW_59_in_interfaceDecl317_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_60_in_interfaceDecl319  */
static	ANTLR3_BITWORD FOLLOW_60_in_interfaceDecl319_bits[]	= { ANTLR3_UINT64_LIT(0x2001000000000790) };
static  ANTLR3_BITSET_LIST FOLLOW_60_in_interfaceDecl319	= { FOLLOW_60_in_interfaceDecl319_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_body_in_interfaceDecl321  */
static	ANTLR3_BITWORD FOLLOW_body_in_interfaceDecl321_bits[]	= { ANTLR3_UINT64_LIT(0x2000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_body_in_interfaceDecl321	= { FOLLOW_body_in_interfaceDecl321_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_61_in_interfaceDecl323  */
static	ANTLR3_BITWORD FOLLOW_61_in_interfaceDecl323_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_61_in_interfaceDecl323	= { FOLLOW_61_in_interfaceDecl323_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EOF_in_interfaceDecl325  */
static	ANTLR3_BITWORD FOLLOW_EOF_in_interfaceDecl325_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_EOF_in_interfaceDecl325	= { FOLLOW_EOF_in_interfaceDecl325_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CLASS_KW_in_classDecl361  */
static	ANTLR3_BITWORD FOLLOW_CLASS_KW_in_classDecl361_bits[]	= { ANTLR3_UINT64_LIT(0x0001000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_CLASS_KW_in_classDecl361	= { FOLLOW_CLASS_KW_in_classDecl361_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_classDecl363  */
static	ANTLR3_BITWORD FOLLOW_ID_in_classDecl363_bits[]	= { ANTLR3_UINT64_LIT(0x0400000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_classDecl363	= { FOLLOW_ID_in_classDecl363_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_58_in_classDecl365  */
static	ANTLR3_BITWORD FOLLOW_58_in_classDecl365_bits[]	= { ANTLR3_UINT64_LIT(0x0801000000000710) };
static  ANTLR3_BITSET_LIST FOLLOW_58_in_classDecl365	= { FOLLOW_58_in_classDecl365_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_formalClassParamList_in_classDecl367  */
static	ANTLR3_BITWORD FOLLOW_formalClassParamList_in_classDecl367_bits[]	= { ANTLR3_UINT64_LIT(0x0800000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_formalClassParamList_in_classDecl367	= { FOLLOW_formalClassParamList_in_classDecl367_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_59_in_classDecl369  */
static	ANTLR3_BITWORD FOLLOW_59_in_classDecl369_bits[]	= { ANTLR3_UINT64_LIT(0x1000000000000040) };
static  ANTLR3_BITSET_LIST FOLLOW_59_in_classDecl369	= { FOLLOW_59_in_classDecl369_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_implementsDecl_in_classDecl371  */
static	ANTLR3_BITWORD FOLLOW_implementsDecl_in_classDecl371_bits[]	= { ANTLR3_UINT64_LIT(0x1000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_implementsDecl_in_classDecl371	= { FOLLOW_implementsDecl_in_classDecl371_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_60_in_classDecl373  */
static	ANTLR3_BITWORD FOLLOW_60_in_classDecl373_bits[]	= { ANTLR3_UINT64_LIT(0x2001000000000790) };
static  ANTLR3_BITSET_LIST FOLLOW_60_in_classDecl373	= { FOLLOW_60_in_classDecl373_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_body_in_classDecl375  */
static	ANTLR3_BITWORD FOLLOW_body_in_classDecl375_bits[]	= { ANTLR3_UINT64_LIT(0x2000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_body_in_classDecl375	= { FOLLOW_body_in_classDecl375_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_61_in_classDecl377  */
static	ANTLR3_BITWORD FOLLOW_61_in_classDecl377_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_61_in_classDecl377	= { FOLLOW_61_in_classDecl377_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EOF_in_classDecl379  */
static	ANTLR3_BITWORD FOLLOW_EOF_in_classDecl379_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_EOF_in_classDecl379	= { FOLLOW_EOF_in_classDecl379_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_formalClassParam_in_formalClassParamList420  */
static	ANTLR3_BITWORD FOLLOW_formalClassParam_in_formalClassParamList420_bits[]	= { ANTLR3_UINT64_LIT(0x4000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_formalClassParam_in_formalClassParamList420	= { FOLLOW_formalClassParam_in_formalClassParamList420_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_62_in_formalClassParamList423  */
static	ANTLR3_BITWORD FOLLOW_62_in_formalClassParamList423_bits[]	= { ANTLR3_UINT64_LIT(0x0001000000000710) };
static  ANTLR3_BITSET_LIST FOLLOW_62_in_formalClassParamList423	= { FOLLOW_62_in_formalClassParamList423_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_formalClassParam_in_formalClassParamList425  */
static	ANTLR3_BITWORD FOLLOW_formalClassParam_in_formalClassParamList425_bits[]	= { ANTLR3_UINT64_LIT(0x4000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_formalClassParam_in_formalClassParamList425	= { FOLLOW_formalClassParam_in_formalClassParamList425_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_in_formalClassParam450  */
static	ANTLR3_BITWORD FOLLOW_type_in_formalClassParam450_bits[]	= { ANTLR3_UINT64_LIT(0x0001000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_type_in_formalClassParam450	= { FOLLOW_type_in_formalClassParam450_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_formalClassParam452  */
static	ANTLR3_BITWORD FOLLOW_ID_in_formalClassParam452_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_formalClassParam452	= { FOLLOW_ID_in_formalClassParam452_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IMPLEMENTS_KW_in_implementsDecl482  */
static	ANTLR3_BITWORD FOLLOW_IMPLEMENTS_KW_in_implementsDecl482_bits[]	= { ANTLR3_UINT64_LIT(0x0001000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_IMPLEMENTS_KW_in_implementsDecl482	= { FOLLOW_IMPLEMENTS_KW_in_implementsDecl482_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_implementsDecl484  */
static	ANTLR3_BITWORD FOLLOW_ID_in_implementsDecl484_bits[]	= { ANTLR3_UINT64_LIT(0x4000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_implementsDecl484	= { FOLLOW_ID_in_implementsDecl484_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_62_in_implementsDecl487  */
static	ANTLR3_BITWORD FOLLOW_62_in_implementsDecl487_bits[]	= { ANTLR3_UINT64_LIT(0x0001000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_62_in_implementsDecl487	= { FOLLOW_62_in_implementsDecl487_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_implementsDecl489  */
static	ANTLR3_BITWORD FOLLOW_ID_in_implementsDecl489_bits[]	= { ANTLR3_UINT64_LIT(0x4000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_implementsDecl489	= { FOLLOW_ID_in_implementsDecl489_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_varDef_in_body515  */
static	ANTLR3_BITWORD FOLLOW_varDef_in_body515_bits[]	= { ANTLR3_UINT64_LIT(0x0001000000000792) };
static  ANTLR3_BITSET_LIST FOLLOW_varDef_in_body515	= { FOLLOW_varDef_in_body515_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_STATIC_KW_in_varDef538  */
static	ANTLR3_BITWORD FOLLOW_STATIC_KW_in_varDef538_bits[]	= { ANTLR3_UINT64_LIT(0x0001000000000710) };
static  ANTLR3_BITSET_LIST FOLLOW_STATIC_KW_in_varDef538	= { FOLLOW_STATIC_KW_in_varDef538_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_in_varDef541  */
static	ANTLR3_BITWORD FOLLOW_type_in_varDef541_bits[]	= { ANTLR3_UINT64_LIT(0x0001000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_type_in_varDef541	= { FOLLOW_type_in_varDef541_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_varDef543  */
static	ANTLR3_BITWORD FOLLOW_ID_in_varDef543_bits[]	= { ANTLR3_UINT64_LIT(0x8000000000000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_varDef543	= { FOLLOW_ID_in_varDef543_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_63_in_varDef546  */
static	ANTLR3_BITWORD FOLLOW_63_in_varDef546_bits[]	= { ANTLR3_UINT64_LIT(0x000F000000000710) };
static  ANTLR3_BITSET_LIST FOLLOW_63_in_varDef546	= { FOLLOW_63_in_varDef546_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_value_in_varDef548  */
static	ANTLR3_BITWORD FOLLOW_value_in_varDef548_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_value_in_varDef548	= { FOLLOW_value_in_varDef548_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_64_in_varDef552  */
static	ANTLR3_BITWORD FOLLOW_64_in_varDef552_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_64_in_varDef552	= { FOLLOW_64_in_varDef552_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_actualParam_in_actualParamList594  */
static	ANTLR3_BITWORD FOLLOW_actualParam_in_actualParamList594_bits[]	= { ANTLR3_UINT64_LIT(0x4000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_actualParam_in_actualParamList594	= { FOLLOW_actualParam_in_actualParamList594_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_62_in_actualParamList597  */
static	ANTLR3_BITWORD FOLLOW_62_in_actualParamList597_bits[]	= { ANTLR3_UINT64_LIT(0x0001000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_62_in_actualParamList597	= { FOLLOW_62_in_actualParamList597_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_actualParam_in_actualParamList599  */
static	ANTLR3_BITWORD FOLLOW_actualParam_in_actualParamList599_bits[]	= { ANTLR3_UINT64_LIT(0x4000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_actualParam_in_actualParamList599	= { FOLLOW_actualParam_in_actualParamList599_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_actualParam625  */
static	ANTLR3_BITWORD FOLLOW_ID_in_actualParam625_bits[]	= { ANTLR3_UINT64_LIT(0x8000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_actualParam625	= { FOLLOW_ID_in_actualParam625_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_63_in_actualParam627  */
static	ANTLR3_BITWORD FOLLOW_63_in_actualParam627_bits[]	= { ANTLR3_UINT64_LIT(0x000F000000000710) };
static  ANTLR3_BITSET_LIST FOLLOW_63_in_actualParam627	= { FOLLOW_63_in_actualParam627_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_value_in_actualParam629  */
static	ANTLR3_BITWORD FOLLOW_value_in_actualParam629_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_value_in_actualParam629	= { FOLLOW_value_in_actualParam629_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_objectInit_in_value655  */
static	ANTLR3_BITWORD FOLLOW_objectInit_in_value655_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_objectInit_in_value655	= { FOLLOW_objectInit_in_value655_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arrayInit_in_value668  */
static	ANTLR3_BITWORD FOLLOW_arrayInit_in_value668_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_arrayInit_in_value668	= { FOLLOW_arrayInit_in_value668_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_literal_in_value681  */
static	ANTLR3_BITWORD FOLLOW_literal_in_value681_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_literal_in_value681	= { FOLLOW_literal_in_value681_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_reference_in_value696  */
static	ANTLR3_BITWORD FOLLOW_reference_in_value696_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_reference_in_value696	= { FOLLOW_reference_in_value696_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_reference715  */
static	ANTLR3_BITWORD FOLLOW_ID_in_reference715_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_reference715	= { FOLLOW_ID_in_reference715_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_65_in_reference718  */
static	ANTLR3_BITWORD FOLLOW_65_in_reference718_bits[]	= { ANTLR3_UINT64_LIT(0x0001000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_65_in_reference718	= { FOLLOW_65_in_reference718_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_reference720  */
static	ANTLR3_BITWORD FOLLOW_ID_in_reference720_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_reference720	= { FOLLOW_ID_in_reference720_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_INTL_in_literal739  */
static	ANTLR3_BITWORD FOLLOW_INTL_in_literal739_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_INTL_in_literal739	= { FOLLOW_INTL_in_literal739_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FLOATL_in_literal752  */
static	ANTLR3_BITWORD FOLLOW_FLOATL_in_literal752_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_FLOATL_in_literal752	= { FOLLOW_FLOATL_in_literal752_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_STRINGL_in_literal767  */
static	ANTLR3_BITWORD FOLLOW_STRINGL_in_literal767_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_STRINGL_in_literal767	= { FOLLOW_STRINGL_in_literal767_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_simpleType_in_arrayInit786  */
static	ANTLR3_BITWORD FOLLOW_simpleType_in_arrayInit786_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_simpleType_in_arrayInit786	= { FOLLOW_simpleType_in_arrayInit786_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_66_in_arrayInit788  */
static	ANTLR3_BITWORD FOLLOW_66_in_arrayInit788_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_66_in_arrayInit788	= { FOLLOW_66_in_arrayInit788_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_67_in_arrayInit790  */
static	ANTLR3_BITWORD FOLLOW_67_in_arrayInit790_bits[]	= { ANTLR3_UINT64_LIT(0x1000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_67_in_arrayInit790	= { FOLLOW_67_in_arrayInit790_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_60_in_arrayInit792  */
static	ANTLR3_BITWORD FOLLOW_60_in_arrayInit792_bits[]	= { ANTLR3_UINT64_LIT(0x200F000000000710) };
static  ANTLR3_BITSET_LIST FOLLOW_60_in_arrayInit792	= { FOLLOW_60_in_arrayInit792_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_value_in_arrayInit795  */
static	ANTLR3_BITWORD FOLLOW_value_in_arrayInit795_bits[]	= { ANTLR3_UINT64_LIT(0x6000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_value_in_arrayInit795	= { FOLLOW_value_in_arrayInit795_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_62_in_arrayInit798  */
static	ANTLR3_BITWORD FOLLOW_62_in_arrayInit798_bits[]	= { ANTLR3_UINT64_LIT(0x000F000000000710) };
static  ANTLR3_BITSET_LIST FOLLOW_62_in_arrayInit798	= { FOLLOW_62_in_arrayInit798_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_value_in_arrayInit800  */
static	ANTLR3_BITWORD FOLLOW_value_in_arrayInit800_bits[]	= { ANTLR3_UINT64_LIT(0x6000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_value_in_arrayInit800	= { FOLLOW_value_in_arrayInit800_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_61_in_arrayInit806  */
static	ANTLR3_BITWORD FOLLOW_61_in_arrayInit806_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_61_in_arrayInit806	= { FOLLOW_61_in_arrayInit806_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_objectInit842  */
static	ANTLR3_BITWORD FOLLOW_ID_in_objectInit842_bits[]	= { ANTLR3_UINT64_LIT(0x0400000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_objectInit842	= { FOLLOW_ID_in_objectInit842_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_58_in_objectInit844  */
static	ANTLR3_BITWORD FOLLOW_58_in_objectInit844_bits[]	= { ANTLR3_UINT64_LIT(0x0801000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_58_in_objectInit844	= { FOLLOW_58_in_objectInit844_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_actualParamList_in_objectInit846  */
static	ANTLR3_BITWORD FOLLOW_actualParamList_in_objectInit846_bits[]	= { ANTLR3_UINT64_LIT(0x0800000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_actualParamList_in_objectInit846	= { FOLLOW_actualParamList_in_objectInit846_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_59_in_objectInit848  */
static	ANTLR3_BITWORD FOLLOW_59_in_objectInit848_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_59_in_objectInit848	= { FOLLOW_59_in_objectInit848_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arrayType_in_type874  */
static	ANTLR3_BITWORD FOLLOW_arrayType_in_type874_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_arrayType_in_type874	= { FOLLOW_arrayType_in_type874_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_simpleType_in_type887  */
static	ANTLR3_BITWORD FOLLOW_simpleType_in_type887_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_simpleType_in_type887	= { FOLLOW_simpleType_in_type887_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_simpleType_in_arrayType906  */
static	ANTLR3_BITWORD FOLLOW_simpleType_in_arrayType906_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_simpleType_in_arrayType906	= { FOLLOW_simpleType_in_arrayType906_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_66_in_arrayType908  */
static	ANTLR3_BITWORD FOLLOW_66_in_arrayType908_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_66_in_arrayType908	= { FOLLOW_66_in_arrayType908_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_67_in_arrayType910  */
static	ANTLR3_BITWORD FOLLOW_67_in_arrayType910_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_67_in_arrayType910	= { FOLLOW_67_in_arrayType910_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_INTEGER_KW_in_simpleType932  */
static	ANTLR3_BITWORD FOLLOW_INTEGER_KW_in_simpleType932_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_INTEGER_KW_in_simpleType932	= { FOLLOW_INTEGER_KW_in_simpleType932_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FLOAT_KW_in_simpleType942  */
static	ANTLR3_BITWORD FOLLOW_FLOAT_KW_in_simpleType942_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_FLOAT_KW_in_simpleType942	= { FOLLOW_FLOAT_KW_in_simpleType942_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_STRING_KW_in_simpleType952  */
static	ANTLR3_BITWORD FOLLOW_STRING_KW_in_simpleType952_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_STRING_KW_in_simpleType952	= { FOLLOW_STRING_KW_in_simpleType952_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_simpleType962  */
static	ANTLR3_BITWORD FOLLOW_ID_in_simpleType962_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_simpleType962	= { FOLLOW_ID_in_simpleType962_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CLASS_KW_in_simpleType977  */
static	ANTLR3_BITWORD FOLLOW_CLASS_KW_in_simpleType977_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_CLASS_KW_in_simpleType977	= { FOLLOW_CLASS_KW_in_simpleType977_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_68_in_simpleType979  */
static	ANTLR3_BITWORD FOLLOW_68_in_simpleType979_bits[]	= { ANTLR3_UINT64_LIT(0x0001000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_68_in_simpleType979	= { FOLLOW_68_in_simpleType979_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_simpleType981  */
static	ANTLR3_BITWORD FOLLOW_ID_in_simpleType981_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_simpleType981	= { FOLLOW_ID_in_simpleType981_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_69_in_simpleType983  */
static	ANTLR3_BITWORD FOLLOW_69_in_simpleType983_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_69_in_simpleType983	= { FOLLOW_69_in_simpleType983_bits, 1	};
     

 
 
/* ==============================================
 * Parsing rules
 */
/** 
 * $ANTLR start init
 * C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:74:1: init : ( classDecl -> ^( N_CLASS_DECL classDecl ) | interfaceDecl -> ^( N_IFACE_DECL interfaceDecl ) );
 */
static ContainedObjectsParser_init_return
init(pContainedObjectsParser ctx)
{   
    ContainedObjectsParser_init_return retval;

    pANTLR3_BASE_TREE root_0;

    ContainedObjectsParser_classDecl_return classDecl1;
    #undef	RETURN_TYPE_classDecl1
    #define	RETURN_TYPE_classDecl1 ContainedObjectsParser_classDecl_return

    ContainedObjectsParser_interfaceDecl_return interfaceDecl2;
    #undef	RETURN_TYPE_interfaceDecl2
    #define	RETURN_TYPE_interfaceDecl2 ContainedObjectsParser_interfaceDecl_return

    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_interfaceDecl;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_classDecl;
    /* Initialize rule variables
     */


    root_0 = NULL;

    classDecl1.tree = NULL;
    interfaceDecl2.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    stream_interfaceDecl   = NULL;
    #define CREATE_stream_interfaceDecl  if (stream_interfaceDecl == NULL) {stream_interfaceDecl = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule interfaceDecl"); }
    stream_classDecl   = NULL;
    #define CREATE_stream_classDecl  if (stream_classDecl == NULL) {stream_classDecl = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule classDecl"); }

    retval.tree  = NULL;
    {
        {
            //  C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:74:7: ( classDecl -> ^( N_CLASS_DECL classDecl ) | interfaceDecl -> ^( N_IFACE_DECL interfaceDecl ) )
            
            ANTLR3_UINT32 alt1;

            alt1=2;

            switch ( LA(1) ) 
            {
            case CLASS_KW:
            	{
            		alt1=1;
            	}
                break;
            case INTERFACE_KW:
            	{
            		alt1=2;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 1;
                EXCEPTION->state        = 0;


                goto ruleinitEx;
            }

            switch (alt1) 
            {
        	case 1:
        	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:74:9: classDecl
        	    {
        	        FOLLOWPUSH(FOLLOW_classDecl_in_init274);
        	        classDecl1=classDecl(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleinitEx;
        	        }

        	        CREATE_stream_classDecl; stream_classDecl->add(stream_classDecl, classDecl1.tree, NULL);

        	         
        	        /* AST REWRITE
        	         * elements          : classDecl
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 74:19: -> ^( N_CLASS_DECL classDecl )
        	        	{
        	        	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:74:22: ^( N_CLASS_DECL classDecl )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, N_CLASS_DECL, (pANTLR3_UINT8)"N_CLASS_DECL"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_classDecl == NULL ? NULL : stream_classDecl->nextTree(stream_classDecl));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:75:4: interfaceDecl
        	    {
        	        FOLLOWPUSH(FOLLOW_interfaceDecl_in_init287);
        	        interfaceDecl2=interfaceDecl(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleinitEx;
        	        }

        	        CREATE_stream_interfaceDecl; stream_interfaceDecl->add(stream_interfaceDecl, interfaceDecl2.tree, NULL);

        	         
        	        /* AST REWRITE
        	         * elements          : interfaceDecl
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 75:18: -> ^( N_IFACE_DECL interfaceDecl )
        	        	{
        	        	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:75:21: ^( N_IFACE_DECL interfaceDecl )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, N_IFACE_DECL, (pANTLR3_UINT8)"N_IFACE_DECL"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_interfaceDecl == NULL ? NULL : stream_interfaceDecl->nextTree(stream_interfaceDecl));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleinitEx; /* Prevent compiler warnings */
    ruleinitEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_interfaceDecl != NULL) stream_interfaceDecl->free(stream_interfaceDecl);
        if (stream_classDecl != NULL) stream_classDecl->free(stream_classDecl);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end init */

/** 
 * $ANTLR start interfaceDecl
 * C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:80:1: interfaceDecl : INTERFACE_KW ID '(' formalClassParamList ')' '{' body '}' EOF -> ^( N_IFACE_NAME ID ) ^( N_FORMAL_CLASS_PARAMS formalClassParamList ) ^( N_BODY body ) ;
 */
static ContainedObjectsParser_interfaceDecl_return
interfaceDecl(pContainedObjectsParser ctx)
{   
    ContainedObjectsParser_interfaceDecl_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    INTERFACE_KW3;
    pANTLR3_COMMON_TOKEN    ID4;
    pANTLR3_COMMON_TOKEN    char_literal5;
    pANTLR3_COMMON_TOKEN    char_literal7;
    pANTLR3_COMMON_TOKEN    char_literal8;
    pANTLR3_COMMON_TOKEN    char_literal10;
    pANTLR3_COMMON_TOKEN    EOF11;
    ContainedObjectsParser_formalClassParamList_return formalClassParamList6;
    #undef	RETURN_TYPE_formalClassParamList6
    #define	RETURN_TYPE_formalClassParamList6 ContainedObjectsParser_formalClassParamList_return

    ContainedObjectsParser_body_return body9;
    #undef	RETURN_TYPE_body9
    #define	RETURN_TYPE_body9 ContainedObjectsParser_body_return

    pANTLR3_BASE_TREE INTERFACE_KW3_tree;
    pANTLR3_BASE_TREE ID4_tree;
    pANTLR3_BASE_TREE char_literal5_tree;
    pANTLR3_BASE_TREE char_literal7_tree;
    pANTLR3_BASE_TREE char_literal8_tree;
    pANTLR3_BASE_TREE char_literal10_tree;
    pANTLR3_BASE_TREE EOF11_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_INTERFACE_KW;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_59;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_58;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_ID;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_EOF;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_60;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_61;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_body;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_formalClassParamList;
    /* Initialize rule variables
     */


    root_0 = NULL;

    INTERFACE_KW3       = NULL;
    ID4       = NULL;
    char_literal5       = NULL;
    char_literal7       = NULL;
    char_literal8       = NULL;
    char_literal10       = NULL;
    EOF11       = NULL;
    formalClassParamList6.tree = NULL;
    body9.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    INTERFACE_KW3_tree   = NULL;
    ID4_tree   = NULL;
    char_literal5_tree   = NULL;
    char_literal7_tree   = NULL;
    char_literal8_tree   = NULL;
    char_literal10_tree   = NULL;
    EOF11_tree   = NULL;

    stream_INTERFACE_KW   = NULL;
    #define CREATE_stream_INTERFACE_KW  if (stream_INTERFACE_KW == NULL) {stream_INTERFACE_KW = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token INTERFACE_KW"); } 
    stream_59   = NULL;
    #define CREATE_stream_59  if (stream_59 == NULL) {stream_59 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 59"); } 
    stream_58   = NULL;
    #define CREATE_stream_58  if (stream_58 == NULL) {stream_58 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 58"); } 
    stream_ID   = NULL;
    #define CREATE_stream_ID  if (stream_ID == NULL) {stream_ID = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token ID"); } 
    stream_EOF   = NULL;
    #define CREATE_stream_EOF  if (stream_EOF == NULL) {stream_EOF = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token EOF"); } 
    stream_60   = NULL;
    #define CREATE_stream_60  if (stream_60 == NULL) {stream_60 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 60"); } 
    stream_61   = NULL;
    #define CREATE_stream_61  if (stream_61 == NULL) {stream_61 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 61"); } 
    stream_body   = NULL;
    #define CREATE_stream_body  if (stream_body == NULL) {stream_body = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule body"); }
    stream_formalClassParamList   = NULL;
    #define CREATE_stream_formalClassParamList  if (stream_formalClassParamList == NULL) {stream_formalClassParamList = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule formalClassParamList"); }

    retval.tree  = NULL;
    {
        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:81:2: ( INTERFACE_KW ID '(' formalClassParamList ')' '{' body '}' EOF -> ^( N_IFACE_NAME ID ) ^( N_FORMAL_CLASS_PARAMS formalClassParamList ) ^( N_BODY body ) )
        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:81:4: INTERFACE_KW ID '(' formalClassParamList ')' '{' body '}' EOF
        {
            INTERFACE_KW3 = (pANTLR3_COMMON_TOKEN) MATCHT(INTERFACE_KW, &FOLLOW_INTERFACE_KW_in_interfaceDecl309); 
            if  (HASEXCEPTION())
            {
                goto ruleinterfaceDeclEx;
            }
             
            CREATE_stream_INTERFACE_KW; stream_INTERFACE_KW->add(stream_INTERFACE_KW, INTERFACE_KW3, NULL);

            ID4 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_interfaceDecl311); 
            if  (HASEXCEPTION())
            {
                goto ruleinterfaceDeclEx;
            }
             
            CREATE_stream_ID; stream_ID->add(stream_ID, ID4, NULL);

            char_literal5 = (pANTLR3_COMMON_TOKEN) MATCHT(58, &FOLLOW_58_in_interfaceDecl313); 
            if  (HASEXCEPTION())
            {
                goto ruleinterfaceDeclEx;
            }
             
            CREATE_stream_58; stream_58->add(stream_58, char_literal5, NULL);

            FOLLOWPUSH(FOLLOW_formalClassParamList_in_interfaceDecl315);
            formalClassParamList6=formalClassParamList(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleinterfaceDeclEx;
            }

            CREATE_stream_formalClassParamList; stream_formalClassParamList->add(stream_formalClassParamList, formalClassParamList6.tree, NULL);
            char_literal7 = (pANTLR3_COMMON_TOKEN) MATCHT(59, &FOLLOW_59_in_interfaceDecl317); 
            if  (HASEXCEPTION())
            {
                goto ruleinterfaceDeclEx;
            }
             
            CREATE_stream_59; stream_59->add(stream_59, char_literal7, NULL);

            char_literal8 = (pANTLR3_COMMON_TOKEN) MATCHT(60, &FOLLOW_60_in_interfaceDecl319); 
            if  (HASEXCEPTION())
            {
                goto ruleinterfaceDeclEx;
            }
             
            CREATE_stream_60; stream_60->add(stream_60, char_literal8, NULL);

            FOLLOWPUSH(FOLLOW_body_in_interfaceDecl321);
            body9=body(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleinterfaceDeclEx;
            }

            CREATE_stream_body; stream_body->add(stream_body, body9.tree, NULL);
            char_literal10 = (pANTLR3_COMMON_TOKEN) MATCHT(61, &FOLLOW_61_in_interfaceDecl323); 
            if  (HASEXCEPTION())
            {
                goto ruleinterfaceDeclEx;
            }
             
            CREATE_stream_61; stream_61->add(stream_61, char_literal10, NULL);

            EOF11 = (pANTLR3_COMMON_TOKEN) MATCHT(EOF, &FOLLOW_EOF_in_interfaceDecl325); 
            if  (HASEXCEPTION())
            {
                goto ruleinterfaceDeclEx;
            }
             
            CREATE_stream_EOF; stream_EOF->add(stream_EOF, EOF11, NULL);


             
            /* AST REWRITE
             * elements          : body, ID, formalClassParamList
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 82:3: -> ^( N_IFACE_NAME ID ) ^( N_FORMAL_CLASS_PARAMS formalClassParamList ) ^( N_BODY body )
            	{
            	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:82:6: ^( N_IFACE_NAME ID )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, N_IFACE_NAME, (pANTLR3_UINT8)"N_IFACE_NAME"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_ID == NULL ? NULL : stream_ID->nextNode(stream_ID));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }
            	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:82:25: ^( N_FORMAL_CLASS_PARAMS formalClassParamList )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, N_FORMAL_CLASS_PARAMS, (pANTLR3_UINT8)"N_FORMAL_CLASS_PARAMS"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_formalClassParamList == NULL ? NULL : stream_formalClassParamList->nextTree(stream_formalClassParamList));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }
            	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:82:71: ^( N_BODY body )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, N_BODY, (pANTLR3_UINT8)"N_BODY"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_body == NULL ? NULL : stream_body->nextTree(stream_body));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleinterfaceDeclEx; /* Prevent compiler warnings */
    ruleinterfaceDeclEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_INTERFACE_KW != NULL) stream_INTERFACE_KW->free(stream_INTERFACE_KW);
        if (stream_59 != NULL) stream_59->free(stream_59);
        if (stream_58 != NULL) stream_58->free(stream_58);
        if (stream_ID != NULL) stream_ID->free(stream_ID);
        if (stream_EOF != NULL) stream_EOF->free(stream_EOF);
        if (stream_60 != NULL) stream_60->free(stream_60);
        if (stream_61 != NULL) stream_61->free(stream_61);
        if (stream_body != NULL) stream_body->free(stream_body);
        if (stream_formalClassParamList != NULL) stream_formalClassParamList->free(stream_formalClassParamList);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end interfaceDecl */

/** 
 * $ANTLR start classDecl
 * C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:87:1: classDecl : CLASS_KW ID '(' formalClassParamList ')' implementsDecl '{' body '}' EOF -> ^( N_CLASS_NAME ID ) ^( N_FORMAL_CLASS_PARAMS formalClassParamList ) ^( N_IMPLEMENTS_DECL implementsDecl ) ^( N_BODY body ) ;
 */
static ContainedObjectsParser_classDecl_return
classDecl(pContainedObjectsParser ctx)
{   
    ContainedObjectsParser_classDecl_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    CLASS_KW12;
    pANTLR3_COMMON_TOKEN    ID13;
    pANTLR3_COMMON_TOKEN    char_literal14;
    pANTLR3_COMMON_TOKEN    char_literal16;
    pANTLR3_COMMON_TOKEN    char_literal18;
    pANTLR3_COMMON_TOKEN    char_literal20;
    pANTLR3_COMMON_TOKEN    EOF21;
    ContainedObjectsParser_formalClassParamList_return formalClassParamList15;
    #undef	RETURN_TYPE_formalClassParamList15
    #define	RETURN_TYPE_formalClassParamList15 ContainedObjectsParser_formalClassParamList_return

    ContainedObjectsParser_implementsDecl_return implementsDecl17;
    #undef	RETURN_TYPE_implementsDecl17
    #define	RETURN_TYPE_implementsDecl17 ContainedObjectsParser_implementsDecl_return

    ContainedObjectsParser_body_return body19;
    #undef	RETURN_TYPE_body19
    #define	RETURN_TYPE_body19 ContainedObjectsParser_body_return

    pANTLR3_BASE_TREE CLASS_KW12_tree;
    pANTLR3_BASE_TREE ID13_tree;
    pANTLR3_BASE_TREE char_literal14_tree;
    pANTLR3_BASE_TREE char_literal16_tree;
    pANTLR3_BASE_TREE char_literal18_tree;
    pANTLR3_BASE_TREE char_literal20_tree;
    pANTLR3_BASE_TREE EOF21_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_CLASS_KW;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_59;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_58;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_ID;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_EOF;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_60;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_61;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_body;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_formalClassParamList;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_implementsDecl;
    /* Initialize rule variables
     */


    root_0 = NULL;

    CLASS_KW12       = NULL;
    ID13       = NULL;
    char_literal14       = NULL;
    char_literal16       = NULL;
    char_literal18       = NULL;
    char_literal20       = NULL;
    EOF21       = NULL;
    formalClassParamList15.tree = NULL;
    implementsDecl17.tree = NULL;
    body19.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    CLASS_KW12_tree   = NULL;
    ID13_tree   = NULL;
    char_literal14_tree   = NULL;
    char_literal16_tree   = NULL;
    char_literal18_tree   = NULL;
    char_literal20_tree   = NULL;
    EOF21_tree   = NULL;

    stream_CLASS_KW   = NULL;
    #define CREATE_stream_CLASS_KW  if (stream_CLASS_KW == NULL) {stream_CLASS_KW = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token CLASS_KW"); } 
    stream_59   = NULL;
    #define CREATE_stream_59  if (stream_59 == NULL) {stream_59 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 59"); } 
    stream_58   = NULL;
    #define CREATE_stream_58  if (stream_58 == NULL) {stream_58 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 58"); } 
    stream_ID   = NULL;
    #define CREATE_stream_ID  if (stream_ID == NULL) {stream_ID = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token ID"); } 
    stream_EOF   = NULL;
    #define CREATE_stream_EOF  if (stream_EOF == NULL) {stream_EOF = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token EOF"); } 
    stream_60   = NULL;
    #define CREATE_stream_60  if (stream_60 == NULL) {stream_60 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 60"); } 
    stream_61   = NULL;
    #define CREATE_stream_61  if (stream_61 == NULL) {stream_61 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 61"); } 
    stream_body   = NULL;
    #define CREATE_stream_body  if (stream_body == NULL) {stream_body = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule body"); }
    stream_formalClassParamList   = NULL;
    #define CREATE_stream_formalClassParamList  if (stream_formalClassParamList == NULL) {stream_formalClassParamList = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule formalClassParamList"); }
    stream_implementsDecl   = NULL;
    #define CREATE_stream_implementsDecl  if (stream_implementsDecl == NULL) {stream_implementsDecl = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule implementsDecl"); }

    retval.tree  = NULL;
    {
        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:88:2: ( CLASS_KW ID '(' formalClassParamList ')' implementsDecl '{' body '}' EOF -> ^( N_CLASS_NAME ID ) ^( N_FORMAL_CLASS_PARAMS formalClassParamList ) ^( N_IMPLEMENTS_DECL implementsDecl ) ^( N_BODY body ) )
        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:88:4: CLASS_KW ID '(' formalClassParamList ')' implementsDecl '{' body '}' EOF
        {
            CLASS_KW12 = (pANTLR3_COMMON_TOKEN) MATCHT(CLASS_KW, &FOLLOW_CLASS_KW_in_classDecl361); 
            if  (HASEXCEPTION())
            {
                goto ruleclassDeclEx;
            }
             
            CREATE_stream_CLASS_KW; stream_CLASS_KW->add(stream_CLASS_KW, CLASS_KW12, NULL);

            ID13 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_classDecl363); 
            if  (HASEXCEPTION())
            {
                goto ruleclassDeclEx;
            }
             
            CREATE_stream_ID; stream_ID->add(stream_ID, ID13, NULL);

            char_literal14 = (pANTLR3_COMMON_TOKEN) MATCHT(58, &FOLLOW_58_in_classDecl365); 
            if  (HASEXCEPTION())
            {
                goto ruleclassDeclEx;
            }
             
            CREATE_stream_58; stream_58->add(stream_58, char_literal14, NULL);

            FOLLOWPUSH(FOLLOW_formalClassParamList_in_classDecl367);
            formalClassParamList15=formalClassParamList(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleclassDeclEx;
            }

            CREATE_stream_formalClassParamList; stream_formalClassParamList->add(stream_formalClassParamList, formalClassParamList15.tree, NULL);
            char_literal16 = (pANTLR3_COMMON_TOKEN) MATCHT(59, &FOLLOW_59_in_classDecl369); 
            if  (HASEXCEPTION())
            {
                goto ruleclassDeclEx;
            }
             
            CREATE_stream_59; stream_59->add(stream_59, char_literal16, NULL);

            FOLLOWPUSH(FOLLOW_implementsDecl_in_classDecl371);
            implementsDecl17=implementsDecl(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleclassDeclEx;
            }

            CREATE_stream_implementsDecl; stream_implementsDecl->add(stream_implementsDecl, implementsDecl17.tree, NULL);
            char_literal18 = (pANTLR3_COMMON_TOKEN) MATCHT(60, &FOLLOW_60_in_classDecl373); 
            if  (HASEXCEPTION())
            {
                goto ruleclassDeclEx;
            }
             
            CREATE_stream_60; stream_60->add(stream_60, char_literal18, NULL);

            FOLLOWPUSH(FOLLOW_body_in_classDecl375);
            body19=body(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleclassDeclEx;
            }

            CREATE_stream_body; stream_body->add(stream_body, body19.tree, NULL);
            char_literal20 = (pANTLR3_COMMON_TOKEN) MATCHT(61, &FOLLOW_61_in_classDecl377); 
            if  (HASEXCEPTION())
            {
                goto ruleclassDeclEx;
            }
             
            CREATE_stream_61; stream_61->add(stream_61, char_literal20, NULL);

            EOF21 = (pANTLR3_COMMON_TOKEN) MATCHT(EOF, &FOLLOW_EOF_in_classDecl379); 
            if  (HASEXCEPTION())
            {
                goto ruleclassDeclEx;
            }
             
            CREATE_stream_EOF; stream_EOF->add(stream_EOF, EOF21, NULL);


             
            /* AST REWRITE
             * elements          : implementsDecl, formalClassParamList, ID, body
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 89:3: -> ^( N_CLASS_NAME ID ) ^( N_FORMAL_CLASS_PARAMS formalClassParamList ) ^( N_IMPLEMENTS_DECL implementsDecl ) ^( N_BODY body )
            	{
            	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:89:6: ^( N_CLASS_NAME ID )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, N_CLASS_NAME, (pANTLR3_UINT8)"N_CLASS_NAME"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_ID == NULL ? NULL : stream_ID->nextNode(stream_ID));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }
            	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:89:25: ^( N_FORMAL_CLASS_PARAMS formalClassParamList )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, N_FORMAL_CLASS_PARAMS, (pANTLR3_UINT8)"N_FORMAL_CLASS_PARAMS"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_formalClassParamList == NULL ? NULL : stream_formalClassParamList->nextTree(stream_formalClassParamList));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }
            	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:89:71: ^( N_IMPLEMENTS_DECL implementsDecl )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, N_IMPLEMENTS_DECL, (pANTLR3_UINT8)"N_IMPLEMENTS_DECL"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_implementsDecl == NULL ? NULL : stream_implementsDecl->nextTree(stream_implementsDecl));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }
            	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:89:107: ^( N_BODY body )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, N_BODY, (pANTLR3_UINT8)"N_BODY"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_body == NULL ? NULL : stream_body->nextTree(stream_body));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleclassDeclEx; /* Prevent compiler warnings */
    ruleclassDeclEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_CLASS_KW != NULL) stream_CLASS_KW->free(stream_CLASS_KW);
        if (stream_59 != NULL) stream_59->free(stream_59);
        if (stream_58 != NULL) stream_58->free(stream_58);
        if (stream_ID != NULL) stream_ID->free(stream_ID);
        if (stream_EOF != NULL) stream_EOF->free(stream_EOF);
        if (stream_60 != NULL) stream_60->free(stream_60);
        if (stream_61 != NULL) stream_61->free(stream_61);
        if (stream_body != NULL) stream_body->free(stream_body);
        if (stream_formalClassParamList != NULL) stream_formalClassParamList->free(stream_formalClassParamList);
        if (stream_implementsDecl != NULL) stream_implementsDecl->free(stream_implementsDecl);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end classDecl */

/** 
 * $ANTLR start formalClassParamList
 * C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:92:1: formalClassParamList : ( formalClassParam ( ',' formalClassParam )* )? -> ( ^( N_FORMAL_CLASS_PARAM formalClassParam ) )* ;
 */
static ContainedObjectsParser_formalClassParamList_return
formalClassParamList(pContainedObjectsParser ctx)
{   
    ContainedObjectsParser_formalClassParamList_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal23;
    ContainedObjectsParser_formalClassParam_return formalClassParam22;
    #undef	RETURN_TYPE_formalClassParam22
    #define	RETURN_TYPE_formalClassParam22 ContainedObjectsParser_formalClassParam_return

    ContainedObjectsParser_formalClassParam_return formalClassParam24;
    #undef	RETURN_TYPE_formalClassParam24
    #define	RETURN_TYPE_formalClassParam24 ContainedObjectsParser_formalClassParam_return

    pANTLR3_BASE_TREE char_literal23_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_62;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_formalClassParam;
    /* Initialize rule variables
     */


    root_0 = NULL;

    char_literal23       = NULL;
    formalClassParam22.tree = NULL;
    formalClassParam24.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    char_literal23_tree   = NULL;

    stream_62   = NULL;
    #define CREATE_stream_62  if (stream_62 == NULL) {stream_62 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 62"); } 
    stream_formalClassParam   = NULL;
    #define CREATE_stream_formalClassParam  if (stream_formalClassParam == NULL) {stream_formalClassParam = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule formalClassParam"); }

    retval.tree  = NULL;
    {
        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:93:2: ( ( formalClassParam ( ',' formalClassParam )* )? -> ( ^( N_FORMAL_CLASS_PARAM formalClassParam ) )* )
        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:93:4: ( formalClassParam ( ',' formalClassParam )* )?
        {

            // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:93:4: ( formalClassParam ( ',' formalClassParam )* )?
            {
                int alt3=2;
                switch ( LA(1) ) 
                {
                    case CLASS_KW:
                    case INTEGER_KW:
                    case FLOAT_KW:
                    case STRING_KW:
                    case ID:
                    	{
                    		alt3=1;
                    	}
                        break;
                }

                switch (alt3) 
                {
            	case 1:
            	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:93:5: formalClassParam ( ',' formalClassParam )*
            	    {
            	        FOLLOWPUSH(FOLLOW_formalClassParam_in_formalClassParamList420);
            	        formalClassParam22=formalClassParam(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleformalClassParamListEx;
            	        }

            	        CREATE_stream_formalClassParam; stream_formalClassParam->add(stream_formalClassParam, formalClassParam22.tree, NULL);

            	        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:93:22: ( ',' formalClassParam )*

            	        for (;;)
            	        {
            	            int alt2=2;
            	            switch ( LA(1) ) 
            	            {
            	            case 62:
            	            	{
            	            		alt2=1;
            	            	}
            	                break;

            	            }

            	            switch (alt2) 
            	            {
            	        	case 1:
            	        	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:93:23: ',' formalClassParam
            	        	    {
            	        	        char_literal23 = (pANTLR3_COMMON_TOKEN) MATCHT(62, &FOLLOW_62_in_formalClassParamList423); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleformalClassParamListEx;
            	        	        }
            	        	         
            	        	        CREATE_stream_62; stream_62->add(stream_62, char_literal23, NULL);

            	        	        FOLLOWPUSH(FOLLOW_formalClassParam_in_formalClassParamList425);
            	        	        formalClassParam24=formalClassParam(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleformalClassParamListEx;
            	        	        }

            	        	        CREATE_stream_formalClassParam; stream_formalClassParam->add(stream_formalClassParam, formalClassParam24.tree, NULL);

            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop2;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop2: ; /* Jump out to here if this rule does not match */


            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : formalClassParam
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 94:3: -> ( ^( N_FORMAL_CLASS_PARAM formalClassParam ) )*
            	{
            	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:94:6: ( ^( N_FORMAL_CLASS_PARAM formalClassParam ) )*
            	    {
            	    	while ( (stream_formalClassParam != NULL && stream_formalClassParam->hasNext(stream_formalClassParam))  )
            	    	{
            	    		// C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:94:6: ^( N_FORMAL_CLASS_PARAM formalClassParam )
            	    		{
            	    		    pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	    		    root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, N_FORMAL_CLASS_PARAM, (pANTLR3_UINT8)"N_FORMAL_CLASS_PARAM"), root_1));

            	    		    ADAPTOR->addChild(ADAPTOR, root_1, stream_formalClassParam == NULL ? NULL : stream_formalClassParam->nextTree(stream_formalClassParam));

            	    		    ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    		}

            	    	}
            	    	if (stream_formalClassParam != NULL) stream_formalClassParam->reset(stream_formalClassParam);

            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleformalClassParamListEx; /* Prevent compiler warnings */
    ruleformalClassParamListEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_62 != NULL) stream_62->free(stream_62);
        if (stream_formalClassParam != NULL) stream_formalClassParam->free(stream_formalClassParam);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end formalClassParamList */

/** 
 * $ANTLR start formalClassParam
 * C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:97:1: formalClassParam : type ID -> ^( N_TYPE type ) ^( N_VAR_NAME ID ) ;
 */
static ContainedObjectsParser_formalClassParam_return
formalClassParam(pContainedObjectsParser ctx)
{   
    ContainedObjectsParser_formalClassParam_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    ID26;
    ContainedObjectsParser_type_return type25;
    #undef	RETURN_TYPE_type25
    #define	RETURN_TYPE_type25 ContainedObjectsParser_type_return

    pANTLR3_BASE_TREE ID26_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_ID;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_type;
    /* Initialize rule variables
     */


    root_0 = NULL;

    ID26       = NULL;
    type25.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    ID26_tree   = NULL;

    stream_ID   = NULL;
    #define CREATE_stream_ID  if (stream_ID == NULL) {stream_ID = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token ID"); } 
    stream_type   = NULL;
    #define CREATE_stream_type  if (stream_type == NULL) {stream_type = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule type"); }

    retval.tree  = NULL;
    {
        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:97:18: ( type ID -> ^( N_TYPE type ) ^( N_VAR_NAME ID ) )
        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:97:20: type ID
        {
            FOLLOWPUSH(FOLLOW_type_in_formalClassParam450);
            type25=type(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleformalClassParamEx;
            }

            CREATE_stream_type; stream_type->add(stream_type, type25.tree, NULL);
            ID26 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_formalClassParam452); 
            if  (HASEXCEPTION())
            {
                goto ruleformalClassParamEx;
            }
             
            CREATE_stream_ID; stream_ID->add(stream_ID, ID26, NULL);


             
            /* AST REWRITE
             * elements          : ID, type
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 98:3: -> ^( N_TYPE type ) ^( N_VAR_NAME ID )
            	{
            	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:98:6: ^( N_TYPE type )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, N_TYPE, (pANTLR3_UINT8)"N_TYPE"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_type == NULL ? NULL : stream_type->nextTree(stream_type));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }
            	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:98:21: ^( N_VAR_NAME ID )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, N_VAR_NAME, (pANTLR3_UINT8)"N_VAR_NAME"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_ID == NULL ? NULL : stream_ID->nextNode(stream_ID));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleformalClassParamEx; /* Prevent compiler warnings */
    ruleformalClassParamEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_ID != NULL) stream_ID->free(stream_ID);
        if (stream_type != NULL) stream_type->free(stream_type);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end formalClassParam */

/** 
 * $ANTLR start implementsDecl
 * C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:101:1: implementsDecl : ( IMPLEMENTS_KW ID ( ',' ID )* )? -> ( ^( N_IMPLEMENTED_IFACE ID ) )* ;
 */
static ContainedObjectsParser_implementsDecl_return
implementsDecl(pContainedObjectsParser ctx)
{   
    ContainedObjectsParser_implementsDecl_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    IMPLEMENTS_KW27;
    pANTLR3_COMMON_TOKEN    ID28;
    pANTLR3_COMMON_TOKEN    char_literal29;
    pANTLR3_COMMON_TOKEN    ID30;

    pANTLR3_BASE_TREE IMPLEMENTS_KW27_tree;
    pANTLR3_BASE_TREE ID28_tree;
    pANTLR3_BASE_TREE char_literal29_tree;
    pANTLR3_BASE_TREE ID30_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_IMPLEMENTS_KW;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_ID;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_62;

    /* Initialize rule variables
     */


    root_0 = NULL;

    IMPLEMENTS_KW27       = NULL;
    ID28       = NULL;
    char_literal29       = NULL;
    ID30       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    IMPLEMENTS_KW27_tree   = NULL;
    ID28_tree   = NULL;
    char_literal29_tree   = NULL;
    ID30_tree   = NULL;

    stream_IMPLEMENTS_KW   = NULL;
    #define CREATE_stream_IMPLEMENTS_KW  if (stream_IMPLEMENTS_KW == NULL) {stream_IMPLEMENTS_KW = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token IMPLEMENTS_KW"); } 
    stream_ID   = NULL;
    #define CREATE_stream_ID  if (stream_ID == NULL) {stream_ID = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token ID"); } 
    stream_62   = NULL;
    #define CREATE_stream_62  if (stream_62 == NULL) {stream_62 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 62"); } 

    retval.tree  = NULL;
    {
        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:102:2: ( ( IMPLEMENTS_KW ID ( ',' ID )* )? -> ( ^( N_IMPLEMENTED_IFACE ID ) )* )
        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:102:4: ( IMPLEMENTS_KW ID ( ',' ID )* )?
        {

            // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:102:4: ( IMPLEMENTS_KW ID ( ',' ID )* )?
            {
                int alt5=2;
                switch ( LA(1) ) 
                {
                    case IMPLEMENTS_KW:
                    	{
                    		alt5=1;
                    	}
                        break;
                }

                switch (alt5) 
                {
            	case 1:
            	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:102:5: IMPLEMENTS_KW ID ( ',' ID )*
            	    {
            	        IMPLEMENTS_KW27 = (pANTLR3_COMMON_TOKEN) MATCHT(IMPLEMENTS_KW, &FOLLOW_IMPLEMENTS_KW_in_implementsDecl482); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleimplementsDeclEx;
            	        }
            	         
            	        CREATE_stream_IMPLEMENTS_KW; stream_IMPLEMENTS_KW->add(stream_IMPLEMENTS_KW, IMPLEMENTS_KW27, NULL);

            	        ID28 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_implementsDecl484); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleimplementsDeclEx;
            	        }
            	         
            	        CREATE_stream_ID; stream_ID->add(stream_ID, ID28, NULL);


            	        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:102:22: ( ',' ID )*

            	        for (;;)
            	        {
            	            int alt4=2;
            	            switch ( LA(1) ) 
            	            {
            	            case 62:
            	            	{
            	            		alt4=1;
            	            	}
            	                break;

            	            }

            	            switch (alt4) 
            	            {
            	        	case 1:
            	        	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:102:23: ',' ID
            	        	    {
            	        	        char_literal29 = (pANTLR3_COMMON_TOKEN) MATCHT(62, &FOLLOW_62_in_implementsDecl487); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleimplementsDeclEx;
            	        	        }
            	        	         
            	        	        CREATE_stream_62; stream_62->add(stream_62, char_literal29, NULL);

            	        	        ID30 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_implementsDecl489); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleimplementsDeclEx;
            	        	        }
            	        	         
            	        	        CREATE_stream_ID; stream_ID->add(stream_ID, ID30, NULL);


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop4;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop4: ; /* Jump out to here if this rule does not match */


            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : ID
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 103:3: -> ( ^( N_IMPLEMENTED_IFACE ID ) )*
            	{
            	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:103:6: ( ^( N_IMPLEMENTED_IFACE ID ) )*
            	    {
            	    	while ( (stream_ID != NULL && stream_ID->hasNext(stream_ID))  )
            	    	{
            	    		// C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:103:6: ^( N_IMPLEMENTED_IFACE ID )
            	    		{
            	    		    pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	    		    root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, N_IMPLEMENTED_IFACE, (pANTLR3_UINT8)"N_IMPLEMENTED_IFACE"), root_1));

            	    		    ADAPTOR->addChild(ADAPTOR, root_1, stream_ID == NULL ? NULL : stream_ID->nextNode(stream_ID));

            	    		    ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    		}

            	    	}
            	    	if (stream_ID != NULL) stream_ID->reset(stream_ID);

            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleimplementsDeclEx; /* Prevent compiler warnings */
    ruleimplementsDeclEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_IMPLEMENTS_KW != NULL) stream_IMPLEMENTS_KW->free(stream_IMPLEMENTS_KW);
        if (stream_ID != NULL) stream_ID->free(stream_ID);
        if (stream_62 != NULL) stream_62->free(stream_62);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end implementsDecl */

/** 
 * $ANTLR start body
 * C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:106:1: body : ( varDef )* -> ( ^( N_VARDEF varDef ) )* ;
 */
static ContainedObjectsParser_body_return
body(pContainedObjectsParser ctx)
{   
    ContainedObjectsParser_body_return retval;

    pANTLR3_BASE_TREE root_0;

    ContainedObjectsParser_varDef_return varDef31;
    #undef	RETURN_TYPE_varDef31
    #define	RETURN_TYPE_varDef31 ContainedObjectsParser_varDef_return

    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_varDef;
    /* Initialize rule variables
     */


    root_0 = NULL;

    varDef31.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    stream_varDef   = NULL;
    #define CREATE_stream_varDef  if (stream_varDef == NULL) {stream_varDef = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule varDef"); }

    retval.tree  = NULL;
    {
        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:107:2: ( ( varDef )* -> ( ^( N_VARDEF varDef ) )* )
        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:107:4: ( varDef )*
        {

            // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:107:4: ( varDef )*

            for (;;)
            {
                int alt6=2;
                switch ( LA(1) ) 
                {
                case CLASS_KW:
                case STATIC_KW:
                case INTEGER_KW:
                case FLOAT_KW:
                case STRING_KW:
                case ID:
                	{
                		alt6=1;
                	}
                    break;

                }

                switch (alt6) 
                {
            	case 1:
            	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:107:4: varDef
            	    {
            	        FOLLOWPUSH(FOLLOW_varDef_in_body515);
            	        varDef31=varDef(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebodyEx;
            	        }

            	        CREATE_stream_varDef; stream_varDef->add(stream_varDef, varDef31.tree, NULL);

            	    }
            	    break;

            	default:
            	    goto loop6;	/* break out of the loop */
            	    break;
                }
            }
            loop6: ; /* Jump out to here if this rule does not match */


             
            /* AST REWRITE
             * elements          : varDef
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 108:3: -> ( ^( N_VARDEF varDef ) )*
            	{
            	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:108:6: ( ^( N_VARDEF varDef ) )*
            	    {
            	    	while ( (stream_varDef != NULL && stream_varDef->hasNext(stream_varDef))  )
            	    	{
            	    		// C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:108:6: ^( N_VARDEF varDef )
            	    		{
            	    		    pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	    		    root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, N_VARDEF, (pANTLR3_UINT8)"N_VARDEF"), root_1));

            	    		    ADAPTOR->addChild(ADAPTOR, root_1, stream_varDef == NULL ? NULL : stream_varDef->nextTree(stream_varDef));

            	    		    ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    		}

            	    	}
            	    	if (stream_varDef != NULL) stream_varDef->reset(stream_varDef);

            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulebodyEx; /* Prevent compiler warnings */
    rulebodyEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_varDef != NULL) stream_varDef->free(stream_varDef);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end body */

/** 
 * $ANTLR start varDef
 * C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:111:1: varDef : ( STATIC_KW )? type ID ( '=' value )? ';' -> ^( N_SCOPE ( STATIC_KW )? ) ^( N_TYPE type ) ^( N_VAR_NAME ID ) ( ^( N_VALUE value ) )? ;
 */
static ContainedObjectsParser_varDef_return
varDef(pContainedObjectsParser ctx)
{   
    ContainedObjectsParser_varDef_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    STATIC_KW32;
    pANTLR3_COMMON_TOKEN    ID34;
    pANTLR3_COMMON_TOKEN    char_literal35;
    pANTLR3_COMMON_TOKEN    char_literal37;
    ContainedObjectsParser_type_return type33;
    #undef	RETURN_TYPE_type33
    #define	RETURN_TYPE_type33 ContainedObjectsParser_type_return

    ContainedObjectsParser_value_return value36;
    #undef	RETURN_TYPE_value36
    #define	RETURN_TYPE_value36 ContainedObjectsParser_value_return

    pANTLR3_BASE_TREE STATIC_KW32_tree;
    pANTLR3_BASE_TREE ID34_tree;
    pANTLR3_BASE_TREE char_literal35_tree;
    pANTLR3_BASE_TREE char_literal37_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_STATIC_KW;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_ID;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_64;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_63;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_value;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_type;
    /* Initialize rule variables
     */


    root_0 = NULL;

    STATIC_KW32       = NULL;
    ID34       = NULL;
    char_literal35       = NULL;
    char_literal37       = NULL;
    type33.tree = NULL;
    value36.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    STATIC_KW32_tree   = NULL;
    ID34_tree   = NULL;
    char_literal35_tree   = NULL;
    char_literal37_tree   = NULL;

    stream_STATIC_KW   = NULL;
    #define CREATE_stream_STATIC_KW  if (stream_STATIC_KW == NULL) {stream_STATIC_KW = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token STATIC_KW"); } 
    stream_ID   = NULL;
    #define CREATE_stream_ID  if (stream_ID == NULL) {stream_ID = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token ID"); } 
    stream_64   = NULL;
    #define CREATE_stream_64  if (stream_64 == NULL) {stream_64 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 64"); } 
    stream_63   = NULL;
    #define CREATE_stream_63  if (stream_63 == NULL) {stream_63 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 63"); } 
    stream_value   = NULL;
    #define CREATE_stream_value  if (stream_value == NULL) {stream_value = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule value"); }
    stream_type   = NULL;
    #define CREATE_stream_type  if (stream_type == NULL) {stream_type = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule type"); }

    retval.tree  = NULL;
    {
        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:112:2: ( ( STATIC_KW )? type ID ( '=' value )? ';' -> ^( N_SCOPE ( STATIC_KW )? ) ^( N_TYPE type ) ^( N_VAR_NAME ID ) ( ^( N_VALUE value ) )? )
        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:112:4: ( STATIC_KW )? type ID ( '=' value )? ';'
        {

            // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:112:4: ( STATIC_KW )?
            {
                int alt7=2;
                switch ( LA(1) ) 
                {
                    case STATIC_KW:
                    	{
                    		alt7=1;
                    	}
                        break;
                }

                switch (alt7) 
                {
            	case 1:
            	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:112:4: STATIC_KW
            	    {
            	        STATIC_KW32 = (pANTLR3_COMMON_TOKEN) MATCHT(STATIC_KW, &FOLLOW_STATIC_KW_in_varDef538); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevarDefEx;
            	        }
            	         
            	        CREATE_stream_STATIC_KW; stream_STATIC_KW->add(stream_STATIC_KW, STATIC_KW32, NULL);


            	    }
            	    break;

                }
            }
            FOLLOWPUSH(FOLLOW_type_in_varDef541);
            type33=type(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulevarDefEx;
            }

            CREATE_stream_type; stream_type->add(stream_type, type33.tree, NULL);
            ID34 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_varDef543); 
            if  (HASEXCEPTION())
            {
                goto rulevarDefEx;
            }
             
            CREATE_stream_ID; stream_ID->add(stream_ID, ID34, NULL);


            // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:112:23: ( '=' value )?
            {
                int alt8=2;
                switch ( LA(1) ) 
                {
                    case 63:
                    	{
                    		alt8=1;
                    	}
                        break;
                }

                switch (alt8) 
                {
            	case 1:
            	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:112:24: '=' value
            	    {
            	        char_literal35 = (pANTLR3_COMMON_TOKEN) MATCHT(63, &FOLLOW_63_in_varDef546); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevarDefEx;
            	        }
            	         
            	        CREATE_stream_63; stream_63->add(stream_63, char_literal35, NULL);

            	        FOLLOWPUSH(FOLLOW_value_in_varDef548);
            	        value36=value(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevarDefEx;
            	        }

            	        CREATE_stream_value; stream_value->add(stream_value, value36.tree, NULL);

            	    }
            	    break;

                }
            }
            char_literal37 = (pANTLR3_COMMON_TOKEN) MATCHT(64, &FOLLOW_64_in_varDef552); 
            if  (HASEXCEPTION())
            {
                goto rulevarDefEx;
            }
             
            CREATE_stream_64; stream_64->add(stream_64, char_literal37, NULL);


             
            /* AST REWRITE
             * elements          : ID, value, type, STATIC_KW
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 113:3: -> ^( N_SCOPE ( STATIC_KW )? ) ^( N_TYPE type ) ^( N_VAR_NAME ID ) ( ^( N_VALUE value ) )?
            	{
            	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:113:6: ^( N_SCOPE ( STATIC_KW )? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, N_SCOPE, (pANTLR3_UINT8)"N_SCOPE"), root_1));

            	        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:113:16: ( STATIC_KW )?
            	        {
            	        	if ( (stream_STATIC_KW != NULL && stream_STATIC_KW->hasNext(stream_STATIC_KW))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_STATIC_KW == NULL ? NULL : stream_STATIC_KW->nextNode(stream_STATIC_KW));

            	        	}
            	        	if ( stream_STATIC_KW != NULL) stream_STATIC_KW->reset(stream_STATIC_KW);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }
            	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:113:28: ^( N_TYPE type )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, N_TYPE, (pANTLR3_UINT8)"N_TYPE"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_type == NULL ? NULL : stream_type->nextTree(stream_type));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }
            	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:113:43: ^( N_VAR_NAME ID )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, N_VAR_NAME, (pANTLR3_UINT8)"N_VAR_NAME"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_ID == NULL ? NULL : stream_ID->nextNode(stream_ID));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }
            	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:113:60: ( ^( N_VALUE value ) )?
            	    {
            	    	if ( (stream_value != NULL && stream_value->hasNext(stream_value))  )
            	    	{
            	    		// C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:113:60: ^( N_VALUE value )
            	    		{
            	    		    pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	    		    root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, N_VALUE, (pANTLR3_UINT8)"N_VALUE"), root_1));

            	    		    ADAPTOR->addChild(ADAPTOR, root_1, stream_value == NULL ? NULL : stream_value->nextTree(stream_value));

            	    		    ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    		}

            	    	}
            	    	if ( stream_value != NULL) stream_value->reset(stream_value);

            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevarDefEx; /* Prevent compiler warnings */
    rulevarDefEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_STATIC_KW != NULL) stream_STATIC_KW->free(stream_STATIC_KW);
        if (stream_ID != NULL) stream_ID->free(stream_ID);
        if (stream_64 != NULL) stream_64->free(stream_64);
        if (stream_63 != NULL) stream_63->free(stream_63);
        if (stream_value != NULL) stream_value->free(stream_value);
        if (stream_type != NULL) stream_type->free(stream_type);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end varDef */

/** 
 * $ANTLR start actualParamList
 * C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:116:1: actualParamList : ( actualParam ( ',' actualParam )* )? -> ( ^( N_ACTUAL_PARAM actualParam ) )* ;
 */
static ContainedObjectsParser_actualParamList_return
actualParamList(pContainedObjectsParser ctx)
{   
    ContainedObjectsParser_actualParamList_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal39;
    ContainedObjectsParser_actualParam_return actualParam38;
    #undef	RETURN_TYPE_actualParam38
    #define	RETURN_TYPE_actualParam38 ContainedObjectsParser_actualParam_return

    ContainedObjectsParser_actualParam_return actualParam40;
    #undef	RETURN_TYPE_actualParam40
    #define	RETURN_TYPE_actualParam40 ContainedObjectsParser_actualParam_return

    pANTLR3_BASE_TREE char_literal39_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_62;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_actualParam;
    /* Initialize rule variables
     */


    root_0 = NULL;

    char_literal39       = NULL;
    actualParam38.tree = NULL;
    actualParam40.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    char_literal39_tree   = NULL;

    stream_62   = NULL;
    #define CREATE_stream_62  if (stream_62 == NULL) {stream_62 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 62"); } 
    stream_actualParam   = NULL;
    #define CREATE_stream_actualParam  if (stream_actualParam == NULL) {stream_actualParam = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule actualParam"); }

    retval.tree  = NULL;
    {
        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:117:2: ( ( actualParam ( ',' actualParam )* )? -> ( ^( N_ACTUAL_PARAM actualParam ) )* )
        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:117:4: ( actualParam ( ',' actualParam )* )?
        {

            // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:117:4: ( actualParam ( ',' actualParam )* )?
            {
                int alt10=2;
                switch ( LA(1) ) 
                {
                    case ID:
                    	{
                    		alt10=1;
                    	}
                        break;
                }

                switch (alt10) 
                {
            	case 1:
            	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:117:5: actualParam ( ',' actualParam )*
            	    {
            	        FOLLOWPUSH(FOLLOW_actualParam_in_actualParamList594);
            	        actualParam38=actualParam(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleactualParamListEx;
            	        }

            	        CREATE_stream_actualParam; stream_actualParam->add(stream_actualParam, actualParam38.tree, NULL);

            	        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:117:17: ( ',' actualParam )*

            	        for (;;)
            	        {
            	            int alt9=2;
            	            switch ( LA(1) ) 
            	            {
            	            case 62:
            	            	{
            	            		alt9=1;
            	            	}
            	                break;

            	            }

            	            switch (alt9) 
            	            {
            	        	case 1:
            	        	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:117:18: ',' actualParam
            	        	    {
            	        	        char_literal39 = (pANTLR3_COMMON_TOKEN) MATCHT(62, &FOLLOW_62_in_actualParamList597); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleactualParamListEx;
            	        	        }
            	        	         
            	        	        CREATE_stream_62; stream_62->add(stream_62, char_literal39, NULL);

            	        	        FOLLOWPUSH(FOLLOW_actualParam_in_actualParamList599);
            	        	        actualParam40=actualParam(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleactualParamListEx;
            	        	        }

            	        	        CREATE_stream_actualParam; stream_actualParam->add(stream_actualParam, actualParam40.tree, NULL);

            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop9;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop9: ; /* Jump out to here if this rule does not match */


            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : actualParam
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 118:3: -> ( ^( N_ACTUAL_PARAM actualParam ) )*
            	{
            	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:118:6: ( ^( N_ACTUAL_PARAM actualParam ) )*
            	    {
            	    	while ( (stream_actualParam != NULL && stream_actualParam->hasNext(stream_actualParam))  )
            	    	{
            	    		// C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:118:6: ^( N_ACTUAL_PARAM actualParam )
            	    		{
            	    		    pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	    		    root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, N_ACTUAL_PARAM, (pANTLR3_UINT8)"N_ACTUAL_PARAM"), root_1));

            	    		    ADAPTOR->addChild(ADAPTOR, root_1, stream_actualParam == NULL ? NULL : stream_actualParam->nextTree(stream_actualParam));

            	    		    ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    		}

            	    	}
            	    	if (stream_actualParam != NULL) stream_actualParam->reset(stream_actualParam);

            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleactualParamListEx; /* Prevent compiler warnings */
    ruleactualParamListEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_62 != NULL) stream_62->free(stream_62);
        if (stream_actualParam != NULL) stream_actualParam->free(stream_actualParam);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end actualParamList */

/** 
 * $ANTLR start actualParam
 * C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:121:1: actualParam : ID '=' value -> ^( N_PARAM_NAME ID ) ^( N_VALUE value ) ;
 */
static ContainedObjectsParser_actualParam_return
actualParam(pContainedObjectsParser ctx)
{   
    ContainedObjectsParser_actualParam_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    ID41;
    pANTLR3_COMMON_TOKEN    char_literal42;
    ContainedObjectsParser_value_return value43;
    #undef	RETURN_TYPE_value43
    #define	RETURN_TYPE_value43 ContainedObjectsParser_value_return

    pANTLR3_BASE_TREE ID41_tree;
    pANTLR3_BASE_TREE char_literal42_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_ID;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_63;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_value;
    /* Initialize rule variables
     */


    root_0 = NULL;

    ID41       = NULL;
    char_literal42       = NULL;
    value43.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    ID41_tree   = NULL;
    char_literal42_tree   = NULL;

    stream_ID   = NULL;
    #define CREATE_stream_ID  if (stream_ID == NULL) {stream_ID = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token ID"); } 
    stream_63   = NULL;
    #define CREATE_stream_63  if (stream_63 == NULL) {stream_63 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 63"); } 
    stream_value   = NULL;
    #define CREATE_stream_value  if (stream_value == NULL) {stream_value = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule value"); }

    retval.tree  = NULL;
    {
        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:122:2: ( ID '=' value -> ^( N_PARAM_NAME ID ) ^( N_VALUE value ) )
        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:122:4: ID '=' value
        {
            ID41 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_actualParam625); 
            if  (HASEXCEPTION())
            {
                goto ruleactualParamEx;
            }
             
            CREATE_stream_ID; stream_ID->add(stream_ID, ID41, NULL);

            char_literal42 = (pANTLR3_COMMON_TOKEN) MATCHT(63, &FOLLOW_63_in_actualParam627); 
            if  (HASEXCEPTION())
            {
                goto ruleactualParamEx;
            }
             
            CREATE_stream_63; stream_63->add(stream_63, char_literal42, NULL);

            FOLLOWPUSH(FOLLOW_value_in_actualParam629);
            value43=value(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleactualParamEx;
            }

            CREATE_stream_value; stream_value->add(stream_value, value43.tree, NULL);

             
            /* AST REWRITE
             * elements          : value, ID
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 123:3: -> ^( N_PARAM_NAME ID ) ^( N_VALUE value )
            	{
            	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:123:6: ^( N_PARAM_NAME ID )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, N_PARAM_NAME, (pANTLR3_UINT8)"N_PARAM_NAME"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_ID == NULL ? NULL : stream_ID->nextNode(stream_ID));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }
            	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:123:25: ^( N_VALUE value )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, N_VALUE, (pANTLR3_UINT8)"N_VALUE"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_value == NULL ? NULL : stream_value->nextTree(stream_value));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleactualParamEx; /* Prevent compiler warnings */
    ruleactualParamEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_ID != NULL) stream_ID->free(stream_ID);
        if (stream_63 != NULL) stream_63->free(stream_63);
        if (stream_value != NULL) stream_value->free(stream_value);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end actualParam */

/** 
 * $ANTLR start value
 * C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:126:1: value : ( objectInit -> ^( N_OBJECT_INIT_VAL objectInit ) | arrayInit -> ^( N_ARRAY_INIT_VAL arrayInit ) | literal -> ^( N_LITERAL_VAL literal ) | reference -> ^( N_REFERENCE_VAL reference ) );
 */
static ContainedObjectsParser_value_return
value(pContainedObjectsParser ctx)
{   
    ContainedObjectsParser_value_return retval;

    pANTLR3_BASE_TREE root_0;

    ContainedObjectsParser_objectInit_return objectInit44;
    #undef	RETURN_TYPE_objectInit44
    #define	RETURN_TYPE_objectInit44 ContainedObjectsParser_objectInit_return

    ContainedObjectsParser_arrayInit_return arrayInit45;
    #undef	RETURN_TYPE_arrayInit45
    #define	RETURN_TYPE_arrayInit45 ContainedObjectsParser_arrayInit_return

    ContainedObjectsParser_literal_return literal46;
    #undef	RETURN_TYPE_literal46
    #define	RETURN_TYPE_literal46 ContainedObjectsParser_literal_return

    ContainedObjectsParser_reference_return reference47;
    #undef	RETURN_TYPE_reference47
    #define	RETURN_TYPE_reference47 ContainedObjectsParser_reference_return

    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_arrayInit;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_objectInit;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_reference;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_literal;
    /* Initialize rule variables
     */


    root_0 = NULL;

    objectInit44.tree = NULL;
    arrayInit45.tree = NULL;
    literal46.tree = NULL;
    reference47.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    stream_arrayInit   = NULL;
    #define CREATE_stream_arrayInit  if (stream_arrayInit == NULL) {stream_arrayInit = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule arrayInit"); }
    stream_objectInit   = NULL;
    #define CREATE_stream_objectInit  if (stream_objectInit == NULL) {stream_objectInit = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule objectInit"); }
    stream_reference   = NULL;
    #define CREATE_stream_reference  if (stream_reference == NULL) {stream_reference = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule reference"); }
    stream_literal   = NULL;
    #define CREATE_stream_literal  if (stream_literal == NULL) {stream_literal = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule literal"); }

    retval.tree  = NULL;
    {
        {
            //  C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:126:7: ( objectInit -> ^( N_OBJECT_INIT_VAL objectInit ) | arrayInit -> ^( N_ARRAY_INIT_VAL arrayInit ) | literal -> ^( N_LITERAL_VAL literal ) | reference -> ^( N_REFERENCE_VAL reference ) )
            
            ANTLR3_UINT32 alt11;

            alt11=4;

            switch ( LA(1) ) 
            {
            case ID:
            	{
            		switch ( LA(2) ) 
            		{
            		case 58:
            			{
            				alt11=1;
            			}
            		    break;
            		case 66:
            			{
            				alt11=2;
            			}
            		    break;
            		case 59:
            		case 61:
            		case 62:
            		case 64:
            		case 65:
            			{
            				alt11=4;
            			}
            		    break;

            		default:
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 11;
            		    EXCEPTION->state        = 1;


            		    goto rulevalueEx;
            		}

            	}
                break;
            case CLASS_KW:
            case INTEGER_KW:
            case FLOAT_KW:
            case STRING_KW:
            	{
            		alt11=2;
            	}
                break;
            case INTL:
            case FLOATL:
            case STRINGL:
            	{
            		alt11=3;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 11;
                EXCEPTION->state        = 0;


                goto rulevalueEx;
            }

            switch (alt11) 
            {
        	case 1:
        	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:126:9: objectInit
        	    {
        	        FOLLOWPUSH(FOLLOW_objectInit_in_value655);
        	        objectInit44=objectInit(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulevalueEx;
        	        }

        	        CREATE_stream_objectInit; stream_objectInit->add(stream_objectInit, objectInit44.tree, NULL);

        	         
        	        /* AST REWRITE
        	         * elements          : objectInit
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 126:20: -> ^( N_OBJECT_INIT_VAL objectInit )
        	        	{
        	        	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:126:23: ^( N_OBJECT_INIT_VAL objectInit )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, N_OBJECT_INIT_VAL, (pANTLR3_UINT8)"N_OBJECT_INIT_VAL"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_objectInit == NULL ? NULL : stream_objectInit->nextTree(stream_objectInit));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:127:4: arrayInit
        	    {
        	        FOLLOWPUSH(FOLLOW_arrayInit_in_value668);
        	        arrayInit45=arrayInit(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulevalueEx;
        	        }

        	        CREATE_stream_arrayInit; stream_arrayInit->add(stream_arrayInit, arrayInit45.tree, NULL);

        	         
        	        /* AST REWRITE
        	         * elements          : arrayInit
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 127:14: -> ^( N_ARRAY_INIT_VAL arrayInit )
        	        	{
        	        	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:127:17: ^( N_ARRAY_INIT_VAL arrayInit )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, N_ARRAY_INIT_VAL, (pANTLR3_UINT8)"N_ARRAY_INIT_VAL"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_arrayInit == NULL ? NULL : stream_arrayInit->nextTree(stream_arrayInit));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:128:4: literal
        	    {
        	        FOLLOWPUSH(FOLLOW_literal_in_value681);
        	        literal46=literal(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulevalueEx;
        	        }

        	        CREATE_stream_literal; stream_literal->add(stream_literal, literal46.tree, NULL);

        	         
        	        /* AST REWRITE
        	         * elements          : literal
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 128:13: -> ^( N_LITERAL_VAL literal )
        	        	{
        	        	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:128:16: ^( N_LITERAL_VAL literal )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, N_LITERAL_VAL, (pANTLR3_UINT8)"N_LITERAL_VAL"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_literal == NULL ? NULL : stream_literal->nextTree(stream_literal));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 4:
        	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:129:5: reference
        	    {
        	        FOLLOWPUSH(FOLLOW_reference_in_value696);
        	        reference47=reference(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulevalueEx;
        	        }

        	        CREATE_stream_reference; stream_reference->add(stream_reference, reference47.tree, NULL);

        	         
        	        /* AST REWRITE
        	         * elements          : reference
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 129:15: -> ^( N_REFERENCE_VAL reference )
        	        	{
        	        	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:129:18: ^( N_REFERENCE_VAL reference )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, N_REFERENCE_VAL, (pANTLR3_UINT8)"N_REFERENCE_VAL"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_reference == NULL ? NULL : stream_reference->nextTree(stream_reference));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulevalueEx; /* Prevent compiler warnings */
    rulevalueEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_arrayInit != NULL) stream_arrayInit->free(stream_arrayInit);
        if (stream_objectInit != NULL) stream_objectInit->free(stream_objectInit);
        if (stream_reference != NULL) stream_reference->free(stream_reference);
        if (stream_literal != NULL) stream_literal->free(stream_literal);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end value */

/** 
 * $ANTLR start reference
 * C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:132:1: reference : ID ( '.' ID )* -> ( ID )+ ;
 */
static ContainedObjectsParser_reference_return
reference(pContainedObjectsParser ctx)
{   
    ContainedObjectsParser_reference_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    ID48;
    pANTLR3_COMMON_TOKEN    char_literal49;
    pANTLR3_COMMON_TOKEN    ID50;

    pANTLR3_BASE_TREE ID48_tree;
    pANTLR3_BASE_TREE char_literal49_tree;
    pANTLR3_BASE_TREE ID50_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_ID;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_65;

    /* Initialize rule variables
     */


    root_0 = NULL;

    ID48       = NULL;
    char_literal49       = NULL;
    ID50       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    ID48_tree   = NULL;
    char_literal49_tree   = NULL;
    ID50_tree   = NULL;

    stream_ID   = NULL;
    #define CREATE_stream_ID  if (stream_ID == NULL) {stream_ID = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token ID"); } 
    stream_65   = NULL;
    #define CREATE_stream_65  if (stream_65 == NULL) {stream_65 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 65"); } 

    retval.tree  = NULL;
    {
        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:133:2: ( ID ( '.' ID )* -> ( ID )+ )
        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:133:4: ID ( '.' ID )*
        {
            ID48 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_reference715); 
            if  (HASEXCEPTION())
            {
                goto rulereferenceEx;
            }
             
            CREATE_stream_ID; stream_ID->add(stream_ID, ID48, NULL);


            // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:133:7: ( '.' ID )*

            for (;;)
            {
                int alt12=2;
                switch ( LA(1) ) 
                {
                case 65:
                	{
                		alt12=1;
                	}
                    break;

                }

                switch (alt12) 
                {
            	case 1:
            	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:133:8: '.' ID
            	    {
            	        char_literal49 = (pANTLR3_COMMON_TOKEN) MATCHT(65, &FOLLOW_65_in_reference718); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulereferenceEx;
            	        }
            	         
            	        CREATE_stream_65; stream_65->add(stream_65, char_literal49, NULL);

            	        ID50 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_reference720); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulereferenceEx;
            	        }
            	         
            	        CREATE_stream_ID; stream_ID->add(stream_ID, ID50, NULL);


            	    }
            	    break;

            	default:
            	    goto loop12;	/* break out of the loop */
            	    break;
                }
            }
            loop12: ; /* Jump out to here if this rule does not match */


             
            /* AST REWRITE
             * elements          : ID
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 134:3: -> ( ID )+
            	{
            	    if ((stream_ID == NULL || !stream_ID->hasNext(stream_ID))  )
            	    {
            	        CONSTRUCTEX();
            	        EXCEPTION->type         = ANTLR3_REWRITE_EARLY_EXCEPTION;
            	        EXCEPTION->name         = (void *)ANTLR3_REWRITE_EARLY_EXCEPTION_NAME;
            	    }
            	    else
            	    {
            	    	while ( (stream_ID->hasNext(stream_ID))  ) {
            	    		ADAPTOR->addChild(ADAPTOR, root_0, stream_ID == NULL ? NULL : stream_ID->nextNode(stream_ID));

            	    	}
            	    	stream_ID->reset(stream_ID);

            	    }
            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulereferenceEx; /* Prevent compiler warnings */
    rulereferenceEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_ID != NULL) stream_ID->free(stream_ID);
        if (stream_65 != NULL) stream_65->free(stream_65);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end reference */

/** 
 * $ANTLR start literal
 * C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:137:1: literal : ( INTL -> ^( N_INT_LITERAL INTL ) | FLOATL -> ^( N_FLOAT_LITERAL FLOATL ) | STRINGL -> ^( N_STRING_LITERAL STRINGL ) );
 */
static ContainedObjectsParser_literal_return
literal(pContainedObjectsParser ctx)
{   
    ContainedObjectsParser_literal_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    INTL51;
    pANTLR3_COMMON_TOKEN    FLOATL52;
    pANTLR3_COMMON_TOKEN    STRINGL53;

    pANTLR3_BASE_TREE INTL51_tree;
    pANTLR3_BASE_TREE FLOATL52_tree;
    pANTLR3_BASE_TREE STRINGL53_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_STRINGL;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_FLOATL;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_INTL;

    /* Initialize rule variables
     */


    root_0 = NULL;

    INTL51       = NULL;
    FLOATL52       = NULL;
    STRINGL53       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    INTL51_tree   = NULL;
    FLOATL52_tree   = NULL;
    STRINGL53_tree   = NULL;

    stream_STRINGL   = NULL;
    #define CREATE_stream_STRINGL  if (stream_STRINGL == NULL) {stream_STRINGL = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token STRINGL"); } 
    stream_FLOATL   = NULL;
    #define CREATE_stream_FLOATL  if (stream_FLOATL == NULL) {stream_FLOATL = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token FLOATL"); } 
    stream_INTL   = NULL;
    #define CREATE_stream_INTL  if (stream_INTL == NULL) {stream_INTL = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token INTL"); } 

    retval.tree  = NULL;
    {
        {
            //  C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:137:9: ( INTL -> ^( N_INT_LITERAL INTL ) | FLOATL -> ^( N_FLOAT_LITERAL FLOATL ) | STRINGL -> ^( N_STRING_LITERAL STRINGL ) )
            
            ANTLR3_UINT32 alt13;

            alt13=3;

            switch ( LA(1) ) 
            {
            case INTL:
            	{
            		alt13=1;
            	}
                break;
            case FLOATL:
            	{
            		alt13=2;
            	}
                break;
            case STRINGL:
            	{
            		alt13=3;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 13;
                EXCEPTION->state        = 0;


                goto ruleliteralEx;
            }

            switch (alt13) 
            {
        	case 1:
        	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:137:11: INTL
        	    {
        	        INTL51 = (pANTLR3_COMMON_TOKEN) MATCHT(INTL, &FOLLOW_INTL_in_literal739); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleliteralEx;
        	        }
        	         
        	        CREATE_stream_INTL; stream_INTL->add(stream_INTL, INTL51, NULL);


        	         
        	        /* AST REWRITE
        	         * elements          : INTL
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 137:16: -> ^( N_INT_LITERAL INTL )
        	        	{
        	        	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:137:19: ^( N_INT_LITERAL INTL )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, N_INT_LITERAL, (pANTLR3_UINT8)"N_INT_LITERAL"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_INTL == NULL ? NULL : stream_INTL->nextNode(stream_INTL));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:138:4: FLOATL
        	    {
        	        FLOATL52 = (pANTLR3_COMMON_TOKEN) MATCHT(FLOATL, &FOLLOW_FLOATL_in_literal752); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleliteralEx;
        	        }
        	         
        	        CREATE_stream_FLOATL; stream_FLOATL->add(stream_FLOATL, FLOATL52, NULL);


        	         
        	        /* AST REWRITE
        	         * elements          : FLOATL
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 138:12: -> ^( N_FLOAT_LITERAL FLOATL )
        	        	{
        	        	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:138:15: ^( N_FLOAT_LITERAL FLOATL )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, N_FLOAT_LITERAL, (pANTLR3_UINT8)"N_FLOAT_LITERAL"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_FLOATL == NULL ? NULL : stream_FLOATL->nextNode(stream_FLOATL));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:139:5: STRINGL
        	    {
        	        STRINGL53 = (pANTLR3_COMMON_TOKEN) MATCHT(STRINGL, &FOLLOW_STRINGL_in_literal767); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleliteralEx;
        	        }
        	         
        	        CREATE_stream_STRINGL; stream_STRINGL->add(stream_STRINGL, STRINGL53, NULL);


        	         
        	        /* AST REWRITE
        	         * elements          : STRINGL
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 139:13: -> ^( N_STRING_LITERAL STRINGL )
        	        	{
        	        	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:139:16: ^( N_STRING_LITERAL STRINGL )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, N_STRING_LITERAL, (pANTLR3_UINT8)"N_STRING_LITERAL"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_STRINGL == NULL ? NULL : stream_STRINGL->nextNode(stream_STRINGL));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleliteralEx; /* Prevent compiler warnings */
    ruleliteralEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_STRINGL != NULL) stream_STRINGL->free(stream_STRINGL);
        if (stream_FLOATL != NULL) stream_FLOATL->free(stream_FLOATL);
        if (stream_INTL != NULL) stream_INTL->free(stream_INTL);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end literal */

/** 
 * $ANTLR start arrayInit
 * C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:142:1: arrayInit : simpleType '[' ']' '{' ( value ( ',' value )* )? '}' -> ^( N_ARRAY_TYPE ^( N_SIMPLE_TYPE simpleType ) ) ^( N_ARRAY_VALUES ( ^( N_VALUE value ) )* ) ;
 */
static ContainedObjectsParser_arrayInit_return
arrayInit(pContainedObjectsParser ctx)
{   
    ContainedObjectsParser_arrayInit_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal55;
    pANTLR3_COMMON_TOKEN    char_literal56;
    pANTLR3_COMMON_TOKEN    char_literal57;
    pANTLR3_COMMON_TOKEN    char_literal59;
    pANTLR3_COMMON_TOKEN    char_literal61;
    ContainedObjectsParser_simpleType_return simpleType54;
    #undef	RETURN_TYPE_simpleType54
    #define	RETURN_TYPE_simpleType54 ContainedObjectsParser_simpleType_return

    ContainedObjectsParser_value_return value58;
    #undef	RETURN_TYPE_value58
    #define	RETURN_TYPE_value58 ContainedObjectsParser_value_return

    ContainedObjectsParser_value_return value60;
    #undef	RETURN_TYPE_value60
    #define	RETURN_TYPE_value60 ContainedObjectsParser_value_return

    pANTLR3_BASE_TREE char_literal55_tree;
    pANTLR3_BASE_TREE char_literal56_tree;
    pANTLR3_BASE_TREE char_literal57_tree;
    pANTLR3_BASE_TREE char_literal59_tree;
    pANTLR3_BASE_TREE char_literal61_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_67;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_66;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_62;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_60;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_61;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_simpleType;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_value;
    /* Initialize rule variables
     */


    root_0 = NULL;

    char_literal55       = NULL;
    char_literal56       = NULL;
    char_literal57       = NULL;
    char_literal59       = NULL;
    char_literal61       = NULL;
    simpleType54.tree = NULL;
    value58.tree = NULL;
    value60.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    char_literal55_tree   = NULL;
    char_literal56_tree   = NULL;
    char_literal57_tree   = NULL;
    char_literal59_tree   = NULL;
    char_literal61_tree   = NULL;

    stream_67   = NULL;
    #define CREATE_stream_67  if (stream_67 == NULL) {stream_67 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 67"); } 
    stream_66   = NULL;
    #define CREATE_stream_66  if (stream_66 == NULL) {stream_66 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 66"); } 
    stream_62   = NULL;
    #define CREATE_stream_62  if (stream_62 == NULL) {stream_62 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 62"); } 
    stream_60   = NULL;
    #define CREATE_stream_60  if (stream_60 == NULL) {stream_60 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 60"); } 
    stream_61   = NULL;
    #define CREATE_stream_61  if (stream_61 == NULL) {stream_61 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 61"); } 
    stream_simpleType   = NULL;
    #define CREATE_stream_simpleType  if (stream_simpleType == NULL) {stream_simpleType = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule simpleType"); }
    stream_value   = NULL;
    #define CREATE_stream_value  if (stream_value == NULL) {stream_value = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule value"); }

    retval.tree  = NULL;
    {
        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:143:2: ( simpleType '[' ']' '{' ( value ( ',' value )* )? '}' -> ^( N_ARRAY_TYPE ^( N_SIMPLE_TYPE simpleType ) ) ^( N_ARRAY_VALUES ( ^( N_VALUE value ) )* ) )
        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:143:4: simpleType '[' ']' '{' ( value ( ',' value )* )? '}'
        {
            FOLLOWPUSH(FOLLOW_simpleType_in_arrayInit786);
            simpleType54=simpleType(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulearrayInitEx;
            }

            CREATE_stream_simpleType; stream_simpleType->add(stream_simpleType, simpleType54.tree, NULL);
            char_literal55 = (pANTLR3_COMMON_TOKEN) MATCHT(66, &FOLLOW_66_in_arrayInit788); 
            if  (HASEXCEPTION())
            {
                goto rulearrayInitEx;
            }
             
            CREATE_stream_66; stream_66->add(stream_66, char_literal55, NULL);

            char_literal56 = (pANTLR3_COMMON_TOKEN) MATCHT(67, &FOLLOW_67_in_arrayInit790); 
            if  (HASEXCEPTION())
            {
                goto rulearrayInitEx;
            }
             
            CREATE_stream_67; stream_67->add(stream_67, char_literal56, NULL);

            char_literal57 = (pANTLR3_COMMON_TOKEN) MATCHT(60, &FOLLOW_60_in_arrayInit792); 
            if  (HASEXCEPTION())
            {
                goto rulearrayInitEx;
            }
             
            CREATE_stream_60; stream_60->add(stream_60, char_literal57, NULL);


            // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:143:27: ( value ( ',' value )* )?
            {
                int alt15=2;
                switch ( LA(1) ) 
                {
                    case CLASS_KW:
                    case INTEGER_KW:
                    case FLOAT_KW:
                    case STRING_KW:
                    case ID:
                    case INTL:
                    case FLOATL:
                    case STRINGL:
                    	{
                    		alt15=1;
                    	}
                        break;
                }

                switch (alt15) 
                {
            	case 1:
            	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:143:28: value ( ',' value )*
            	    {
            	        FOLLOWPUSH(FOLLOW_value_in_arrayInit795);
            	        value58=value(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulearrayInitEx;
            	        }

            	        CREATE_stream_value; stream_value->add(stream_value, value58.tree, NULL);

            	        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:143:34: ( ',' value )*

            	        for (;;)
            	        {
            	            int alt14=2;
            	            switch ( LA(1) ) 
            	            {
            	            case 62:
            	            	{
            	            		alt14=1;
            	            	}
            	                break;

            	            }

            	            switch (alt14) 
            	            {
            	        	case 1:
            	        	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:143:35: ',' value
            	        	    {
            	        	        char_literal59 = (pANTLR3_COMMON_TOKEN) MATCHT(62, &FOLLOW_62_in_arrayInit798); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulearrayInitEx;
            	        	        }
            	        	         
            	        	        CREATE_stream_62; stream_62->add(stream_62, char_literal59, NULL);

            	        	        FOLLOWPUSH(FOLLOW_value_in_arrayInit800);
            	        	        value60=value(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulearrayInitEx;
            	        	        }

            	        	        CREATE_stream_value; stream_value->add(stream_value, value60.tree, NULL);

            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop14;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop14: ; /* Jump out to here if this rule does not match */


            	    }
            	    break;

                }
            }
            char_literal61 = (pANTLR3_COMMON_TOKEN) MATCHT(61, &FOLLOW_61_in_arrayInit806); 
            if  (HASEXCEPTION())
            {
                goto rulearrayInitEx;
            }
             
            CREATE_stream_61; stream_61->add(stream_61, char_literal61, NULL);


             
            /* AST REWRITE
             * elements          : value, simpleType
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 144:3: -> ^( N_ARRAY_TYPE ^( N_SIMPLE_TYPE simpleType ) ) ^( N_ARRAY_VALUES ( ^( N_VALUE value ) )* )
            	{
            	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:144:6: ^( N_ARRAY_TYPE ^( N_SIMPLE_TYPE simpleType ) )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, N_ARRAY_TYPE, (pANTLR3_UINT8)"N_ARRAY_TYPE"), root_1));

            	        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:144:21: ^( N_SIMPLE_TYPE simpleType )
            	        {
            	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, N_SIMPLE_TYPE, (pANTLR3_UINT8)"N_SIMPLE_TYPE"), root_2));

            	            ADAPTOR->addChild(ADAPTOR, root_2, stream_simpleType == NULL ? NULL : stream_simpleType->nextTree(stream_simpleType));

            	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }
            	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:144:50: ^( N_ARRAY_VALUES ( ^( N_VALUE value ) )* )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, N_ARRAY_VALUES, (pANTLR3_UINT8)"N_ARRAY_VALUES"), root_1));

            	        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:144:67: ( ^( N_VALUE value ) )*
            	        {
            	        	while ( (stream_value != NULL && stream_value->hasNext(stream_value))  )
            	        	{
            	        		// C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:144:67: ^( N_VALUE value )
            	        		{
            	        		    pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        		    root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, N_VALUE, (pANTLR3_UINT8)"N_VALUE"), root_2));

            	        		    ADAPTOR->addChild(ADAPTOR, root_2, stream_value == NULL ? NULL : stream_value->nextTree(stream_value));

            	        		    ADAPTOR->addChild(ADAPTOR, root_1, root_2);
            	        		}

            	        	}
            	        	if (stream_value != NULL) stream_value->reset(stream_value);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulearrayInitEx; /* Prevent compiler warnings */
    rulearrayInitEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_67 != NULL) stream_67->free(stream_67);
        if (stream_66 != NULL) stream_66->free(stream_66);
        if (stream_62 != NULL) stream_62->free(stream_62);
        if (stream_60 != NULL) stream_60->free(stream_60);
        if (stream_61 != NULL) stream_61->free(stream_61);
        if (stream_simpleType != NULL) stream_simpleType->free(stream_simpleType);
        if (stream_value != NULL) stream_value->free(stream_value);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end arrayInit */

/** 
 * $ANTLR start objectInit
 * C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:147:1: objectInit : ID '(' actualParamList ')' -> ^( N_CLASS_NAME ID ) ^( N_ACTUAL_PARAMS actualParamList ) ;
 */
static ContainedObjectsParser_objectInit_return
objectInit(pContainedObjectsParser ctx)
{   
    ContainedObjectsParser_objectInit_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    ID62;
    pANTLR3_COMMON_TOKEN    char_literal63;
    pANTLR3_COMMON_TOKEN    char_literal65;
    ContainedObjectsParser_actualParamList_return actualParamList64;
    #undef	RETURN_TYPE_actualParamList64
    #define	RETURN_TYPE_actualParamList64 ContainedObjectsParser_actualParamList_return

    pANTLR3_BASE_TREE ID62_tree;
    pANTLR3_BASE_TREE char_literal63_tree;
    pANTLR3_BASE_TREE char_literal65_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_59;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_58;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_ID;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_actualParamList;
    /* Initialize rule variables
     */


    root_0 = NULL;

    ID62       = NULL;
    char_literal63       = NULL;
    char_literal65       = NULL;
    actualParamList64.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    ID62_tree   = NULL;
    char_literal63_tree   = NULL;
    char_literal65_tree   = NULL;

    stream_59   = NULL;
    #define CREATE_stream_59  if (stream_59 == NULL) {stream_59 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 59"); } 
    stream_58   = NULL;
    #define CREATE_stream_58  if (stream_58 == NULL) {stream_58 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 58"); } 
    stream_ID   = NULL;
    #define CREATE_stream_ID  if (stream_ID == NULL) {stream_ID = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token ID"); } 
    stream_actualParamList   = NULL;
    #define CREATE_stream_actualParamList  if (stream_actualParamList == NULL) {stream_actualParamList = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule actualParamList"); }

    retval.tree  = NULL;
    {
        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:148:2: ( ID '(' actualParamList ')' -> ^( N_CLASS_NAME ID ) ^( N_ACTUAL_PARAMS actualParamList ) )
        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:148:4: ID '(' actualParamList ')'
        {
            ID62 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_objectInit842); 
            if  (HASEXCEPTION())
            {
                goto ruleobjectInitEx;
            }
             
            CREATE_stream_ID; stream_ID->add(stream_ID, ID62, NULL);

            char_literal63 = (pANTLR3_COMMON_TOKEN) MATCHT(58, &FOLLOW_58_in_objectInit844); 
            if  (HASEXCEPTION())
            {
                goto ruleobjectInitEx;
            }
             
            CREATE_stream_58; stream_58->add(stream_58, char_literal63, NULL);

            FOLLOWPUSH(FOLLOW_actualParamList_in_objectInit846);
            actualParamList64=actualParamList(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleobjectInitEx;
            }

            CREATE_stream_actualParamList; stream_actualParamList->add(stream_actualParamList, actualParamList64.tree, NULL);
            char_literal65 = (pANTLR3_COMMON_TOKEN) MATCHT(59, &FOLLOW_59_in_objectInit848); 
            if  (HASEXCEPTION())
            {
                goto ruleobjectInitEx;
            }
             
            CREATE_stream_59; stream_59->add(stream_59, char_literal65, NULL);


             
            /* AST REWRITE
             * elements          : ID, actualParamList
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 149:3: -> ^( N_CLASS_NAME ID ) ^( N_ACTUAL_PARAMS actualParamList )
            	{
            	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:149:6: ^( N_CLASS_NAME ID )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, N_CLASS_NAME, (pANTLR3_UINT8)"N_CLASS_NAME"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_ID == NULL ? NULL : stream_ID->nextNode(stream_ID));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }
            	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:149:25: ^( N_ACTUAL_PARAMS actualParamList )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, N_ACTUAL_PARAMS, (pANTLR3_UINT8)"N_ACTUAL_PARAMS"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_actualParamList == NULL ? NULL : stream_actualParamList->nextTree(stream_actualParamList));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleobjectInitEx; /* Prevent compiler warnings */
    ruleobjectInitEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_59 != NULL) stream_59->free(stream_59);
        if (stream_58 != NULL) stream_58->free(stream_58);
        if (stream_ID != NULL) stream_ID->free(stream_ID);
        if (stream_actualParamList != NULL) stream_actualParamList->free(stream_actualParamList);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end objectInit */

/** 
 * $ANTLR start type
 * C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:152:1: type : ( arrayType -> ^( N_ARRAY_TYPE arrayType ) | simpleType -> ^( N_SIMPLE_TYPE simpleType ) );
 */
static ContainedObjectsParser_type_return
type(pContainedObjectsParser ctx)
{   
    ContainedObjectsParser_type_return retval;

    pANTLR3_BASE_TREE root_0;

    ContainedObjectsParser_arrayType_return arrayType66;
    #undef	RETURN_TYPE_arrayType66
    #define	RETURN_TYPE_arrayType66 ContainedObjectsParser_arrayType_return

    ContainedObjectsParser_simpleType_return simpleType67;
    #undef	RETURN_TYPE_simpleType67
    #define	RETURN_TYPE_simpleType67 ContainedObjectsParser_simpleType_return

    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_arrayType;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_simpleType;
    /* Initialize rule variables
     */


    root_0 = NULL;

    arrayType66.tree = NULL;
    simpleType67.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    stream_arrayType   = NULL;
    #define CREATE_stream_arrayType  if (stream_arrayType == NULL) {stream_arrayType = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule arrayType"); }
    stream_simpleType   = NULL;
    #define CREATE_stream_simpleType  if (stream_simpleType == NULL) {stream_simpleType = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule simpleType"); }

    retval.tree  = NULL;
    {
        {
            //  C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:152:6: ( arrayType -> ^( N_ARRAY_TYPE arrayType ) | simpleType -> ^( N_SIMPLE_TYPE simpleType ) )
            
            ANTLR3_UINT32 alt16;

            alt16=2;

            switch ( LA(1) ) 
            {
            case INTEGER_KW:
            	{
            		switch ( LA(2) ) 
            		{
            		case 66:
            			{
            				alt16=1;
            			}
            		    break;
            		case ID:
            			{
            				alt16=2;
            			}
            		    break;

            		default:
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 16;
            		    EXCEPTION->state        = 1;


            		    goto ruletypeEx;
            		}

            	}
                break;
            case FLOAT_KW:
            	{
            		switch ( LA(2) ) 
            		{
            		case 66:
            			{
            				alt16=1;
            			}
            		    break;
            		case ID:
            			{
            				alt16=2;
            			}
            		    break;

            		default:
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 16;
            		    EXCEPTION->state        = 2;


            		    goto ruletypeEx;
            		}

            	}
                break;
            case STRING_KW:
            	{
            		switch ( LA(2) ) 
            		{
            		case 66:
            			{
            				alt16=1;
            			}
            		    break;
            		case ID:
            			{
            				alt16=2;
            			}
            		    break;

            		default:
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 16;
            		    EXCEPTION->state        = 3;


            		    goto ruletypeEx;
            		}

            	}
                break;
            case ID:
            	{
            		switch ( LA(2) ) 
            		{
            		case 66:
            			{
            				alt16=1;
            			}
            		    break;
            		case ID:
            			{
            				alt16=2;
            			}
            		    break;

            		default:
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 16;
            		    EXCEPTION->state        = 4;


            		    goto ruletypeEx;
            		}

            	}
                break;
            case CLASS_KW:
            	{
            		switch ( LA(2) ) 
            		{
            		case 68:
            			{
            				switch ( LA(3) ) 
            				{
            				case ID:
            					{
            						switch ( LA(4) ) 
            						{
            						case 69:
            							{
            								switch ( LA(5) ) 
            								{
            								case 66:
            									{
            										alt16=1;
            									}
            								    break;
            								case ID:
            									{
            										alt16=2;
            									}
            								    break;

            								default:
            								    CONSTRUCTEX();
            								    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            								    EXCEPTION->message      = (void *)"";
            								    EXCEPTION->decisionNum  = 16;
            								    EXCEPTION->state        = 10;


            								    goto ruletypeEx;
            								}

            							}
            						    break;

            						default:
            						    CONSTRUCTEX();
            						    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            						    EXCEPTION->message      = (void *)"";
            						    EXCEPTION->decisionNum  = 16;
            						    EXCEPTION->state        = 9;


            						    goto ruletypeEx;
            						}

            					}
            				    break;

            				default:
            				    CONSTRUCTEX();
            				    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				    EXCEPTION->message      = (void *)"";
            				    EXCEPTION->decisionNum  = 16;
            				    EXCEPTION->state        = 8;


            				    goto ruletypeEx;
            				}

            			}
            		    break;

            		default:
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 16;
            		    EXCEPTION->state        = 5;


            		    goto ruletypeEx;
            		}

            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 16;
                EXCEPTION->state        = 0;


                goto ruletypeEx;
            }

            switch (alt16) 
            {
        	case 1:
        	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:152:8: arrayType
        	    {
        	        FOLLOWPUSH(FOLLOW_arrayType_in_type874);
        	        arrayType66=arrayType(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletypeEx;
        	        }

        	        CREATE_stream_arrayType; stream_arrayType->add(stream_arrayType, arrayType66.tree, NULL);

        	         
        	        /* AST REWRITE
        	         * elements          : arrayType
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 152:18: -> ^( N_ARRAY_TYPE arrayType )
        	        	{
        	        	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:152:21: ^( N_ARRAY_TYPE arrayType )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, N_ARRAY_TYPE, (pANTLR3_UINT8)"N_ARRAY_TYPE"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_arrayType == NULL ? NULL : stream_arrayType->nextTree(stream_arrayType));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:153:4: simpleType
        	    {
        	        FOLLOWPUSH(FOLLOW_simpleType_in_type887);
        	        simpleType67=simpleType(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletypeEx;
        	        }

        	        CREATE_stream_simpleType; stream_simpleType->add(stream_simpleType, simpleType67.tree, NULL);

        	         
        	        /* AST REWRITE
        	         * elements          : simpleType
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 153:15: -> ^( N_SIMPLE_TYPE simpleType )
        	        	{
        	        	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:153:18: ^( N_SIMPLE_TYPE simpleType )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, N_SIMPLE_TYPE, (pANTLR3_UINT8)"N_SIMPLE_TYPE"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_simpleType == NULL ? NULL : stream_simpleType->nextTree(stream_simpleType));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruletypeEx; /* Prevent compiler warnings */
    ruletypeEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_arrayType != NULL) stream_arrayType->free(stream_arrayType);
        if (stream_simpleType != NULL) stream_simpleType->free(stream_simpleType);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end type */

/** 
 * $ANTLR start arrayType
 * C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:156:1: arrayType : simpleType '[' ']' -> ^( N_SIMPLE_TYPE simpleType ) ;
 */
static ContainedObjectsParser_arrayType_return
arrayType(pContainedObjectsParser ctx)
{   
    ContainedObjectsParser_arrayType_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal69;
    pANTLR3_COMMON_TOKEN    char_literal70;
    ContainedObjectsParser_simpleType_return simpleType68;
    #undef	RETURN_TYPE_simpleType68
    #define	RETURN_TYPE_simpleType68 ContainedObjectsParser_simpleType_return

    pANTLR3_BASE_TREE char_literal69_tree;
    pANTLR3_BASE_TREE char_literal70_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_67;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_66;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_simpleType;
    /* Initialize rule variables
     */


    root_0 = NULL;

    char_literal69       = NULL;
    char_literal70       = NULL;
    simpleType68.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    char_literal69_tree   = NULL;
    char_literal70_tree   = NULL;

    stream_67   = NULL;
    #define CREATE_stream_67  if (stream_67 == NULL) {stream_67 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 67"); } 
    stream_66   = NULL;
    #define CREATE_stream_66  if (stream_66 == NULL) {stream_66 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 66"); } 
    stream_simpleType   = NULL;
    #define CREATE_stream_simpleType  if (stream_simpleType == NULL) {stream_simpleType = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule simpleType"); }

    retval.tree  = NULL;
    {
        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:157:2: ( simpleType '[' ']' -> ^( N_SIMPLE_TYPE simpleType ) )
        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:157:4: simpleType '[' ']'
        {
            FOLLOWPUSH(FOLLOW_simpleType_in_arrayType906);
            simpleType68=simpleType(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulearrayTypeEx;
            }

            CREATE_stream_simpleType; stream_simpleType->add(stream_simpleType, simpleType68.tree, NULL);
            char_literal69 = (pANTLR3_COMMON_TOKEN) MATCHT(66, &FOLLOW_66_in_arrayType908); 
            if  (HASEXCEPTION())
            {
                goto rulearrayTypeEx;
            }
             
            CREATE_stream_66; stream_66->add(stream_66, char_literal69, NULL);

            char_literal70 = (pANTLR3_COMMON_TOKEN) MATCHT(67, &FOLLOW_67_in_arrayType910); 
            if  (HASEXCEPTION())
            {
                goto rulearrayTypeEx;
            }
             
            CREATE_stream_67; stream_67->add(stream_67, char_literal70, NULL);


             
            /* AST REWRITE
             * elements          : simpleType
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 158:3: -> ^( N_SIMPLE_TYPE simpleType )
            	{
            	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:158:6: ^( N_SIMPLE_TYPE simpleType )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, N_SIMPLE_TYPE, (pANTLR3_UINT8)"N_SIMPLE_TYPE"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_simpleType == NULL ? NULL : stream_simpleType->nextTree(stream_simpleType));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulearrayTypeEx; /* Prevent compiler warnings */
    rulearrayTypeEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_67 != NULL) stream_67->free(stream_67);
        if (stream_66 != NULL) stream_66->free(stream_66);
        if (stream_simpleType != NULL) stream_simpleType->free(stream_simpleType);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end arrayType */

/** 
 * $ANTLR start simpleType
 * C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:161:1: simpleType : ( INTEGER_KW -> N_INTEGER_TYPE | FLOAT_KW -> N_FLOAT_TYPE | STRING_KW -> N_STRING_TYPE | ID -> ^( N_OBJECT_TYPE ID ) | CLASS_KW '<' ID '>' -> ^( N_CLASS_TYPE ID ) );
 */
static ContainedObjectsParser_simpleType_return
simpleType(pContainedObjectsParser ctx)
{   
    ContainedObjectsParser_simpleType_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    INTEGER_KW71;
    pANTLR3_COMMON_TOKEN    FLOAT_KW72;
    pANTLR3_COMMON_TOKEN    STRING_KW73;
    pANTLR3_COMMON_TOKEN    ID74;
    pANTLR3_COMMON_TOKEN    CLASS_KW75;
    pANTLR3_COMMON_TOKEN    char_literal76;
    pANTLR3_COMMON_TOKEN    ID77;
    pANTLR3_COMMON_TOKEN    char_literal78;

    pANTLR3_BASE_TREE INTEGER_KW71_tree;
    pANTLR3_BASE_TREE FLOAT_KW72_tree;
    pANTLR3_BASE_TREE STRING_KW73_tree;
    pANTLR3_BASE_TREE ID74_tree;
    pANTLR3_BASE_TREE CLASS_KW75_tree;
    pANTLR3_BASE_TREE char_literal76_tree;
    pANTLR3_BASE_TREE ID77_tree;
    pANTLR3_BASE_TREE char_literal78_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_CLASS_KW;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_69;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_68;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_FLOAT_KW;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_INTEGER_KW;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_ID;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_STRING_KW;

    /* Initialize rule variables
     */


    root_0 = NULL;

    INTEGER_KW71       = NULL;
    FLOAT_KW72       = NULL;
    STRING_KW73       = NULL;
    ID74       = NULL;
    CLASS_KW75       = NULL;
    char_literal76       = NULL;
    ID77       = NULL;
    char_literal78       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    INTEGER_KW71_tree   = NULL;
    FLOAT_KW72_tree   = NULL;
    STRING_KW73_tree   = NULL;
    ID74_tree   = NULL;
    CLASS_KW75_tree   = NULL;
    char_literal76_tree   = NULL;
    ID77_tree   = NULL;
    char_literal78_tree   = NULL;

    stream_CLASS_KW   = NULL;
    #define CREATE_stream_CLASS_KW  if (stream_CLASS_KW == NULL) {stream_CLASS_KW = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token CLASS_KW"); } 
    stream_69   = NULL;
    #define CREATE_stream_69  if (stream_69 == NULL) {stream_69 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 69"); } 
    stream_68   = NULL;
    #define CREATE_stream_68  if (stream_68 == NULL) {stream_68 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 68"); } 
    stream_FLOAT_KW   = NULL;
    #define CREATE_stream_FLOAT_KW  if (stream_FLOAT_KW == NULL) {stream_FLOAT_KW = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token FLOAT_KW"); } 
    stream_INTEGER_KW   = NULL;
    #define CREATE_stream_INTEGER_KW  if (stream_INTEGER_KW == NULL) {stream_INTEGER_KW = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token INTEGER_KW"); } 
    stream_ID   = NULL;
    #define CREATE_stream_ID  if (stream_ID == NULL) {stream_ID = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token ID"); } 
    stream_STRING_KW   = NULL;
    #define CREATE_stream_STRING_KW  if (stream_STRING_KW == NULL) {stream_STRING_KW = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token STRING_KW"); } 

    retval.tree  = NULL;
    {
        {
            //  C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:162:3: ( INTEGER_KW -> N_INTEGER_TYPE | FLOAT_KW -> N_FLOAT_TYPE | STRING_KW -> N_STRING_TYPE | ID -> ^( N_OBJECT_TYPE ID ) | CLASS_KW '<' ID '>' -> ^( N_CLASS_TYPE ID ) )
            
            ANTLR3_UINT32 alt17;

            alt17=5;

            switch ( LA(1) ) 
            {
            case INTEGER_KW:
            	{
            		alt17=1;
            	}
                break;
            case FLOAT_KW:
            	{
            		alt17=2;
            	}
                break;
            case STRING_KW:
            	{
            		alt17=3;
            	}
                break;
            case ID:
            	{
            		alt17=4;
            	}
                break;
            case CLASS_KW:
            	{
            		alt17=5;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 17;
                EXCEPTION->state        = 0;


                goto rulesimpleTypeEx;
            }

            switch (alt17) 
            {
        	case 1:
        	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:162:5: INTEGER_KW
        	    {
        	        INTEGER_KW71 = (pANTLR3_COMMON_TOKEN) MATCHT(INTEGER_KW, &FOLLOW_INTEGER_KW_in_simpleType932); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesimpleTypeEx;
        	        }
        	         
        	        CREATE_stream_INTEGER_KW; stream_INTEGER_KW->add(stream_INTEGER_KW, INTEGER_KW71, NULL);


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 162:17: -> N_INTEGER_TYPE
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, N_INTEGER_TYPE, (pANTLR3_UINT8)"N_INTEGER_TYPE"));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:163:4: FLOAT_KW
        	    {
        	        FLOAT_KW72 = (pANTLR3_COMMON_TOKEN) MATCHT(FLOAT_KW, &FOLLOW_FLOAT_KW_in_simpleType942); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesimpleTypeEx;
        	        }
        	         
        	        CREATE_stream_FLOAT_KW; stream_FLOAT_KW->add(stream_FLOAT_KW, FLOAT_KW72, NULL);


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 163:14: -> N_FLOAT_TYPE
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, N_FLOAT_TYPE, (pANTLR3_UINT8)"N_FLOAT_TYPE"));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:164:4: STRING_KW
        	    {
        	        STRING_KW73 = (pANTLR3_COMMON_TOKEN) MATCHT(STRING_KW, &FOLLOW_STRING_KW_in_simpleType952); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesimpleTypeEx;
        	        }
        	         
        	        CREATE_stream_STRING_KW; stream_STRING_KW->add(stream_STRING_KW, STRING_KW73, NULL);


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 164:15: -> N_STRING_TYPE
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, N_STRING_TYPE, (pANTLR3_UINT8)"N_STRING_TYPE"));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 4:
        	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:165:4: ID
        	    {
        	        ID74 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_simpleType962); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesimpleTypeEx;
        	        }
        	         
        	        CREATE_stream_ID; stream_ID->add(stream_ID, ID74, NULL);


        	         
        	        /* AST REWRITE
        	         * elements          : ID
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 165:9: -> ^( N_OBJECT_TYPE ID )
        	        	{
        	        	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:165:12: ^( N_OBJECT_TYPE ID )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, N_OBJECT_TYPE, (pANTLR3_UINT8)"N_OBJECT_TYPE"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_ID == NULL ? NULL : stream_ID->nextNode(stream_ID));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 5:
        	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:166:4: CLASS_KW '<' ID '>'
        	    {
        	        CLASS_KW75 = (pANTLR3_COMMON_TOKEN) MATCHT(CLASS_KW, &FOLLOW_CLASS_KW_in_simpleType977); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesimpleTypeEx;
        	        }
        	         
        	        CREATE_stream_CLASS_KW; stream_CLASS_KW->add(stream_CLASS_KW, CLASS_KW75, NULL);

        	        char_literal76 = (pANTLR3_COMMON_TOKEN) MATCHT(68, &FOLLOW_68_in_simpleType979); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesimpleTypeEx;
        	        }
        	         
        	        CREATE_stream_68; stream_68->add(stream_68, char_literal76, NULL);

        	        ID77 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_simpleType981); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesimpleTypeEx;
        	        }
        	         
        	        CREATE_stream_ID; stream_ID->add(stream_ID, ID77, NULL);

        	        char_literal78 = (pANTLR3_COMMON_TOKEN) MATCHT(69, &FOLLOW_69_in_simpleType983); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesimpleTypeEx;
        	        }
        	         
        	        CREATE_stream_69; stream_69->add(stream_69, char_literal78, NULL);


        	         
        	        /* AST REWRITE
        	         * elements          : ID
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 166:24: -> ^( N_CLASS_TYPE ID )
        	        	{
        	        	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:166:27: ^( N_CLASS_TYPE ID )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, N_CLASS_TYPE, (pANTLR3_UINT8)"N_CLASS_TYPE"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_ID == NULL ? NULL : stream_ID->nextNode(stream_ID));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulesimpleTypeEx; /* Prevent compiler warnings */
    rulesimpleTypeEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_CLASS_KW != NULL) stream_CLASS_KW->free(stream_CLASS_KW);
        if (stream_69 != NULL) stream_69->free(stream_69);
        if (stream_68 != NULL) stream_68->free(stream_68);
        if (stream_FLOAT_KW != NULL) stream_FLOAT_KW->free(stream_FLOAT_KW);
        if (stream_INTEGER_KW != NULL) stream_INTEGER_KW->free(stream_INTEGER_KW);
        if (stream_ID != NULL) stream_ID->free(stream_ID);
        if (stream_STRING_KW != NULL) stream_STRING_KW->free(stream_STRING_KW);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end simpleType */
/* End of parsing rules
 * ==============================================
 */

/* ==============================================
 * Syntactic predicates
 */
/* End of syntactic predicates
 * ==============================================
 */

 
 



/* End of code
 * =============================================================================
 */
