/** \file
 *  This C source file was generated by $ANTLR version 3.2 Sep 23, 2009 12:02:23
 *
 *     -  From the grammar source file : C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g
 *     -                            On : 2010-11-04 18:24:41
 *     -                for the parser : ContainedObjectsParserParser *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
*/
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "ContainedObjectsParser.h"
/* ----------------------------------------- */





/* MACROS that hide the C interface implementations from the
 * generated code, which makes it a little more understandable to the human eye.
 * I am very much against using C pre-processor macros for function calls and bits
 * of code as you cannot see what is happening when single stepping in debuggers
 * and so on. The exception (in my book at least) is for generated code, where you are
 * not maintaining it, but may wish to read and understand it. If you single step it, you know that input()
 * hides some indirect calls, but is always referring to the input stream. This is
 * probably more readable than ctx->input->istream->input(snarfle0->blarg) and allows me to rejig
 * the runtime interfaces without changing the generated code too often, without
 * confusing the reader of the generated output, who may not wish to know the gory
 * details of the interface inheritance.
 */
 
#define		CTX	ctx

/* Aids in accessing scopes for grammar programmers
 */
#undef	SCOPE_TYPE
#undef	SCOPE_STACK
#undef	SCOPE_TOP
#define	SCOPE_TYPE(scope)   pContainedObjectsParser_##scope##_SCOPE
#define SCOPE_STACK(scope)  pContainedObjectsParser_##scope##Stack
#define	SCOPE_TOP(scope)    ctx->pContainedObjectsParser_##scope##Top
#define	SCOPE_SIZE(scope)		ctx->pContainedObjectsParser_##scope##Stack_limit
#define SCOPE_INSTANCE(scope, i)	(ctx->SCOPE_STACK(scope)->get(ctx->SCOPE_STACK(scope),i))

/* Macros for accessing things in the parser
 */
 
#undef	    PARSER		    
#undef	    RECOGNIZER		    
#undef	    HAVEPARSEDRULE
#undef		MEMOIZE
#undef	    INPUT
#undef	    STRSTREAM
#undef	    HASEXCEPTION
#undef	    EXCEPTION
#undef	    MATCHT
#undef	    MATCHANYT
#undef	    FOLLOWSTACK
#undef	    FOLLOWPUSH
#undef	    FOLLOWPOP
#undef	    PRECOVER
#undef	    PREPORTERROR
#undef	    LA
#undef	    LT
#undef	    CONSTRUCTEX
#undef	    CONSUME
#undef	    MARK
#undef	    REWIND
#undef	    REWINDLAST
#undef	    PERRORRECOVERY
#undef	    HASFAILED
#undef	    FAILEDFLAG
#undef	    RECOVERFROMMISMATCHEDSET
#undef	    RECOVERFROMMISMATCHEDELEMENT
#undef		INDEX
#undef      ADAPTOR
#undef		SEEK
#undef	    RULEMEMO		    
#undef		DBG

#define	    PARSER							ctx->pParser  
#define	    RECOGNIZER						PARSER->rec
#define		PSRSTATE						RECOGNIZER->state
#define	    HAVEPARSEDRULE(r)				RECOGNIZER->alreadyParsedRule(RECOGNIZER, r)
#define		MEMOIZE(ri,si)					RECOGNIZER->memoize(RECOGNIZER, ri, si)
#define	    INPUT							PARSER->tstream
#define	    STRSTREAM						INPUT
#define		ISTREAM							INPUT->istream
#define		INDEX()							ISTREAM->index(INPUT->istream)
#define	    HASEXCEPTION()					(PSRSTATE->error == ANTLR3_TRUE)
#define	    EXCEPTION						PSRSTATE->exception
#define	    MATCHT(t, fs)					RECOGNIZER->match(RECOGNIZER, t, fs)
#define	    MATCHANYT()						RECOGNIZER->matchAny(RECOGNIZER)
#define	    FOLLOWSTACK					    PSRSTATE->following
#define	    FOLLOWPUSH(x)					FOLLOWSTACK->push(FOLLOWSTACK, ((void *)(&(x))), NULL)
#define	    FOLLOWPOP()						FOLLOWSTACK->pop(FOLLOWSTACK)
#define	    PRECOVER()						RECOGNIZER->recover(RECOGNIZER)
#define	    PREPORTERROR()					RECOGNIZER->reportError(RECOGNIZER)
#define	    LA(n)							INPUT->istream->_LA(ISTREAM, n)
#define	    LT(n)							INPUT->_LT(INPUT, n)
#define	    CONSTRUCTEX()					RECOGNIZER->exConstruct(RECOGNIZER)
#define	    CONSUME()						ISTREAM->consume(ISTREAM)
#define	    MARK()							ISTREAM->mark(ISTREAM)
#define	    REWIND(m)						ISTREAM->rewind(ISTREAM, m)
#define	    REWINDLAST()					ISTREAM->rewindLast(ISTREAM)
#define		SEEK(n)							ISTREAM->seek(ISTREAM, n)
#define	    PERRORRECOVERY					PSRSTATE->errorRecovery
#define	    FAILEDFLAG						PSRSTATE->failed
#define	    HASFAILED()						(FAILEDFLAG == ANTLR3_TRUE)
#define	    BACKTRACKING					PSRSTATE->backtracking
#define	    RECOVERFROMMISMATCHEDSET(s)		RECOGNIZER->recoverFromMismatchedSet(RECOGNIZER, s)
#define	    RECOVERFROMMISMATCHEDELEMENT(e)	RECOGNIZER->recoverFromMismatchedElement(RECOGNIZER, s)
#define     ADAPTOR                         ctx->adaptor
#define		RULEMEMO						PSRSTATE->ruleMemo
#define		DBG								RECOGNIZER->debugger

#define		TOKTEXT(tok, txt)				tok, (pANTLR3_UINT8)txt

/* The 4 tokens defined below may well clash with your own #defines or token types. If so
 * then for the present you must use different names for your defines as these are hard coded
 * in the code generator. It would be better not to use such names internally, and maybe
 * we can change this in a forthcoming release. I deliberately do not #undef these
 * here as this will at least give you a redefined error somewhere if they clash.
 */
#define	    UP	    ANTLR3_TOKEN_UP
#define	    DOWN    ANTLR3_TOKEN_DOWN
#define	    EOR	    ANTLR3_TOKEN_EOR
#define	    INVALID ANTLR3_TOKEN_INVALID


/* =============================================================================
 * Functions to create and destroy scopes. First come the rule scopes, followed
 * by the global declared scopes.
 */



/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */



/** \brief Table of all token names in symbolic order, mainly used for
 *         error reporting.
 */
pANTLR3_UINT8   ContainedObjectsParserTokenNames[69+4]
     = {
        (pANTLR3_UINT8) "<invalid>",       /* String to print to indicate an invalid token */
        (pANTLR3_UINT8) "<EOR>",
        (pANTLR3_UINT8) "<DOWN>", 
        (pANTLR3_UINT8) "<UP>", 
        (pANTLR3_UINT8) "CLASS_KW",
        (pANTLR3_UINT8) "INTERFACE_KW",
        (pANTLR3_UINT8) "IMPLEMENTS_KW",
        (pANTLR3_UINT8) "STATIC_KW",
        (pANTLR3_UINT8) "INTEGER_KW",
        (pANTLR3_UINT8) "FLOAT_KW",
        (pANTLR3_UINT8) "STRING_KW",
        (pANTLR3_UINT8) "N_CLASS_DECL",
        (pANTLR3_UINT8) "N_IFACE_DECL",
        (pANTLR3_UINT8) "N_FORMAL_CLASS_PARAMS",
        (pANTLR3_UINT8) "N_CLASS_BODY",
        (pANTLR3_UINT8) "N_IFACE_BODY",
        (pANTLR3_UINT8) "N_IMPLEMENTS_DECL",
        (pANTLR3_UINT8) "N_IMPLEMENTED_IFACE",
        (pANTLR3_UINT8) "N_FORMAL_CLASS_PARAM",
        (pANTLR3_UINT8) "N_VARDEF",
        (pANTLR3_UINT8) "N_VARDEF_ASSIGN",
        (pANTLR3_UINT8) "N_TYPE",
        (pANTLR3_UINT8) "N_OBJECT_TYPE",
        (pANTLR3_UINT8) "N_CLASS_TYPE",
        (pANTLR3_UINT8) "N_ARRAY_TYPE",
        (pANTLR3_UINT8) "N_VALUE",
        (pANTLR3_UINT8) "N_ACTUAL_PARAMS",
        (pANTLR3_UINT8) "N_ACTUAL_PARAM",
        (pANTLR3_UINT8) "N_SIMPLE_TYPE",
        (pANTLR3_UINT8) "N_ARRAY_VALUES",
        (pANTLR3_UINT8) "N_INTEGER_TYPE",
        (pANTLR3_UINT8) "N_FLOAT_TYPE",
        (pANTLR3_UINT8) "N_STRING_TYPE",
        (pANTLR3_UINT8) "N_OBJECT_INIT_VAL",
        (pANTLR3_UINT8) "N_ARRAY_INIT_VAL",
        (pANTLR3_UINT8) "N_LITERAL_VAL",
        (pANTLR3_UINT8) "N_REFERENCE_VAL",
        (pANTLR3_UINT8) "N_CLASS_NAME",
        (pANTLR3_UINT8) "N_IFACE_NAME",
        (pANTLR3_UINT8) "N_PARAM_CLASS",
        (pANTLR3_UINT8) "N_SCOPE",
        (pANTLR3_UINT8) "N_VAR_NAME",
        (pANTLR3_UINT8) "N_PARAM_NAME",
        (pANTLR3_UINT8) "N_TYPE_NAME",
        (pANTLR3_UINT8) "N_PROC_NAME",
        (pANTLR3_UINT8) "N_COMMAND_NAME",
        (pANTLR3_UINT8) "N_INT_LITERAL",
        (pANTLR3_UINT8) "N_FLOAT_LITERAL",
        (pANTLR3_UINT8) "N_STRING_LITERAL",
        (pANTLR3_UINT8) "N_REF_PATH",
        (pANTLR3_UINT8) "ID",
        (pANTLR3_UINT8) "INTL",
        (pANTLR3_UINT8) "FLOATL",
        (pANTLR3_UINT8) "STRINGL",
        (pANTLR3_UINT8) "EXPONENT",
        (pANTLR3_UINT8) "COMMENT",
        (pANTLR3_UINT8) "ESC_SEQ",
        (pANTLR3_UINT8) "HEX_DIGIT",
        (pANTLR3_UINT8) "UNICODE_ESC",
        (pANTLR3_UINT8) "OCTAL_ESC",
        (pANTLR3_UINT8) "SPACE",
        (pANTLR3_UINT8) "'('",
        (pANTLR3_UINT8) "')'",
        (pANTLR3_UINT8) "'{'",
        (pANTLR3_UINT8) "'}'",
        (pANTLR3_UINT8) "';'",
        (pANTLR3_UINT8) "','",
        (pANTLR3_UINT8) "'='",
        (pANTLR3_UINT8) "'.'",
        (pANTLR3_UINT8) "'['",
        (pANTLR3_UINT8) "']'",
        (pANTLR3_UINT8) "'<'",
        (pANTLR3_UINT8) "'>'"
       };

        

// Forward declare the locally static matching functions we have generated.
//
static ContainedObjectsParser_init_return	init    (pContainedObjectsParser ctx);
static ContainedObjectsParser_interfaceDecl_return	interfaceDecl    (pContainedObjectsParser ctx);
static ContainedObjectsParser_interfaceBody_return	interfaceBody    (pContainedObjectsParser ctx);
static ContainedObjectsParser_varDef_return	varDef    (pContainedObjectsParser ctx);
static ContainedObjectsParser_classDecl_return	classDecl    (pContainedObjectsParser ctx);
static ContainedObjectsParser_formalClassParamList_return	formalClassParamList    (pContainedObjectsParser ctx);
static ContainedObjectsParser_formalClassParam_return	formalClassParam    (pContainedObjectsParser ctx);
static ContainedObjectsParser_implementsDecl_return	implementsDecl    (pContainedObjectsParser ctx);
static ContainedObjectsParser_classBody_return	classBody    (pContainedObjectsParser ctx);
static ContainedObjectsParser_varDefAssign_return	varDefAssign    (pContainedObjectsParser ctx);
static ContainedObjectsParser_actualParamList_return	actualParamList    (pContainedObjectsParser ctx);
static ContainedObjectsParser_actualParam_return	actualParam    (pContainedObjectsParser ctx);
static ContainedObjectsParser_value_return	value    (pContainedObjectsParser ctx);
static ContainedObjectsParser_reference_return	reference    (pContainedObjectsParser ctx);
static ContainedObjectsParser_literal_return	literal    (pContainedObjectsParser ctx);
static ContainedObjectsParser_arrayInit_return	arrayInit    (pContainedObjectsParser ctx);
static ContainedObjectsParser_objectInit_return	objectInit    (pContainedObjectsParser ctx);
static ContainedObjectsParser_type_return	type    (pContainedObjectsParser ctx);
static ContainedObjectsParser_arrayType_return	arrayType    (pContainedObjectsParser ctx);
static ContainedObjectsParser_simpleType_return	simpleType    (pContainedObjectsParser ctx);
static void	ContainedObjectsParserFree(pContainedObjectsParser ctx);
/* For use in tree output where we are accumulating rule labels via label += ruleRef
 * we need a function that knows how to free a return scope when the list is destroyed. 
 * We cannot just use ANTLR3_FREE because in debug tracking mode, this is a macro.
 */
static	void ANTLR3_CDECL freeScope(void * scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g";

/** \brief Return the name of the grammar file that generated this code.
 */
static const char * getGrammarFileName()
{
	return fileName;
}
/** \brief Create a new ContainedObjectsParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pContainedObjectsParser
ContainedObjectsParserNew   (pANTLR3_COMMON_TOKEN_STREAM instream)
{
	// See if we can create a new parser with the standard constructor
	//
	return ContainedObjectsParserNewSSD(instream, NULL);
}

/** \brief Create a new ContainedObjectsParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pContainedObjectsParser
ContainedObjectsParserNewSSD   (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state)
{
    pContainedObjectsParser ctx;	    /* Context structure we will build and return   */
    
    ctx	= (pContainedObjectsParser) ANTLR3_CALLOC(1, sizeof(ContainedObjectsParser));
    
    if	(ctx == NULL)
    {
		// Failed to allocate memory for parser context
		//
        return  NULL;
    }
    
    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * the base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 parser function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function. 
     *
     * We don't use the macros defined in ContainedObjectsParser.h here, in order that you can get a sense
     * of what goes where.
     */

    /* Create a base parser/recognizer, using the supplied token stream
     */
    ctx->pParser	    = antlr3ParserNewStream(ANTLR3_SIZE_HINT, instream->tstream, state);
    /* Install the implementation of our ContainedObjectsParser interface
     */
    ctx->init	= init;
    ctx->interfaceDecl	= interfaceDecl;
    ctx->interfaceBody	= interfaceBody;
    ctx->varDef	= varDef;
    ctx->classDecl	= classDecl;
    ctx->formalClassParamList	= formalClassParamList;
    ctx->formalClassParam	= formalClassParam;
    ctx->implementsDecl	= implementsDecl;
    ctx->classBody	= classBody;
    ctx->varDefAssign	= varDefAssign;
    ctx->actualParamList	= actualParamList;
    ctx->actualParam	= actualParam;
    ctx->value	= value;
    ctx->reference	= reference;
    ctx->literal	= literal;
    ctx->arrayInit	= arrayInit;
    ctx->objectInit	= objectInit;
    ctx->type	= type;
    ctx->arrayType	= arrayType;
    ctx->simpleType	= simpleType;
    ctx->free			= ContainedObjectsParserFree;
    ctx->getGrammarFileName	= getGrammarFileName;
    
    /* Install the scope pushing methods.
     */
    ADAPTOR	= ANTLR3_TREE_ADAPTORNew(instream->tstream->tokenSource->strFactory);
    ctx->vectors	= antlr3VectorFactoryNew(0);
    

	
    /* Install the token table
     */
    PSRSTATE->tokenNames   = ContainedObjectsParserTokenNames;
    
    
    /* Return the newly built parser to the caller
     */
    return  ctx;
}

/** Free the parser resources
 */
 static void
 ContainedObjectsParserFree(pContainedObjectsParser ctx)
 {
    /* Free any scope memory
     */
    
    ctx->vectors->close(ctx->vectors);
    /* We created the adaptor so we must free it
     */
    ADAPTOR->free(ADAPTOR);
	// Free this parser
	//
    ctx->pParser->free(ctx->pParser);
    ANTLR3_FREE(ctx);

    /* Everything is released, so we can return
     */
    return;
 }
 
/** Return token names used by this parser
 *
 * The returned pointer is used as an index into the token names table (using the token 
 * number as the index).
 * 
 * \return Pointer to first char * in the table.
 */
static pANTLR3_UINT8    *getTokenNames() 
{
        return ContainedObjectsParserTokenNames; 
}

    
/* Declare the bitsets
 */

/** Bitset defining follow set for error recovery in rule state: FOLLOW_classDecl_in_init282  */
static	ANTLR3_BITWORD FOLLOW_classDecl_in_init282_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_classDecl_in_init282	= { FOLLOW_classDecl_in_init282_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_interfaceDecl_in_init295  */
static	ANTLR3_BITWORD FOLLOW_interfaceDecl_in_init295_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_interfaceDecl_in_init295	= { FOLLOW_interfaceDecl_in_init295_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_INTERFACE_KW_in_interfaceDecl317  */
static	ANTLR3_BITWORD FOLLOW_INTERFACE_KW_in_interfaceDecl317_bits[]	= { ANTLR3_UINT64_LIT(0x0004000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_INTERFACE_KW_in_interfaceDecl317	= { FOLLOW_INTERFACE_KW_in_interfaceDecl317_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_interfaceDecl319  */
static	ANTLR3_BITWORD FOLLOW_ID_in_interfaceDecl319_bits[]	= { ANTLR3_UINT64_LIT(0x2000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_interfaceDecl319	= { FOLLOW_ID_in_interfaceDecl319_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_61_in_interfaceDecl321  */
static	ANTLR3_BITWORD FOLLOW_61_in_interfaceDecl321_bits[]	= { ANTLR3_UINT64_LIT(0x4004000000000710) };
static  ANTLR3_BITSET_LIST FOLLOW_61_in_interfaceDecl321	= { FOLLOW_61_in_interfaceDecl321_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_formalClassParamList_in_interfaceDecl323  */
static	ANTLR3_BITWORD FOLLOW_formalClassParamList_in_interfaceDecl323_bits[]	= { ANTLR3_UINT64_LIT(0x4000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_formalClassParamList_in_interfaceDecl323	= { FOLLOW_formalClassParamList_in_interfaceDecl323_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_62_in_interfaceDecl325  */
static	ANTLR3_BITWORD FOLLOW_62_in_interfaceDecl325_bits[]	= { ANTLR3_UINT64_LIT(0x8000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_62_in_interfaceDecl325	= { FOLLOW_62_in_interfaceDecl325_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_63_in_interfaceDecl327  */
static	ANTLR3_BITWORD FOLLOW_63_in_interfaceDecl327_bits[]	= { ANTLR3_UINT64_LIT(0x0004000000000790), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_63_in_interfaceDecl327	= { FOLLOW_63_in_interfaceDecl327_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_interfaceBody_in_interfaceDecl329  */
static	ANTLR3_BITWORD FOLLOW_interfaceBody_in_interfaceDecl329_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_interfaceBody_in_interfaceDecl329	= { FOLLOW_interfaceBody_in_interfaceDecl329_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_64_in_interfaceDecl331  */
static	ANTLR3_BITWORD FOLLOW_64_in_interfaceDecl331_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_64_in_interfaceDecl331	= { FOLLOW_64_in_interfaceDecl331_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EOF_in_interfaceDecl333  */
static	ANTLR3_BITWORD FOLLOW_EOF_in_interfaceDecl333_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_EOF_in_interfaceDecl333	= { FOLLOW_EOF_in_interfaceDecl333_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_varDef_in_interfaceBody367  */
static	ANTLR3_BITWORD FOLLOW_varDef_in_interfaceBody367_bits[]	= { ANTLR3_UINT64_LIT(0x0004000000000792) };
static  ANTLR3_BITSET_LIST FOLLOW_varDef_in_interfaceBody367	= { FOLLOW_varDef_in_interfaceBody367_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_STATIC_KW_in_varDef391  */
static	ANTLR3_BITWORD FOLLOW_STATIC_KW_in_varDef391_bits[]	= { ANTLR3_UINT64_LIT(0x0004000000000710) };
static  ANTLR3_BITSET_LIST FOLLOW_STATIC_KW_in_varDef391	= { FOLLOW_STATIC_KW_in_varDef391_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_in_varDef394  */
static	ANTLR3_BITWORD FOLLOW_type_in_varDef394_bits[]	= { ANTLR3_UINT64_LIT(0x0004000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_type_in_varDef394	= { FOLLOW_type_in_varDef394_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_varDef396  */
static	ANTLR3_BITWORD FOLLOW_ID_in_varDef396_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_varDef396	= { FOLLOW_ID_in_varDef396_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_65_in_varDef398  */
static	ANTLR3_BITWORD FOLLOW_65_in_varDef398_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_65_in_varDef398	= { FOLLOW_65_in_varDef398_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CLASS_KW_in_classDecl435  */
static	ANTLR3_BITWORD FOLLOW_CLASS_KW_in_classDecl435_bits[]	= { ANTLR3_UINT64_LIT(0x0004000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_CLASS_KW_in_classDecl435	= { FOLLOW_CLASS_KW_in_classDecl435_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_classDecl437  */
static	ANTLR3_BITWORD FOLLOW_ID_in_classDecl437_bits[]	= { ANTLR3_UINT64_LIT(0x2000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_classDecl437	= { FOLLOW_ID_in_classDecl437_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_61_in_classDecl439  */
static	ANTLR3_BITWORD FOLLOW_61_in_classDecl439_bits[]	= { ANTLR3_UINT64_LIT(0x4004000000000710) };
static  ANTLR3_BITSET_LIST FOLLOW_61_in_classDecl439	= { FOLLOW_61_in_classDecl439_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_formalClassParamList_in_classDecl441  */
static	ANTLR3_BITWORD FOLLOW_formalClassParamList_in_classDecl441_bits[]	= { ANTLR3_UINT64_LIT(0x4000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_formalClassParamList_in_classDecl441	= { FOLLOW_formalClassParamList_in_classDecl441_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_62_in_classDecl443  */
static	ANTLR3_BITWORD FOLLOW_62_in_classDecl443_bits[]	= { ANTLR3_UINT64_LIT(0x8000000000000040) };
static  ANTLR3_BITSET_LIST FOLLOW_62_in_classDecl443	= { FOLLOW_62_in_classDecl443_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_implementsDecl_in_classDecl445  */
static	ANTLR3_BITWORD FOLLOW_implementsDecl_in_classDecl445_bits[]	= { ANTLR3_UINT64_LIT(0x8000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_implementsDecl_in_classDecl445	= { FOLLOW_implementsDecl_in_classDecl445_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_63_in_classDecl447  */
static	ANTLR3_BITWORD FOLLOW_63_in_classDecl447_bits[]	= { ANTLR3_UINT64_LIT(0x0004000000000790), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_63_in_classDecl447	= { FOLLOW_63_in_classDecl447_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_classBody_in_classDecl449  */
static	ANTLR3_BITWORD FOLLOW_classBody_in_classDecl449_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_classBody_in_classDecl449	= { FOLLOW_classBody_in_classDecl449_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_64_in_classDecl451  */
static	ANTLR3_BITWORD FOLLOW_64_in_classDecl451_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_64_in_classDecl451	= { FOLLOW_64_in_classDecl451_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EOF_in_classDecl453  */
static	ANTLR3_BITWORD FOLLOW_EOF_in_classDecl453_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_EOF_in_classDecl453	= { FOLLOW_EOF_in_classDecl453_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_formalClassParam_in_formalClassParamList494  */
static	ANTLR3_BITWORD FOLLOW_formalClassParam_in_formalClassParamList494_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_formalClassParam_in_formalClassParamList494	= { FOLLOW_formalClassParam_in_formalClassParamList494_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_66_in_formalClassParamList497  */
static	ANTLR3_BITWORD FOLLOW_66_in_formalClassParamList497_bits[]	= { ANTLR3_UINT64_LIT(0x0004000000000710) };
static  ANTLR3_BITSET_LIST FOLLOW_66_in_formalClassParamList497	= { FOLLOW_66_in_formalClassParamList497_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_formalClassParam_in_formalClassParamList499  */
static	ANTLR3_BITWORD FOLLOW_formalClassParam_in_formalClassParamList499_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_formalClassParam_in_formalClassParamList499	= { FOLLOW_formalClassParam_in_formalClassParamList499_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_in_formalClassParam524  */
static	ANTLR3_BITWORD FOLLOW_type_in_formalClassParam524_bits[]	= { ANTLR3_UINT64_LIT(0x0004000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_type_in_formalClassParam524	= { FOLLOW_type_in_formalClassParam524_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_formalClassParam526  */
static	ANTLR3_BITWORD FOLLOW_ID_in_formalClassParam526_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_formalClassParam526	= { FOLLOW_ID_in_formalClassParam526_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IMPLEMENTS_KW_in_implementsDecl556  */
static	ANTLR3_BITWORD FOLLOW_IMPLEMENTS_KW_in_implementsDecl556_bits[]	= { ANTLR3_UINT64_LIT(0x0004000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_IMPLEMENTS_KW_in_implementsDecl556	= { FOLLOW_IMPLEMENTS_KW_in_implementsDecl556_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_implementsDecl558  */
static	ANTLR3_BITWORD FOLLOW_ID_in_implementsDecl558_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_implementsDecl558	= { FOLLOW_ID_in_implementsDecl558_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_66_in_implementsDecl561  */
static	ANTLR3_BITWORD FOLLOW_66_in_implementsDecl561_bits[]	= { ANTLR3_UINT64_LIT(0x0004000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_66_in_implementsDecl561	= { FOLLOW_66_in_implementsDecl561_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_implementsDecl563  */
static	ANTLR3_BITWORD FOLLOW_ID_in_implementsDecl563_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_implementsDecl563	= { FOLLOW_ID_in_implementsDecl563_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_varDefAssign_in_classBody589  */
static	ANTLR3_BITWORD FOLLOW_varDefAssign_in_classBody589_bits[]	= { ANTLR3_UINT64_LIT(0x0004000000000792) };
static  ANTLR3_BITSET_LIST FOLLOW_varDefAssign_in_classBody589	= { FOLLOW_varDefAssign_in_classBody589_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_STATIC_KW_in_varDefAssign612  */
static	ANTLR3_BITWORD FOLLOW_STATIC_KW_in_varDefAssign612_bits[]	= { ANTLR3_UINT64_LIT(0x0004000000000710) };
static  ANTLR3_BITSET_LIST FOLLOW_STATIC_KW_in_varDefAssign612	= { FOLLOW_STATIC_KW_in_varDefAssign612_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_in_varDefAssign615  */
static	ANTLR3_BITWORD FOLLOW_type_in_varDefAssign615_bits[]	= { ANTLR3_UINT64_LIT(0x0004000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_type_in_varDefAssign615	= { FOLLOW_type_in_varDefAssign615_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_varDefAssign617  */
static	ANTLR3_BITWORD FOLLOW_ID_in_varDefAssign617_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_varDefAssign617	= { FOLLOW_ID_in_varDefAssign617_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_67_in_varDefAssign619  */
static	ANTLR3_BITWORD FOLLOW_67_in_varDefAssign619_bits[]	= { ANTLR3_UINT64_LIT(0x003C000000000710) };
static  ANTLR3_BITSET_LIST FOLLOW_67_in_varDefAssign619	= { FOLLOW_67_in_varDefAssign619_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_value_in_varDefAssign621  */
static	ANTLR3_BITWORD FOLLOW_value_in_varDefAssign621_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_value_in_varDefAssign621	= { FOLLOW_value_in_varDefAssign621_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_65_in_varDefAssign623  */
static	ANTLR3_BITWORD FOLLOW_65_in_varDefAssign623_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_65_in_varDefAssign623	= { FOLLOW_65_in_varDefAssign623_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_actualParam_in_actualParamList664  */
static	ANTLR3_BITWORD FOLLOW_actualParam_in_actualParamList664_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_actualParam_in_actualParamList664	= { FOLLOW_actualParam_in_actualParamList664_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_66_in_actualParamList667  */
static	ANTLR3_BITWORD FOLLOW_66_in_actualParamList667_bits[]	= { ANTLR3_UINT64_LIT(0x0004000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_66_in_actualParamList667	= { FOLLOW_66_in_actualParamList667_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_actualParam_in_actualParamList669  */
static	ANTLR3_BITWORD FOLLOW_actualParam_in_actualParamList669_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_actualParam_in_actualParamList669	= { FOLLOW_actualParam_in_actualParamList669_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_actualParam695  */
static	ANTLR3_BITWORD FOLLOW_ID_in_actualParam695_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_actualParam695	= { FOLLOW_ID_in_actualParam695_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_67_in_actualParam697  */
static	ANTLR3_BITWORD FOLLOW_67_in_actualParam697_bits[]	= { ANTLR3_UINT64_LIT(0x003C000000000710) };
static  ANTLR3_BITSET_LIST FOLLOW_67_in_actualParam697	= { FOLLOW_67_in_actualParam697_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_value_in_actualParam699  */
static	ANTLR3_BITWORD FOLLOW_value_in_actualParam699_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_value_in_actualParam699	= { FOLLOW_value_in_actualParam699_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_objectInit_in_value725  */
static	ANTLR3_BITWORD FOLLOW_objectInit_in_value725_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_objectInit_in_value725	= { FOLLOW_objectInit_in_value725_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arrayInit_in_value738  */
static	ANTLR3_BITWORD FOLLOW_arrayInit_in_value738_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_arrayInit_in_value738	= { FOLLOW_arrayInit_in_value738_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_literal_in_value751  */
static	ANTLR3_BITWORD FOLLOW_literal_in_value751_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_literal_in_value751	= { FOLLOW_literal_in_value751_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_reference_in_value766  */
static	ANTLR3_BITWORD FOLLOW_reference_in_value766_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_reference_in_value766	= { FOLLOW_reference_in_value766_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_reference785  */
static	ANTLR3_BITWORD FOLLOW_ID_in_reference785_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_reference785	= { FOLLOW_ID_in_reference785_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_68_in_reference788  */
static	ANTLR3_BITWORD FOLLOW_68_in_reference788_bits[]	= { ANTLR3_UINT64_LIT(0x0004000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_68_in_reference788	= { FOLLOW_68_in_reference788_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_reference790  */
static	ANTLR3_BITWORD FOLLOW_ID_in_reference790_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_reference790	= { FOLLOW_ID_in_reference790_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_INTL_in_literal809  */
static	ANTLR3_BITWORD FOLLOW_INTL_in_literal809_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_INTL_in_literal809	= { FOLLOW_INTL_in_literal809_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FLOATL_in_literal822  */
static	ANTLR3_BITWORD FOLLOW_FLOATL_in_literal822_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_FLOATL_in_literal822	= { FOLLOW_FLOATL_in_literal822_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_STRINGL_in_literal837  */
static	ANTLR3_BITWORD FOLLOW_STRINGL_in_literal837_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_STRINGL_in_literal837	= { FOLLOW_STRINGL_in_literal837_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_simpleType_in_arrayInit856  */
static	ANTLR3_BITWORD FOLLOW_simpleType_in_arrayInit856_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_simpleType_in_arrayInit856	= { FOLLOW_simpleType_in_arrayInit856_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_69_in_arrayInit858  */
static	ANTLR3_BITWORD FOLLOW_69_in_arrayInit858_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000040) };
static  ANTLR3_BITSET_LIST FOLLOW_69_in_arrayInit858	= { FOLLOW_69_in_arrayInit858_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_70_in_arrayInit860  */
static	ANTLR3_BITWORD FOLLOW_70_in_arrayInit860_bits[]	= { ANTLR3_UINT64_LIT(0x8000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_70_in_arrayInit860	= { FOLLOW_70_in_arrayInit860_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_63_in_arrayInit862  */
static	ANTLR3_BITWORD FOLLOW_63_in_arrayInit862_bits[]	= { ANTLR3_UINT64_LIT(0x003C000000000710), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_63_in_arrayInit862	= { FOLLOW_63_in_arrayInit862_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_value_in_arrayInit865  */
static	ANTLR3_BITWORD FOLLOW_value_in_arrayInit865_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000005) };
static  ANTLR3_BITSET_LIST FOLLOW_value_in_arrayInit865	= { FOLLOW_value_in_arrayInit865_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_66_in_arrayInit868  */
static	ANTLR3_BITWORD FOLLOW_66_in_arrayInit868_bits[]	= { ANTLR3_UINT64_LIT(0x003C000000000710) };
static  ANTLR3_BITSET_LIST FOLLOW_66_in_arrayInit868	= { FOLLOW_66_in_arrayInit868_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_value_in_arrayInit870  */
static	ANTLR3_BITWORD FOLLOW_value_in_arrayInit870_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000005) };
static  ANTLR3_BITSET_LIST FOLLOW_value_in_arrayInit870	= { FOLLOW_value_in_arrayInit870_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_64_in_arrayInit876  */
static	ANTLR3_BITWORD FOLLOW_64_in_arrayInit876_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_64_in_arrayInit876	= { FOLLOW_64_in_arrayInit876_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_objectInit904  */
static	ANTLR3_BITWORD FOLLOW_ID_in_objectInit904_bits[]	= { ANTLR3_UINT64_LIT(0x2000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_objectInit904	= { FOLLOW_ID_in_objectInit904_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_61_in_objectInit906  */
static	ANTLR3_BITWORD FOLLOW_61_in_objectInit906_bits[]	= { ANTLR3_UINT64_LIT(0x4004000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_61_in_objectInit906	= { FOLLOW_61_in_objectInit906_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_actualParamList_in_objectInit908  */
static	ANTLR3_BITWORD FOLLOW_actualParamList_in_objectInit908_bits[]	= { ANTLR3_UINT64_LIT(0x4000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_actualParamList_in_objectInit908	= { FOLLOW_actualParamList_in_objectInit908_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_62_in_objectInit910  */
static	ANTLR3_BITWORD FOLLOW_62_in_objectInit910_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_62_in_objectInit910	= { FOLLOW_62_in_objectInit910_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arrayType_in_type936  */
static	ANTLR3_BITWORD FOLLOW_arrayType_in_type936_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_arrayType_in_type936	= { FOLLOW_arrayType_in_type936_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_simpleType_in_type949  */
static	ANTLR3_BITWORD FOLLOW_simpleType_in_type949_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_simpleType_in_type949	= { FOLLOW_simpleType_in_type949_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_simpleType_in_arrayType968  */
static	ANTLR3_BITWORD FOLLOW_simpleType_in_arrayType968_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_simpleType_in_arrayType968	= { FOLLOW_simpleType_in_arrayType968_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_69_in_arrayType970  */
static	ANTLR3_BITWORD FOLLOW_69_in_arrayType970_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000040) };
static  ANTLR3_BITSET_LIST FOLLOW_69_in_arrayType970	= { FOLLOW_69_in_arrayType970_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_70_in_arrayType972  */
static	ANTLR3_BITWORD FOLLOW_70_in_arrayType972_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_70_in_arrayType972	= { FOLLOW_70_in_arrayType972_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_INTEGER_KW_in_simpleType994  */
static	ANTLR3_BITWORD FOLLOW_INTEGER_KW_in_simpleType994_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_INTEGER_KW_in_simpleType994	= { FOLLOW_INTEGER_KW_in_simpleType994_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FLOAT_KW_in_simpleType1004  */
static	ANTLR3_BITWORD FOLLOW_FLOAT_KW_in_simpleType1004_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_FLOAT_KW_in_simpleType1004	= { FOLLOW_FLOAT_KW_in_simpleType1004_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_STRING_KW_in_simpleType1014  */
static	ANTLR3_BITWORD FOLLOW_STRING_KW_in_simpleType1014_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_STRING_KW_in_simpleType1014	= { FOLLOW_STRING_KW_in_simpleType1014_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_simpleType1024  */
static	ANTLR3_BITWORD FOLLOW_ID_in_simpleType1024_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_simpleType1024	= { FOLLOW_ID_in_simpleType1024_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CLASS_KW_in_simpleType1039  */
static	ANTLR3_BITWORD FOLLOW_CLASS_KW_in_simpleType1039_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000080) };
static  ANTLR3_BITSET_LIST FOLLOW_CLASS_KW_in_simpleType1039	= { FOLLOW_CLASS_KW_in_simpleType1039_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_71_in_simpleType1041  */
static	ANTLR3_BITWORD FOLLOW_71_in_simpleType1041_bits[]	= { ANTLR3_UINT64_LIT(0x0004000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_71_in_simpleType1041	= { FOLLOW_71_in_simpleType1041_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_simpleType1043  */
static	ANTLR3_BITWORD FOLLOW_ID_in_simpleType1043_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000100) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_simpleType1043	= { FOLLOW_ID_in_simpleType1043_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_72_in_simpleType1045  */
static	ANTLR3_BITWORD FOLLOW_72_in_simpleType1045_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_72_in_simpleType1045	= { FOLLOW_72_in_simpleType1045_bits, 1	};
     

 
 
/* ==============================================
 * Parsing rules
 */
/** 
 * $ANTLR start init
 * C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:76:1: init : ( classDecl -> ^( N_CLASS_DECL classDecl ) | interfaceDecl -> ^( N_IFACE_DECL interfaceDecl ) );
 */
static ContainedObjectsParser_init_return
init(pContainedObjectsParser ctx)
{   
    ContainedObjectsParser_init_return retval;

    pANTLR3_BASE_TREE root_0;

    ContainedObjectsParser_classDecl_return classDecl1;
    #undef	RETURN_TYPE_classDecl1
    #define	RETURN_TYPE_classDecl1 ContainedObjectsParser_classDecl_return

    ContainedObjectsParser_interfaceDecl_return interfaceDecl2;
    #undef	RETURN_TYPE_interfaceDecl2
    #define	RETURN_TYPE_interfaceDecl2 ContainedObjectsParser_interfaceDecl_return

    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_interfaceDecl;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_classDecl;
    /* Initialize rule variables
     */


    root_0 = NULL;

    classDecl1.tree = NULL;

    interfaceDecl2.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;


    stream_interfaceDecl   = NULL;
    #define CREATE_stream_interfaceDecl  if (stream_interfaceDecl == NULL) {stream_interfaceDecl = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule interfaceDecl"); }
    stream_classDecl   = NULL;
    #define CREATE_stream_classDecl  if (stream_classDecl == NULL) {stream_classDecl = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule classDecl"); }

    retval.tree  = NULL;
    {
        {
            //  C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:76:7: ( classDecl -> ^( N_CLASS_DECL classDecl ) | interfaceDecl -> ^( N_IFACE_DECL interfaceDecl ) )
            
            ANTLR3_UINT32 alt1;

            alt1=2;

            switch ( LA(1) ) 
            {
            case CLASS_KW:
            	{
            		alt1=1;
            	}
                break;
            case INTERFACE_KW:
            	{
            		alt1=2;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 1;
                EXCEPTION->state        = 0;


                goto ruleinitEx;
            }

            switch (alt1) 
            {
        	case 1:
        	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:76:9: classDecl
        	    {
        	        FOLLOWPUSH(FOLLOW_classDecl_in_init282);
        	        classDecl1=classDecl(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleinitEx;
        	        }

        	        CREATE_stream_classDecl; stream_classDecl->add(stream_classDecl, classDecl1.tree, NULL);

        	         
        	        /* AST REWRITE
        	         * elements          : classDecl
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 76:19: -> ^( N_CLASS_DECL classDecl )
        	        	{
        	        	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:76:22: ^( N_CLASS_DECL classDecl )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, N_CLASS_DECL, (pANTLR3_UINT8)"N_CLASS_DECL"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_classDecl == NULL ? NULL : stream_classDecl->nextTree(stream_classDecl));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:77:4: interfaceDecl
        	    {
        	        FOLLOWPUSH(FOLLOW_interfaceDecl_in_init295);
        	        interfaceDecl2=interfaceDecl(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleinitEx;
        	        }

        	        CREATE_stream_interfaceDecl; stream_interfaceDecl->add(stream_interfaceDecl, interfaceDecl2.tree, NULL);

        	         
        	        /* AST REWRITE
        	         * elements          : interfaceDecl
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 77:18: -> ^( N_IFACE_DECL interfaceDecl )
        	        	{
        	        	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:77:21: ^( N_IFACE_DECL interfaceDecl )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, N_IFACE_DECL, (pANTLR3_UINT8)"N_IFACE_DECL"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_interfaceDecl == NULL ? NULL : stream_interfaceDecl->nextTree(stream_interfaceDecl));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleinitEx; /* Prevent compiler warnings */
    ruleinitEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_interfaceDecl != NULL) stream_interfaceDecl->free(stream_interfaceDecl);
        if (stream_classDecl != NULL) stream_classDecl->free(stream_classDecl);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end init */

/** 
 * $ANTLR start interfaceDecl
 * C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:82:1: interfaceDecl : INTERFACE_KW ID '(' formalClassParamList ')' '{' interfaceBody '}' EOF -> ^( N_IFACE_NAME ID ) ^( N_FORMAL_CLASS_PARAMS formalClassParamList ) ^( N_IFACE_BODY interfaceBody ) ;
 */
static ContainedObjectsParser_interfaceDecl_return
interfaceDecl(pContainedObjectsParser ctx)
{   
    ContainedObjectsParser_interfaceDecl_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    INTERFACE_KW3;
    pANTLR3_COMMON_TOKEN    ID4;
    pANTLR3_COMMON_TOKEN    char_literal5;
    pANTLR3_COMMON_TOKEN    char_literal7;
    pANTLR3_COMMON_TOKEN    char_literal8;
    pANTLR3_COMMON_TOKEN    char_literal10;
    pANTLR3_COMMON_TOKEN    EOF11;
    ContainedObjectsParser_formalClassParamList_return formalClassParamList6;
    #undef	RETURN_TYPE_formalClassParamList6
    #define	RETURN_TYPE_formalClassParamList6 ContainedObjectsParser_formalClassParamList_return

    ContainedObjectsParser_interfaceBody_return interfaceBody9;
    #undef	RETURN_TYPE_interfaceBody9
    #define	RETURN_TYPE_interfaceBody9 ContainedObjectsParser_interfaceBody_return

    pANTLR3_BASE_TREE INTERFACE_KW3_tree;
    pANTLR3_BASE_TREE ID4_tree;
    pANTLR3_BASE_TREE char_literal5_tree;
    pANTLR3_BASE_TREE char_literal7_tree;
    pANTLR3_BASE_TREE char_literal8_tree;
    pANTLR3_BASE_TREE char_literal10_tree;
    pANTLR3_BASE_TREE EOF11_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_INTERFACE_KW;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_ID;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_64;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_EOF;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_62;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_63;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_61;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_interfaceBody;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_formalClassParamList;
    /* Initialize rule variables
     */


    root_0 = NULL;

    INTERFACE_KW3       = NULL;
    ID4       = NULL;
    char_literal5       = NULL;
    char_literal7       = NULL;
    char_literal8       = NULL;
    char_literal10       = NULL;
    EOF11       = NULL;
    formalClassParamList6.tree = NULL;

    interfaceBody9.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    INTERFACE_KW3_tree   = NULL;
    ID4_tree   = NULL;
    char_literal5_tree   = NULL;
    char_literal7_tree   = NULL;
    char_literal8_tree   = NULL;
    char_literal10_tree   = NULL;
    EOF11_tree   = NULL;

    stream_INTERFACE_KW   = NULL;
    #define CREATE_stream_INTERFACE_KW  if (stream_INTERFACE_KW == NULL) {stream_INTERFACE_KW = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token INTERFACE_KW"); } 
    stream_ID   = NULL;
    #define CREATE_stream_ID  if (stream_ID == NULL) {stream_ID = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token ID"); } 
    stream_64   = NULL;
    #define CREATE_stream_64  if (stream_64 == NULL) {stream_64 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 64"); } 
    stream_EOF   = NULL;
    #define CREATE_stream_EOF  if (stream_EOF == NULL) {stream_EOF = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token EOF"); } 
    stream_62   = NULL;
    #define CREATE_stream_62  if (stream_62 == NULL) {stream_62 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 62"); } 
    stream_63   = NULL;
    #define CREATE_stream_63  if (stream_63 == NULL) {stream_63 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 63"); } 
    stream_61   = NULL;
    #define CREATE_stream_61  if (stream_61 == NULL) {stream_61 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 61"); } 
    stream_interfaceBody   = NULL;
    #define CREATE_stream_interfaceBody  if (stream_interfaceBody == NULL) {stream_interfaceBody = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule interfaceBody"); }
    stream_formalClassParamList   = NULL;
    #define CREATE_stream_formalClassParamList  if (stream_formalClassParamList == NULL) {stream_formalClassParamList = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule formalClassParamList"); }

    retval.tree  = NULL;
    {
        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:83:2: ( INTERFACE_KW ID '(' formalClassParamList ')' '{' interfaceBody '}' EOF -> ^( N_IFACE_NAME ID ) ^( N_FORMAL_CLASS_PARAMS formalClassParamList ) ^( N_IFACE_BODY interfaceBody ) )
        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:83:4: INTERFACE_KW ID '(' formalClassParamList ')' '{' interfaceBody '}' EOF
        {
            INTERFACE_KW3 = (pANTLR3_COMMON_TOKEN) MATCHT(INTERFACE_KW, &FOLLOW_INTERFACE_KW_in_interfaceDecl317); 
            if  (HASEXCEPTION())
            {
                goto ruleinterfaceDeclEx;
            }
             
            CREATE_stream_INTERFACE_KW; stream_INTERFACE_KW->add(stream_INTERFACE_KW, INTERFACE_KW3, NULL);

            ID4 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_interfaceDecl319); 
            if  (HASEXCEPTION())
            {
                goto ruleinterfaceDeclEx;
            }
             
            CREATE_stream_ID; stream_ID->add(stream_ID, ID4, NULL);

            char_literal5 = (pANTLR3_COMMON_TOKEN) MATCHT(61, &FOLLOW_61_in_interfaceDecl321); 
            if  (HASEXCEPTION())
            {
                goto ruleinterfaceDeclEx;
            }
             
            CREATE_stream_61; stream_61->add(stream_61, char_literal5, NULL);

            FOLLOWPUSH(FOLLOW_formalClassParamList_in_interfaceDecl323);
            formalClassParamList6=formalClassParamList(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleinterfaceDeclEx;
            }

            CREATE_stream_formalClassParamList; stream_formalClassParamList->add(stream_formalClassParamList, formalClassParamList6.tree, NULL);
            char_literal7 = (pANTLR3_COMMON_TOKEN) MATCHT(62, &FOLLOW_62_in_interfaceDecl325); 
            if  (HASEXCEPTION())
            {
                goto ruleinterfaceDeclEx;
            }
             
            CREATE_stream_62; stream_62->add(stream_62, char_literal7, NULL);

            char_literal8 = (pANTLR3_COMMON_TOKEN) MATCHT(63, &FOLLOW_63_in_interfaceDecl327); 
            if  (HASEXCEPTION())
            {
                goto ruleinterfaceDeclEx;
            }
             
            CREATE_stream_63; stream_63->add(stream_63, char_literal8, NULL);

            FOLLOWPUSH(FOLLOW_interfaceBody_in_interfaceDecl329);
            interfaceBody9=interfaceBody(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleinterfaceDeclEx;
            }

            CREATE_stream_interfaceBody; stream_interfaceBody->add(stream_interfaceBody, interfaceBody9.tree, NULL);
            char_literal10 = (pANTLR3_COMMON_TOKEN) MATCHT(64, &FOLLOW_64_in_interfaceDecl331); 
            if  (HASEXCEPTION())
            {
                goto ruleinterfaceDeclEx;
            }
             
            CREATE_stream_64; stream_64->add(stream_64, char_literal10, NULL);

            EOF11 = (pANTLR3_COMMON_TOKEN) MATCHT(EOF, &FOLLOW_EOF_in_interfaceDecl333); 
            if  (HASEXCEPTION())
            {
                goto ruleinterfaceDeclEx;
            }
             
            CREATE_stream_EOF; stream_EOF->add(stream_EOF, EOF11, NULL);


             
            /* AST REWRITE
             * elements          : formalClassParamList, ID, interfaceBody
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 84:3: -> ^( N_IFACE_NAME ID ) ^( N_FORMAL_CLASS_PARAMS formalClassParamList ) ^( N_IFACE_BODY interfaceBody )
            	{
            	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:84:6: ^( N_IFACE_NAME ID )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, N_IFACE_NAME, (pANTLR3_UINT8)"N_IFACE_NAME"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_ID == NULL ? NULL : stream_ID->nextNode(stream_ID));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }
            	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:84:25: ^( N_FORMAL_CLASS_PARAMS formalClassParamList )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, N_FORMAL_CLASS_PARAMS, (pANTLR3_UINT8)"N_FORMAL_CLASS_PARAMS"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_formalClassParamList == NULL ? NULL : stream_formalClassParamList->nextTree(stream_formalClassParamList));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }
            	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:84:71: ^( N_IFACE_BODY interfaceBody )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, N_IFACE_BODY, (pANTLR3_UINT8)"N_IFACE_BODY"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_interfaceBody == NULL ? NULL : stream_interfaceBody->nextTree(stream_interfaceBody));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleinterfaceDeclEx; /* Prevent compiler warnings */
    ruleinterfaceDeclEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_INTERFACE_KW != NULL) stream_INTERFACE_KW->free(stream_INTERFACE_KW);
        if (stream_ID != NULL) stream_ID->free(stream_ID);
        if (stream_64 != NULL) stream_64->free(stream_64);
        if (stream_EOF != NULL) stream_EOF->free(stream_EOF);
        if (stream_62 != NULL) stream_62->free(stream_62);
        if (stream_63 != NULL) stream_63->free(stream_63);
        if (stream_61 != NULL) stream_61->free(stream_61);
        if (stream_interfaceBody != NULL) stream_interfaceBody->free(stream_interfaceBody);
        if (stream_formalClassParamList != NULL) stream_formalClassParamList->free(stream_formalClassParamList);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end interfaceDecl */

/** 
 * $ANTLR start interfaceBody
 * C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:87:1: interfaceBody : ( varDef )* -> ( ^( N_VARDEF varDef ) )* ;
 */
static ContainedObjectsParser_interfaceBody_return
interfaceBody(pContainedObjectsParser ctx)
{   
    ContainedObjectsParser_interfaceBody_return retval;

    pANTLR3_BASE_TREE root_0;

    ContainedObjectsParser_varDef_return varDef12;
    #undef	RETURN_TYPE_varDef12
    #define	RETURN_TYPE_varDef12 ContainedObjectsParser_varDef_return

    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_varDef;
    /* Initialize rule variables
     */


    root_0 = NULL;

    varDef12.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;


    stream_varDef   = NULL;
    #define CREATE_stream_varDef  if (stream_varDef == NULL) {stream_varDef = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule varDef"); }

    retval.tree  = NULL;
    {
        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:88:2: ( ( varDef )* -> ( ^( N_VARDEF varDef ) )* )
        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:88:4: ( varDef )*
        {

            // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:88:4: ( varDef )*

            for (;;)
            {
                int alt2=2;
                switch ( LA(1) ) 
                {
                case CLASS_KW:
                case STATIC_KW:
                case INTEGER_KW:
                case FLOAT_KW:
                case STRING_KW:
                case ID:
                	{
                		alt2=1;
                	}
                    break;

                }

                switch (alt2) 
                {
            	case 1:
            	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:88:4: varDef
            	    {
            	        FOLLOWPUSH(FOLLOW_varDef_in_interfaceBody367);
            	        varDef12=varDef(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleinterfaceBodyEx;
            	        }

            	        CREATE_stream_varDef; stream_varDef->add(stream_varDef, varDef12.tree, NULL);

            	    }
            	    break;

            	default:
            	    goto loop2;	/* break out of the loop */
            	    break;
                }
            }
            loop2: ; /* Jump out to here if this rule does not match */


             
            /* AST REWRITE
             * elements          : varDef
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 89:3: -> ( ^( N_VARDEF varDef ) )*
            	{
            	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:89:6: ( ^( N_VARDEF varDef ) )*
            	    {
            	    	while ( (stream_varDef != NULL && stream_varDef->hasNext(stream_varDef))  )
            	    	{
            	    		// C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:89:6: ^( N_VARDEF varDef )
            	    		{
            	    		    pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	    		    root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, N_VARDEF, (pANTLR3_UINT8)"N_VARDEF"), root_1));

            	    		    ADAPTOR->addChild(ADAPTOR, root_1, stream_varDef == NULL ? NULL : stream_varDef->nextTree(stream_varDef));

            	    		    ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    		}

            	    	}
            	    	if (stream_varDef != NULL) stream_varDef->reset(stream_varDef);

            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleinterfaceBodyEx; /* Prevent compiler warnings */
    ruleinterfaceBodyEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_varDef != NULL) stream_varDef->free(stream_varDef);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end interfaceBody */

/** 
 * $ANTLR start varDef
 * C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:92:1: varDef : ( STATIC_KW )? type ID ';' -> ^( N_SCOPE ( STATIC_KW )? ) ^( N_TYPE type ) ^( N_VAR_NAME ID ) ;
 */
static ContainedObjectsParser_varDef_return
varDef(pContainedObjectsParser ctx)
{   
    ContainedObjectsParser_varDef_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    STATIC_KW13;
    pANTLR3_COMMON_TOKEN    ID15;
    pANTLR3_COMMON_TOKEN    char_literal16;
    ContainedObjectsParser_type_return type14;
    #undef	RETURN_TYPE_type14
    #define	RETURN_TYPE_type14 ContainedObjectsParser_type_return

    pANTLR3_BASE_TREE STATIC_KW13_tree;
    pANTLR3_BASE_TREE ID15_tree;
    pANTLR3_BASE_TREE char_literal16_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_STATIC_KW;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_ID;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_65;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_type;
    /* Initialize rule variables
     */


    root_0 = NULL;

    STATIC_KW13       = NULL;
    ID15       = NULL;
    char_literal16       = NULL;
    type14.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    STATIC_KW13_tree   = NULL;
    ID15_tree   = NULL;
    char_literal16_tree   = NULL;

    stream_STATIC_KW   = NULL;
    #define CREATE_stream_STATIC_KW  if (stream_STATIC_KW == NULL) {stream_STATIC_KW = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token STATIC_KW"); } 
    stream_ID   = NULL;
    #define CREATE_stream_ID  if (stream_ID == NULL) {stream_ID = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token ID"); } 
    stream_65   = NULL;
    #define CREATE_stream_65  if (stream_65 == NULL) {stream_65 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 65"); } 
    stream_type   = NULL;
    #define CREATE_stream_type  if (stream_type == NULL) {stream_type = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule type"); }

    retval.tree  = NULL;
    {
        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:93:2: ( ( STATIC_KW )? type ID ';' -> ^( N_SCOPE ( STATIC_KW )? ) ^( N_TYPE type ) ^( N_VAR_NAME ID ) )
        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:93:4: ( STATIC_KW )? type ID ';'
        {

            // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:93:4: ( STATIC_KW )?
            {
                int alt3=2;
                switch ( LA(1) ) 
                {
                    case STATIC_KW:
                    	{
                    		alt3=1;
                    	}
                        break;
                }

                switch (alt3) 
                {
            	case 1:
            	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:93:4: STATIC_KW
            	    {
            	        STATIC_KW13 = (pANTLR3_COMMON_TOKEN) MATCHT(STATIC_KW, &FOLLOW_STATIC_KW_in_varDef391); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevarDefEx;
            	        }
            	         
            	        CREATE_stream_STATIC_KW; stream_STATIC_KW->add(stream_STATIC_KW, STATIC_KW13, NULL);


            	    }
            	    break;

                }
            }
            FOLLOWPUSH(FOLLOW_type_in_varDef394);
            type14=type(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulevarDefEx;
            }

            CREATE_stream_type; stream_type->add(stream_type, type14.tree, NULL);
            ID15 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_varDef396); 
            if  (HASEXCEPTION())
            {
                goto rulevarDefEx;
            }
             
            CREATE_stream_ID; stream_ID->add(stream_ID, ID15, NULL);

            char_literal16 = (pANTLR3_COMMON_TOKEN) MATCHT(65, &FOLLOW_65_in_varDef398); 
            if  (HASEXCEPTION())
            {
                goto rulevarDefEx;
            }
             
            CREATE_stream_65; stream_65->add(stream_65, char_literal16, NULL);


             
            /* AST REWRITE
             * elements          : ID, STATIC_KW, type
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 94:3: -> ^( N_SCOPE ( STATIC_KW )? ) ^( N_TYPE type ) ^( N_VAR_NAME ID )
            	{
            	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:94:6: ^( N_SCOPE ( STATIC_KW )? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, N_SCOPE, (pANTLR3_UINT8)"N_SCOPE"), root_1));

            	        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:94:16: ( STATIC_KW )?
            	        {
            	        	if ( (stream_STATIC_KW != NULL && stream_STATIC_KW->hasNext(stream_STATIC_KW))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_STATIC_KW == NULL ? NULL : stream_STATIC_KW->nextNode(stream_STATIC_KW));

            	        	}
            	        	if ( stream_STATIC_KW != NULL) stream_STATIC_KW->reset(stream_STATIC_KW);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }
            	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:94:28: ^( N_TYPE type )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, N_TYPE, (pANTLR3_UINT8)"N_TYPE"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_type == NULL ? NULL : stream_type->nextTree(stream_type));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }
            	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:94:43: ^( N_VAR_NAME ID )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, N_VAR_NAME, (pANTLR3_UINT8)"N_VAR_NAME"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_ID == NULL ? NULL : stream_ID->nextNode(stream_ID));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevarDefEx; /* Prevent compiler warnings */
    rulevarDefEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_STATIC_KW != NULL) stream_STATIC_KW->free(stream_STATIC_KW);
        if (stream_ID != NULL) stream_ID->free(stream_ID);
        if (stream_65 != NULL) stream_65->free(stream_65);
        if (stream_type != NULL) stream_type->free(stream_type);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end varDef */

/** 
 * $ANTLR start classDecl
 * C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:99:1: classDecl : CLASS_KW ID '(' formalClassParamList ')' implementsDecl '{' classBody '}' EOF -> ^( N_CLASS_NAME ID ) ^( N_FORMAL_CLASS_PARAMS formalClassParamList ) ^( N_IMPLEMENTS_DECL implementsDecl ) ^( N_CLASS_BODY classBody ) ;
 */
static ContainedObjectsParser_classDecl_return
classDecl(pContainedObjectsParser ctx)
{   
    ContainedObjectsParser_classDecl_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    CLASS_KW17;
    pANTLR3_COMMON_TOKEN    ID18;
    pANTLR3_COMMON_TOKEN    char_literal19;
    pANTLR3_COMMON_TOKEN    char_literal21;
    pANTLR3_COMMON_TOKEN    char_literal23;
    pANTLR3_COMMON_TOKEN    char_literal25;
    pANTLR3_COMMON_TOKEN    EOF26;
    ContainedObjectsParser_formalClassParamList_return formalClassParamList20;
    #undef	RETURN_TYPE_formalClassParamList20
    #define	RETURN_TYPE_formalClassParamList20 ContainedObjectsParser_formalClassParamList_return

    ContainedObjectsParser_implementsDecl_return implementsDecl22;
    #undef	RETURN_TYPE_implementsDecl22
    #define	RETURN_TYPE_implementsDecl22 ContainedObjectsParser_implementsDecl_return

    ContainedObjectsParser_classBody_return classBody24;
    #undef	RETURN_TYPE_classBody24
    #define	RETURN_TYPE_classBody24 ContainedObjectsParser_classBody_return

    pANTLR3_BASE_TREE CLASS_KW17_tree;
    pANTLR3_BASE_TREE ID18_tree;
    pANTLR3_BASE_TREE char_literal19_tree;
    pANTLR3_BASE_TREE char_literal21_tree;
    pANTLR3_BASE_TREE char_literal23_tree;
    pANTLR3_BASE_TREE char_literal25_tree;
    pANTLR3_BASE_TREE EOF26_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_CLASS_KW;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_ID;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_64;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_EOF;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_62;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_63;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_61;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_formalClassParamList;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_implementsDecl;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_classBody;
    /* Initialize rule variables
     */


    root_0 = NULL;

    CLASS_KW17       = NULL;
    ID18       = NULL;
    char_literal19       = NULL;
    char_literal21       = NULL;
    char_literal23       = NULL;
    char_literal25       = NULL;
    EOF26       = NULL;
    formalClassParamList20.tree = NULL;

    implementsDecl22.tree = NULL;

    classBody24.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    CLASS_KW17_tree   = NULL;
    ID18_tree   = NULL;
    char_literal19_tree   = NULL;
    char_literal21_tree   = NULL;
    char_literal23_tree   = NULL;
    char_literal25_tree   = NULL;
    EOF26_tree   = NULL;

    stream_CLASS_KW   = NULL;
    #define CREATE_stream_CLASS_KW  if (stream_CLASS_KW == NULL) {stream_CLASS_KW = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token CLASS_KW"); } 
    stream_ID   = NULL;
    #define CREATE_stream_ID  if (stream_ID == NULL) {stream_ID = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token ID"); } 
    stream_64   = NULL;
    #define CREATE_stream_64  if (stream_64 == NULL) {stream_64 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 64"); } 
    stream_EOF   = NULL;
    #define CREATE_stream_EOF  if (stream_EOF == NULL) {stream_EOF = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token EOF"); } 
    stream_62   = NULL;
    #define CREATE_stream_62  if (stream_62 == NULL) {stream_62 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 62"); } 
    stream_63   = NULL;
    #define CREATE_stream_63  if (stream_63 == NULL) {stream_63 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 63"); } 
    stream_61   = NULL;
    #define CREATE_stream_61  if (stream_61 == NULL) {stream_61 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 61"); } 
    stream_formalClassParamList   = NULL;
    #define CREATE_stream_formalClassParamList  if (stream_formalClassParamList == NULL) {stream_formalClassParamList = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule formalClassParamList"); }
    stream_implementsDecl   = NULL;
    #define CREATE_stream_implementsDecl  if (stream_implementsDecl == NULL) {stream_implementsDecl = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule implementsDecl"); }
    stream_classBody   = NULL;
    #define CREATE_stream_classBody  if (stream_classBody == NULL) {stream_classBody = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule classBody"); }

    retval.tree  = NULL;
    {
        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:100:2: ( CLASS_KW ID '(' formalClassParamList ')' implementsDecl '{' classBody '}' EOF -> ^( N_CLASS_NAME ID ) ^( N_FORMAL_CLASS_PARAMS formalClassParamList ) ^( N_IMPLEMENTS_DECL implementsDecl ) ^( N_CLASS_BODY classBody ) )
        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:100:4: CLASS_KW ID '(' formalClassParamList ')' implementsDecl '{' classBody '}' EOF
        {
            CLASS_KW17 = (pANTLR3_COMMON_TOKEN) MATCHT(CLASS_KW, &FOLLOW_CLASS_KW_in_classDecl435); 
            if  (HASEXCEPTION())
            {
                goto ruleclassDeclEx;
            }
             
            CREATE_stream_CLASS_KW; stream_CLASS_KW->add(stream_CLASS_KW, CLASS_KW17, NULL);

            ID18 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_classDecl437); 
            if  (HASEXCEPTION())
            {
                goto ruleclassDeclEx;
            }
             
            CREATE_stream_ID; stream_ID->add(stream_ID, ID18, NULL);

            char_literal19 = (pANTLR3_COMMON_TOKEN) MATCHT(61, &FOLLOW_61_in_classDecl439); 
            if  (HASEXCEPTION())
            {
                goto ruleclassDeclEx;
            }
             
            CREATE_stream_61; stream_61->add(stream_61, char_literal19, NULL);

            FOLLOWPUSH(FOLLOW_formalClassParamList_in_classDecl441);
            formalClassParamList20=formalClassParamList(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleclassDeclEx;
            }

            CREATE_stream_formalClassParamList; stream_formalClassParamList->add(stream_formalClassParamList, formalClassParamList20.tree, NULL);
            char_literal21 = (pANTLR3_COMMON_TOKEN) MATCHT(62, &FOLLOW_62_in_classDecl443); 
            if  (HASEXCEPTION())
            {
                goto ruleclassDeclEx;
            }
             
            CREATE_stream_62; stream_62->add(stream_62, char_literal21, NULL);

            FOLLOWPUSH(FOLLOW_implementsDecl_in_classDecl445);
            implementsDecl22=implementsDecl(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleclassDeclEx;
            }

            CREATE_stream_implementsDecl; stream_implementsDecl->add(stream_implementsDecl, implementsDecl22.tree, NULL);
            char_literal23 = (pANTLR3_COMMON_TOKEN) MATCHT(63, &FOLLOW_63_in_classDecl447); 
            if  (HASEXCEPTION())
            {
                goto ruleclassDeclEx;
            }
             
            CREATE_stream_63; stream_63->add(stream_63, char_literal23, NULL);

            FOLLOWPUSH(FOLLOW_classBody_in_classDecl449);
            classBody24=classBody(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleclassDeclEx;
            }

            CREATE_stream_classBody; stream_classBody->add(stream_classBody, classBody24.tree, NULL);
            char_literal25 = (pANTLR3_COMMON_TOKEN) MATCHT(64, &FOLLOW_64_in_classDecl451); 
            if  (HASEXCEPTION())
            {
                goto ruleclassDeclEx;
            }
             
            CREATE_stream_64; stream_64->add(stream_64, char_literal25, NULL);

            EOF26 = (pANTLR3_COMMON_TOKEN) MATCHT(EOF, &FOLLOW_EOF_in_classDecl453); 
            if  (HASEXCEPTION())
            {
                goto ruleclassDeclEx;
            }
             
            CREATE_stream_EOF; stream_EOF->add(stream_EOF, EOF26, NULL);


             
            /* AST REWRITE
             * elements          : ID, classBody, formalClassParamList, implementsDecl
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 101:3: -> ^( N_CLASS_NAME ID ) ^( N_FORMAL_CLASS_PARAMS formalClassParamList ) ^( N_IMPLEMENTS_DECL implementsDecl ) ^( N_CLASS_BODY classBody )
            	{
            	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:101:6: ^( N_CLASS_NAME ID )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, N_CLASS_NAME, (pANTLR3_UINT8)"N_CLASS_NAME"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_ID == NULL ? NULL : stream_ID->nextNode(stream_ID));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }
            	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:101:25: ^( N_FORMAL_CLASS_PARAMS formalClassParamList )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, N_FORMAL_CLASS_PARAMS, (pANTLR3_UINT8)"N_FORMAL_CLASS_PARAMS"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_formalClassParamList == NULL ? NULL : stream_formalClassParamList->nextTree(stream_formalClassParamList));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }
            	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:101:71: ^( N_IMPLEMENTS_DECL implementsDecl )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, N_IMPLEMENTS_DECL, (pANTLR3_UINT8)"N_IMPLEMENTS_DECL"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_implementsDecl == NULL ? NULL : stream_implementsDecl->nextTree(stream_implementsDecl));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }
            	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:101:107: ^( N_CLASS_BODY classBody )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, N_CLASS_BODY, (pANTLR3_UINT8)"N_CLASS_BODY"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_classBody == NULL ? NULL : stream_classBody->nextTree(stream_classBody));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleclassDeclEx; /* Prevent compiler warnings */
    ruleclassDeclEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_CLASS_KW != NULL) stream_CLASS_KW->free(stream_CLASS_KW);
        if (stream_ID != NULL) stream_ID->free(stream_ID);
        if (stream_64 != NULL) stream_64->free(stream_64);
        if (stream_EOF != NULL) stream_EOF->free(stream_EOF);
        if (stream_62 != NULL) stream_62->free(stream_62);
        if (stream_63 != NULL) stream_63->free(stream_63);
        if (stream_61 != NULL) stream_61->free(stream_61);
        if (stream_formalClassParamList != NULL) stream_formalClassParamList->free(stream_formalClassParamList);
        if (stream_implementsDecl != NULL) stream_implementsDecl->free(stream_implementsDecl);
        if (stream_classBody != NULL) stream_classBody->free(stream_classBody);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end classDecl */

/** 
 * $ANTLR start formalClassParamList
 * C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:104:1: formalClassParamList : ( formalClassParam ( ',' formalClassParam )* )? -> ( ^( N_FORMAL_CLASS_PARAM formalClassParam ) )* ;
 */
static ContainedObjectsParser_formalClassParamList_return
formalClassParamList(pContainedObjectsParser ctx)
{   
    ContainedObjectsParser_formalClassParamList_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal28;
    ContainedObjectsParser_formalClassParam_return formalClassParam27;
    #undef	RETURN_TYPE_formalClassParam27
    #define	RETURN_TYPE_formalClassParam27 ContainedObjectsParser_formalClassParam_return

    ContainedObjectsParser_formalClassParam_return formalClassParam29;
    #undef	RETURN_TYPE_formalClassParam29
    #define	RETURN_TYPE_formalClassParam29 ContainedObjectsParser_formalClassParam_return

    pANTLR3_BASE_TREE char_literal28_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_66;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_formalClassParam;
    /* Initialize rule variables
     */


    root_0 = NULL;

    char_literal28       = NULL;
    formalClassParam27.tree = NULL;

    formalClassParam29.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal28_tree   = NULL;

    stream_66   = NULL;
    #define CREATE_stream_66  if (stream_66 == NULL) {stream_66 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 66"); } 
    stream_formalClassParam   = NULL;
    #define CREATE_stream_formalClassParam  if (stream_formalClassParam == NULL) {stream_formalClassParam = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule formalClassParam"); }

    retval.tree  = NULL;
    {
        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:105:2: ( ( formalClassParam ( ',' formalClassParam )* )? -> ( ^( N_FORMAL_CLASS_PARAM formalClassParam ) )* )
        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:105:4: ( formalClassParam ( ',' formalClassParam )* )?
        {

            // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:105:4: ( formalClassParam ( ',' formalClassParam )* )?
            {
                int alt5=2;
                switch ( LA(1) ) 
                {
                    case CLASS_KW:
                    case INTEGER_KW:
                    case FLOAT_KW:
                    case STRING_KW:
                    case ID:
                    	{
                    		alt5=1;
                    	}
                        break;
                }

                switch (alt5) 
                {
            	case 1:
            	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:105:5: formalClassParam ( ',' formalClassParam )*
            	    {
            	        FOLLOWPUSH(FOLLOW_formalClassParam_in_formalClassParamList494);
            	        formalClassParam27=formalClassParam(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleformalClassParamListEx;
            	        }

            	        CREATE_stream_formalClassParam; stream_formalClassParam->add(stream_formalClassParam, formalClassParam27.tree, NULL);

            	        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:105:22: ( ',' formalClassParam )*

            	        for (;;)
            	        {
            	            int alt4=2;
            	            switch ( LA(1) ) 
            	            {
            	            case 66:
            	            	{
            	            		alt4=1;
            	            	}
            	                break;

            	            }

            	            switch (alt4) 
            	            {
            	        	case 1:
            	        	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:105:23: ',' formalClassParam
            	        	    {
            	        	        char_literal28 = (pANTLR3_COMMON_TOKEN) MATCHT(66, &FOLLOW_66_in_formalClassParamList497); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleformalClassParamListEx;
            	        	        }
            	        	         
            	        	        CREATE_stream_66; stream_66->add(stream_66, char_literal28, NULL);

            	        	        FOLLOWPUSH(FOLLOW_formalClassParam_in_formalClassParamList499);
            	        	        formalClassParam29=formalClassParam(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleformalClassParamListEx;
            	        	        }

            	        	        CREATE_stream_formalClassParam; stream_formalClassParam->add(stream_formalClassParam, formalClassParam29.tree, NULL);

            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop4;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop4: ; /* Jump out to here if this rule does not match */


            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : formalClassParam
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 106:3: -> ( ^( N_FORMAL_CLASS_PARAM formalClassParam ) )*
            	{
            	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:106:6: ( ^( N_FORMAL_CLASS_PARAM formalClassParam ) )*
            	    {
            	    	while ( (stream_formalClassParam != NULL && stream_formalClassParam->hasNext(stream_formalClassParam))  )
            	    	{
            	    		// C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:106:6: ^( N_FORMAL_CLASS_PARAM formalClassParam )
            	    		{
            	    		    pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	    		    root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, N_FORMAL_CLASS_PARAM, (pANTLR3_UINT8)"N_FORMAL_CLASS_PARAM"), root_1));

            	    		    ADAPTOR->addChild(ADAPTOR, root_1, stream_formalClassParam == NULL ? NULL : stream_formalClassParam->nextTree(stream_formalClassParam));

            	    		    ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    		}

            	    	}
            	    	if (stream_formalClassParam != NULL) stream_formalClassParam->reset(stream_formalClassParam);

            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleformalClassParamListEx; /* Prevent compiler warnings */
    ruleformalClassParamListEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_66 != NULL) stream_66->free(stream_66);
        if (stream_formalClassParam != NULL) stream_formalClassParam->free(stream_formalClassParam);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end formalClassParamList */

/** 
 * $ANTLR start formalClassParam
 * C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:109:1: formalClassParam : type ID -> ^( N_TYPE type ) ^( N_VAR_NAME ID ) ;
 */
static ContainedObjectsParser_formalClassParam_return
formalClassParam(pContainedObjectsParser ctx)
{   
    ContainedObjectsParser_formalClassParam_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    ID31;
    ContainedObjectsParser_type_return type30;
    #undef	RETURN_TYPE_type30
    #define	RETURN_TYPE_type30 ContainedObjectsParser_type_return

    pANTLR3_BASE_TREE ID31_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_ID;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_type;
    /* Initialize rule variables
     */


    root_0 = NULL;

    ID31       = NULL;
    type30.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    ID31_tree   = NULL;

    stream_ID   = NULL;
    #define CREATE_stream_ID  if (stream_ID == NULL) {stream_ID = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token ID"); } 
    stream_type   = NULL;
    #define CREATE_stream_type  if (stream_type == NULL) {stream_type = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule type"); }

    retval.tree  = NULL;
    {
        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:109:18: ( type ID -> ^( N_TYPE type ) ^( N_VAR_NAME ID ) )
        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:109:20: type ID
        {
            FOLLOWPUSH(FOLLOW_type_in_formalClassParam524);
            type30=type(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleformalClassParamEx;
            }

            CREATE_stream_type; stream_type->add(stream_type, type30.tree, NULL);
            ID31 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_formalClassParam526); 
            if  (HASEXCEPTION())
            {
                goto ruleformalClassParamEx;
            }
             
            CREATE_stream_ID; stream_ID->add(stream_ID, ID31, NULL);


             
            /* AST REWRITE
             * elements          : ID, type
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 110:3: -> ^( N_TYPE type ) ^( N_VAR_NAME ID )
            	{
            	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:110:6: ^( N_TYPE type )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, N_TYPE, (pANTLR3_UINT8)"N_TYPE"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_type == NULL ? NULL : stream_type->nextTree(stream_type));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }
            	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:110:21: ^( N_VAR_NAME ID )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, N_VAR_NAME, (pANTLR3_UINT8)"N_VAR_NAME"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_ID == NULL ? NULL : stream_ID->nextNode(stream_ID));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleformalClassParamEx; /* Prevent compiler warnings */
    ruleformalClassParamEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_ID != NULL) stream_ID->free(stream_ID);
        if (stream_type != NULL) stream_type->free(stream_type);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end formalClassParam */

/** 
 * $ANTLR start implementsDecl
 * C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:113:1: implementsDecl : ( IMPLEMENTS_KW ID ( ',' ID )* )? -> ( ^( N_IMPLEMENTED_IFACE ID ) )* ;
 */
static ContainedObjectsParser_implementsDecl_return
implementsDecl(pContainedObjectsParser ctx)
{   
    ContainedObjectsParser_implementsDecl_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    IMPLEMENTS_KW32;
    pANTLR3_COMMON_TOKEN    ID33;
    pANTLR3_COMMON_TOKEN    char_literal34;
    pANTLR3_COMMON_TOKEN    ID35;

    pANTLR3_BASE_TREE IMPLEMENTS_KW32_tree;
    pANTLR3_BASE_TREE ID33_tree;
    pANTLR3_BASE_TREE char_literal34_tree;
    pANTLR3_BASE_TREE ID35_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_66;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_IMPLEMENTS_KW;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_ID;

    /* Initialize rule variables
     */


    root_0 = NULL;

    IMPLEMENTS_KW32       = NULL;
    ID33       = NULL;
    char_literal34       = NULL;
    ID35       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    IMPLEMENTS_KW32_tree   = NULL;
    ID33_tree   = NULL;
    char_literal34_tree   = NULL;
    ID35_tree   = NULL;

    stream_66   = NULL;
    #define CREATE_stream_66  if (stream_66 == NULL) {stream_66 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 66"); } 
    stream_IMPLEMENTS_KW   = NULL;
    #define CREATE_stream_IMPLEMENTS_KW  if (stream_IMPLEMENTS_KW == NULL) {stream_IMPLEMENTS_KW = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token IMPLEMENTS_KW"); } 
    stream_ID   = NULL;
    #define CREATE_stream_ID  if (stream_ID == NULL) {stream_ID = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token ID"); } 

    retval.tree  = NULL;
    {
        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:114:2: ( ( IMPLEMENTS_KW ID ( ',' ID )* )? -> ( ^( N_IMPLEMENTED_IFACE ID ) )* )
        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:114:4: ( IMPLEMENTS_KW ID ( ',' ID )* )?
        {

            // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:114:4: ( IMPLEMENTS_KW ID ( ',' ID )* )?
            {
                int alt7=2;
                switch ( LA(1) ) 
                {
                    case IMPLEMENTS_KW:
                    	{
                    		alt7=1;
                    	}
                        break;
                }

                switch (alt7) 
                {
            	case 1:
            	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:114:5: IMPLEMENTS_KW ID ( ',' ID )*
            	    {
            	        IMPLEMENTS_KW32 = (pANTLR3_COMMON_TOKEN) MATCHT(IMPLEMENTS_KW, &FOLLOW_IMPLEMENTS_KW_in_implementsDecl556); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleimplementsDeclEx;
            	        }
            	         
            	        CREATE_stream_IMPLEMENTS_KW; stream_IMPLEMENTS_KW->add(stream_IMPLEMENTS_KW, IMPLEMENTS_KW32, NULL);

            	        ID33 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_implementsDecl558); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleimplementsDeclEx;
            	        }
            	         
            	        CREATE_stream_ID; stream_ID->add(stream_ID, ID33, NULL);


            	        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:114:22: ( ',' ID )*

            	        for (;;)
            	        {
            	            int alt6=2;
            	            switch ( LA(1) ) 
            	            {
            	            case 66:
            	            	{
            	            		alt6=1;
            	            	}
            	                break;

            	            }

            	            switch (alt6) 
            	            {
            	        	case 1:
            	        	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:114:23: ',' ID
            	        	    {
            	        	        char_literal34 = (pANTLR3_COMMON_TOKEN) MATCHT(66, &FOLLOW_66_in_implementsDecl561); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleimplementsDeclEx;
            	        	        }
            	        	         
            	        	        CREATE_stream_66; stream_66->add(stream_66, char_literal34, NULL);

            	        	        ID35 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_implementsDecl563); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleimplementsDeclEx;
            	        	        }
            	        	         
            	        	        CREATE_stream_ID; stream_ID->add(stream_ID, ID35, NULL);


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop6;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop6: ; /* Jump out to here if this rule does not match */


            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : ID
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 115:3: -> ( ^( N_IMPLEMENTED_IFACE ID ) )*
            	{
            	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:115:6: ( ^( N_IMPLEMENTED_IFACE ID ) )*
            	    {
            	    	while ( (stream_ID != NULL && stream_ID->hasNext(stream_ID))  )
            	    	{
            	    		// C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:115:6: ^( N_IMPLEMENTED_IFACE ID )
            	    		{
            	    		    pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	    		    root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, N_IMPLEMENTED_IFACE, (pANTLR3_UINT8)"N_IMPLEMENTED_IFACE"), root_1));

            	    		    ADAPTOR->addChild(ADAPTOR, root_1, stream_ID == NULL ? NULL : stream_ID->nextNode(stream_ID));

            	    		    ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    		}

            	    	}
            	    	if (stream_ID != NULL) stream_ID->reset(stream_ID);

            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleimplementsDeclEx; /* Prevent compiler warnings */
    ruleimplementsDeclEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_66 != NULL) stream_66->free(stream_66);
        if (stream_IMPLEMENTS_KW != NULL) stream_IMPLEMENTS_KW->free(stream_IMPLEMENTS_KW);
        if (stream_ID != NULL) stream_ID->free(stream_ID);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end implementsDecl */

/** 
 * $ANTLR start classBody
 * C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:118:1: classBody : ( varDefAssign )* -> ( ^( N_VARDEF_ASSIGN varDefAssign ) )* ;
 */
static ContainedObjectsParser_classBody_return
classBody(pContainedObjectsParser ctx)
{   
    ContainedObjectsParser_classBody_return retval;

    pANTLR3_BASE_TREE root_0;

    ContainedObjectsParser_varDefAssign_return varDefAssign36;
    #undef	RETURN_TYPE_varDefAssign36
    #define	RETURN_TYPE_varDefAssign36 ContainedObjectsParser_varDefAssign_return

    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_varDefAssign;
    /* Initialize rule variables
     */


    root_0 = NULL;

    varDefAssign36.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;


    stream_varDefAssign   = NULL;
    #define CREATE_stream_varDefAssign  if (stream_varDefAssign == NULL) {stream_varDefAssign = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule varDefAssign"); }

    retval.tree  = NULL;
    {
        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:119:2: ( ( varDefAssign )* -> ( ^( N_VARDEF_ASSIGN varDefAssign ) )* )
        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:119:4: ( varDefAssign )*
        {

            // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:119:4: ( varDefAssign )*

            for (;;)
            {
                int alt8=2;
                switch ( LA(1) ) 
                {
                case CLASS_KW:
                case STATIC_KW:
                case INTEGER_KW:
                case FLOAT_KW:
                case STRING_KW:
                case ID:
                	{
                		alt8=1;
                	}
                    break;

                }

                switch (alt8) 
                {
            	case 1:
            	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:119:4: varDefAssign
            	    {
            	        FOLLOWPUSH(FOLLOW_varDefAssign_in_classBody589);
            	        varDefAssign36=varDefAssign(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleclassBodyEx;
            	        }

            	        CREATE_stream_varDefAssign; stream_varDefAssign->add(stream_varDefAssign, varDefAssign36.tree, NULL);

            	    }
            	    break;

            	default:
            	    goto loop8;	/* break out of the loop */
            	    break;
                }
            }
            loop8: ; /* Jump out to here if this rule does not match */


             
            /* AST REWRITE
             * elements          : varDefAssign
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 120:3: -> ( ^( N_VARDEF_ASSIGN varDefAssign ) )*
            	{
            	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:120:6: ( ^( N_VARDEF_ASSIGN varDefAssign ) )*
            	    {
            	    	while ( (stream_varDefAssign != NULL && stream_varDefAssign->hasNext(stream_varDefAssign))  )
            	    	{
            	    		// C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:120:6: ^( N_VARDEF_ASSIGN varDefAssign )
            	    		{
            	    		    pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	    		    root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, N_VARDEF_ASSIGN, (pANTLR3_UINT8)"N_VARDEF_ASSIGN"), root_1));

            	    		    ADAPTOR->addChild(ADAPTOR, root_1, stream_varDefAssign == NULL ? NULL : stream_varDefAssign->nextTree(stream_varDefAssign));

            	    		    ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    		}

            	    	}
            	    	if (stream_varDefAssign != NULL) stream_varDefAssign->reset(stream_varDefAssign);

            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleclassBodyEx; /* Prevent compiler warnings */
    ruleclassBodyEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_varDefAssign != NULL) stream_varDefAssign->free(stream_varDefAssign);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end classBody */

/** 
 * $ANTLR start varDefAssign
 * C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:123:1: varDefAssign : ( STATIC_KW )? type ID '=' value ';' -> ^( N_SCOPE ( STATIC_KW )? ) ^( N_TYPE type ) ^( N_VAR_NAME ID ) ^( N_VALUE value ) ;
 */
static ContainedObjectsParser_varDefAssign_return
varDefAssign(pContainedObjectsParser ctx)
{   
    ContainedObjectsParser_varDefAssign_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    STATIC_KW37;
    pANTLR3_COMMON_TOKEN    ID39;
    pANTLR3_COMMON_TOKEN    char_literal40;
    pANTLR3_COMMON_TOKEN    char_literal42;
    ContainedObjectsParser_type_return type38;
    #undef	RETURN_TYPE_type38
    #define	RETURN_TYPE_type38 ContainedObjectsParser_type_return

    ContainedObjectsParser_value_return value41;
    #undef	RETURN_TYPE_value41
    #define	RETURN_TYPE_value41 ContainedObjectsParser_value_return

    pANTLR3_BASE_TREE STATIC_KW37_tree;
    pANTLR3_BASE_TREE ID39_tree;
    pANTLR3_BASE_TREE char_literal40_tree;
    pANTLR3_BASE_TREE char_literal42_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_67;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_STATIC_KW;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_ID;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_65;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_value;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_type;
    /* Initialize rule variables
     */


    root_0 = NULL;

    STATIC_KW37       = NULL;
    ID39       = NULL;
    char_literal40       = NULL;
    char_literal42       = NULL;
    type38.tree = NULL;

    value41.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    STATIC_KW37_tree   = NULL;
    ID39_tree   = NULL;
    char_literal40_tree   = NULL;
    char_literal42_tree   = NULL;

    stream_67   = NULL;
    #define CREATE_stream_67  if (stream_67 == NULL) {stream_67 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 67"); } 
    stream_STATIC_KW   = NULL;
    #define CREATE_stream_STATIC_KW  if (stream_STATIC_KW == NULL) {stream_STATIC_KW = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token STATIC_KW"); } 
    stream_ID   = NULL;
    #define CREATE_stream_ID  if (stream_ID == NULL) {stream_ID = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token ID"); } 
    stream_65   = NULL;
    #define CREATE_stream_65  if (stream_65 == NULL) {stream_65 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 65"); } 
    stream_value   = NULL;
    #define CREATE_stream_value  if (stream_value == NULL) {stream_value = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule value"); }
    stream_type   = NULL;
    #define CREATE_stream_type  if (stream_type == NULL) {stream_type = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule type"); }

    retval.tree  = NULL;
    {
        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:124:2: ( ( STATIC_KW )? type ID '=' value ';' -> ^( N_SCOPE ( STATIC_KW )? ) ^( N_TYPE type ) ^( N_VAR_NAME ID ) ^( N_VALUE value ) )
        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:124:4: ( STATIC_KW )? type ID '=' value ';'
        {

            // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:124:4: ( STATIC_KW )?
            {
                int alt9=2;
                switch ( LA(1) ) 
                {
                    case STATIC_KW:
                    	{
                    		alt9=1;
                    	}
                        break;
                }

                switch (alt9) 
                {
            	case 1:
            	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:124:4: STATIC_KW
            	    {
            	        STATIC_KW37 = (pANTLR3_COMMON_TOKEN) MATCHT(STATIC_KW, &FOLLOW_STATIC_KW_in_varDefAssign612); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevarDefAssignEx;
            	        }
            	         
            	        CREATE_stream_STATIC_KW; stream_STATIC_KW->add(stream_STATIC_KW, STATIC_KW37, NULL);


            	    }
            	    break;

                }
            }
            FOLLOWPUSH(FOLLOW_type_in_varDefAssign615);
            type38=type(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulevarDefAssignEx;
            }

            CREATE_stream_type; stream_type->add(stream_type, type38.tree, NULL);
            ID39 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_varDefAssign617); 
            if  (HASEXCEPTION())
            {
                goto rulevarDefAssignEx;
            }
             
            CREATE_stream_ID; stream_ID->add(stream_ID, ID39, NULL);

            char_literal40 = (pANTLR3_COMMON_TOKEN) MATCHT(67, &FOLLOW_67_in_varDefAssign619); 
            if  (HASEXCEPTION())
            {
                goto rulevarDefAssignEx;
            }
             
            CREATE_stream_67; stream_67->add(stream_67, char_literal40, NULL);

            FOLLOWPUSH(FOLLOW_value_in_varDefAssign621);
            value41=value(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulevarDefAssignEx;
            }

            CREATE_stream_value; stream_value->add(stream_value, value41.tree, NULL);
            char_literal42 = (pANTLR3_COMMON_TOKEN) MATCHT(65, &FOLLOW_65_in_varDefAssign623); 
            if  (HASEXCEPTION())
            {
                goto rulevarDefAssignEx;
            }
             
            CREATE_stream_65; stream_65->add(stream_65, char_literal42, NULL);


             
            /* AST REWRITE
             * elements          : ID, value, type, STATIC_KW
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 125:3: -> ^( N_SCOPE ( STATIC_KW )? ) ^( N_TYPE type ) ^( N_VAR_NAME ID ) ^( N_VALUE value )
            	{
            	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:125:6: ^( N_SCOPE ( STATIC_KW )? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, N_SCOPE, (pANTLR3_UINT8)"N_SCOPE"), root_1));

            	        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:125:16: ( STATIC_KW )?
            	        {
            	        	if ( (stream_STATIC_KW != NULL && stream_STATIC_KW->hasNext(stream_STATIC_KW))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_STATIC_KW == NULL ? NULL : stream_STATIC_KW->nextNode(stream_STATIC_KW));

            	        	}
            	        	if ( stream_STATIC_KW != NULL) stream_STATIC_KW->reset(stream_STATIC_KW);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }
            	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:125:28: ^( N_TYPE type )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, N_TYPE, (pANTLR3_UINT8)"N_TYPE"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_type == NULL ? NULL : stream_type->nextTree(stream_type));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }
            	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:125:43: ^( N_VAR_NAME ID )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, N_VAR_NAME, (pANTLR3_UINT8)"N_VAR_NAME"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_ID == NULL ? NULL : stream_ID->nextNode(stream_ID));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }
            	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:125:60: ^( N_VALUE value )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, N_VALUE, (pANTLR3_UINT8)"N_VALUE"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_value == NULL ? NULL : stream_value->nextTree(stream_value));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevarDefAssignEx; /* Prevent compiler warnings */
    rulevarDefAssignEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_67 != NULL) stream_67->free(stream_67);
        if (stream_STATIC_KW != NULL) stream_STATIC_KW->free(stream_STATIC_KW);
        if (stream_ID != NULL) stream_ID->free(stream_ID);
        if (stream_65 != NULL) stream_65->free(stream_65);
        if (stream_value != NULL) stream_value->free(stream_value);
        if (stream_type != NULL) stream_type->free(stream_type);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end varDefAssign */

/** 
 * $ANTLR start actualParamList
 * C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:128:1: actualParamList : ( actualParam ( ',' actualParam )* )? -> ( ^( N_ACTUAL_PARAM actualParam ) )* ;
 */
static ContainedObjectsParser_actualParamList_return
actualParamList(pContainedObjectsParser ctx)
{   
    ContainedObjectsParser_actualParamList_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal44;
    ContainedObjectsParser_actualParam_return actualParam43;
    #undef	RETURN_TYPE_actualParam43
    #define	RETURN_TYPE_actualParam43 ContainedObjectsParser_actualParam_return

    ContainedObjectsParser_actualParam_return actualParam45;
    #undef	RETURN_TYPE_actualParam45
    #define	RETURN_TYPE_actualParam45 ContainedObjectsParser_actualParam_return

    pANTLR3_BASE_TREE char_literal44_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_66;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_actualParam;
    /* Initialize rule variables
     */


    root_0 = NULL;

    char_literal44       = NULL;
    actualParam43.tree = NULL;

    actualParam45.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal44_tree   = NULL;

    stream_66   = NULL;
    #define CREATE_stream_66  if (stream_66 == NULL) {stream_66 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 66"); } 
    stream_actualParam   = NULL;
    #define CREATE_stream_actualParam  if (stream_actualParam == NULL) {stream_actualParam = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule actualParam"); }

    retval.tree  = NULL;
    {
        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:129:2: ( ( actualParam ( ',' actualParam )* )? -> ( ^( N_ACTUAL_PARAM actualParam ) )* )
        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:129:4: ( actualParam ( ',' actualParam )* )?
        {

            // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:129:4: ( actualParam ( ',' actualParam )* )?
            {
                int alt11=2;
                switch ( LA(1) ) 
                {
                    case ID:
                    	{
                    		alt11=1;
                    	}
                        break;
                }

                switch (alt11) 
                {
            	case 1:
            	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:129:5: actualParam ( ',' actualParam )*
            	    {
            	        FOLLOWPUSH(FOLLOW_actualParam_in_actualParamList664);
            	        actualParam43=actualParam(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleactualParamListEx;
            	        }

            	        CREATE_stream_actualParam; stream_actualParam->add(stream_actualParam, actualParam43.tree, NULL);

            	        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:129:17: ( ',' actualParam )*

            	        for (;;)
            	        {
            	            int alt10=2;
            	            switch ( LA(1) ) 
            	            {
            	            case 66:
            	            	{
            	            		alt10=1;
            	            	}
            	                break;

            	            }

            	            switch (alt10) 
            	            {
            	        	case 1:
            	        	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:129:18: ',' actualParam
            	        	    {
            	        	        char_literal44 = (pANTLR3_COMMON_TOKEN) MATCHT(66, &FOLLOW_66_in_actualParamList667); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleactualParamListEx;
            	        	        }
            	        	         
            	        	        CREATE_stream_66; stream_66->add(stream_66, char_literal44, NULL);

            	        	        FOLLOWPUSH(FOLLOW_actualParam_in_actualParamList669);
            	        	        actualParam45=actualParam(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleactualParamListEx;
            	        	        }

            	        	        CREATE_stream_actualParam; stream_actualParam->add(stream_actualParam, actualParam45.tree, NULL);

            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop10;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop10: ; /* Jump out to here if this rule does not match */


            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : actualParam
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 130:3: -> ( ^( N_ACTUAL_PARAM actualParam ) )*
            	{
            	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:130:6: ( ^( N_ACTUAL_PARAM actualParam ) )*
            	    {
            	    	while ( (stream_actualParam != NULL && stream_actualParam->hasNext(stream_actualParam))  )
            	    	{
            	    		// C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:130:6: ^( N_ACTUAL_PARAM actualParam )
            	    		{
            	    		    pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	    		    root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, N_ACTUAL_PARAM, (pANTLR3_UINT8)"N_ACTUAL_PARAM"), root_1));

            	    		    ADAPTOR->addChild(ADAPTOR, root_1, stream_actualParam == NULL ? NULL : stream_actualParam->nextTree(stream_actualParam));

            	    		    ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    		}

            	    	}
            	    	if (stream_actualParam != NULL) stream_actualParam->reset(stream_actualParam);

            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleactualParamListEx; /* Prevent compiler warnings */
    ruleactualParamListEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_66 != NULL) stream_66->free(stream_66);
        if (stream_actualParam != NULL) stream_actualParam->free(stream_actualParam);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end actualParamList */

/** 
 * $ANTLR start actualParam
 * C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:133:1: actualParam : ID '=' value -> ^( N_PARAM_NAME ID ) ^( N_VALUE value ) ;
 */
static ContainedObjectsParser_actualParam_return
actualParam(pContainedObjectsParser ctx)
{   
    ContainedObjectsParser_actualParam_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    ID46;
    pANTLR3_COMMON_TOKEN    char_literal47;
    ContainedObjectsParser_value_return value48;
    #undef	RETURN_TYPE_value48
    #define	RETURN_TYPE_value48 ContainedObjectsParser_value_return

    pANTLR3_BASE_TREE ID46_tree;
    pANTLR3_BASE_TREE char_literal47_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_67;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_ID;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_value;
    /* Initialize rule variables
     */


    root_0 = NULL;

    ID46       = NULL;
    char_literal47       = NULL;
    value48.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    ID46_tree   = NULL;
    char_literal47_tree   = NULL;

    stream_67   = NULL;
    #define CREATE_stream_67  if (stream_67 == NULL) {stream_67 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 67"); } 
    stream_ID   = NULL;
    #define CREATE_stream_ID  if (stream_ID == NULL) {stream_ID = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token ID"); } 
    stream_value   = NULL;
    #define CREATE_stream_value  if (stream_value == NULL) {stream_value = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule value"); }

    retval.tree  = NULL;
    {
        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:134:2: ( ID '=' value -> ^( N_PARAM_NAME ID ) ^( N_VALUE value ) )
        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:134:4: ID '=' value
        {
            ID46 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_actualParam695); 
            if  (HASEXCEPTION())
            {
                goto ruleactualParamEx;
            }
             
            CREATE_stream_ID; stream_ID->add(stream_ID, ID46, NULL);

            char_literal47 = (pANTLR3_COMMON_TOKEN) MATCHT(67, &FOLLOW_67_in_actualParam697); 
            if  (HASEXCEPTION())
            {
                goto ruleactualParamEx;
            }
             
            CREATE_stream_67; stream_67->add(stream_67, char_literal47, NULL);

            FOLLOWPUSH(FOLLOW_value_in_actualParam699);
            value48=value(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleactualParamEx;
            }

            CREATE_stream_value; stream_value->add(stream_value, value48.tree, NULL);

             
            /* AST REWRITE
             * elements          : value, ID
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 135:3: -> ^( N_PARAM_NAME ID ) ^( N_VALUE value )
            	{
            	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:135:6: ^( N_PARAM_NAME ID )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, N_PARAM_NAME, (pANTLR3_UINT8)"N_PARAM_NAME"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_ID == NULL ? NULL : stream_ID->nextNode(stream_ID));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }
            	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:135:25: ^( N_VALUE value )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, N_VALUE, (pANTLR3_UINT8)"N_VALUE"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_value == NULL ? NULL : stream_value->nextTree(stream_value));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleactualParamEx; /* Prevent compiler warnings */
    ruleactualParamEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_67 != NULL) stream_67->free(stream_67);
        if (stream_ID != NULL) stream_ID->free(stream_ID);
        if (stream_value != NULL) stream_value->free(stream_value);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end actualParam */

/** 
 * $ANTLR start value
 * C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:138:1: value : ( objectInit -> ^( N_OBJECT_INIT_VAL objectInit ) | arrayInit -> ^( N_ARRAY_INIT_VAL arrayInit ) | literal -> ^( N_LITERAL_VAL literal ) | reference -> ^( N_REFERENCE_VAL reference ) );
 */
static ContainedObjectsParser_value_return
value(pContainedObjectsParser ctx)
{   
    ContainedObjectsParser_value_return retval;

    pANTLR3_BASE_TREE root_0;

    ContainedObjectsParser_objectInit_return objectInit49;
    #undef	RETURN_TYPE_objectInit49
    #define	RETURN_TYPE_objectInit49 ContainedObjectsParser_objectInit_return

    ContainedObjectsParser_arrayInit_return arrayInit50;
    #undef	RETURN_TYPE_arrayInit50
    #define	RETURN_TYPE_arrayInit50 ContainedObjectsParser_arrayInit_return

    ContainedObjectsParser_literal_return literal51;
    #undef	RETURN_TYPE_literal51
    #define	RETURN_TYPE_literal51 ContainedObjectsParser_literal_return

    ContainedObjectsParser_reference_return reference52;
    #undef	RETURN_TYPE_reference52
    #define	RETURN_TYPE_reference52 ContainedObjectsParser_reference_return

    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_arrayInit;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_objectInit;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_reference;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_literal;
    /* Initialize rule variables
     */


    root_0 = NULL;

    objectInit49.tree = NULL;

    arrayInit50.tree = NULL;

    literal51.tree = NULL;

    reference52.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;


    stream_arrayInit   = NULL;
    #define CREATE_stream_arrayInit  if (stream_arrayInit == NULL) {stream_arrayInit = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule arrayInit"); }
    stream_objectInit   = NULL;
    #define CREATE_stream_objectInit  if (stream_objectInit == NULL) {stream_objectInit = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule objectInit"); }
    stream_reference   = NULL;
    #define CREATE_stream_reference  if (stream_reference == NULL) {stream_reference = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule reference"); }
    stream_literal   = NULL;
    #define CREATE_stream_literal  if (stream_literal == NULL) {stream_literal = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule literal"); }

    retval.tree  = NULL;
    {
        {
            //  C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:138:7: ( objectInit -> ^( N_OBJECT_INIT_VAL objectInit ) | arrayInit -> ^( N_ARRAY_INIT_VAL arrayInit ) | literal -> ^( N_LITERAL_VAL literal ) | reference -> ^( N_REFERENCE_VAL reference ) )
            
            ANTLR3_UINT32 alt12;

            alt12=4;

            switch ( LA(1) ) 
            {
            case ID:
            	{
            		switch ( LA(2) ) 
            		{
            		case 61:
            			{
            				alt12=1;
            			}
            		    break;
            		case 69:
            			{
            				alt12=2;
            			}
            		    break;
            		case 62:
            		case 64:
            		case 65:
            		case 66:
            		case 68:
            			{
            				alt12=4;
            			}
            		    break;

            		default:
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 12;
            		    EXCEPTION->state        = 1;


            		    goto rulevalueEx;
            		}

            	}
                break;
            case CLASS_KW:
            case INTEGER_KW:
            case FLOAT_KW:
            case STRING_KW:
            	{
            		alt12=2;
            	}
                break;
            case INTL:
            case FLOATL:
            case STRINGL:
            	{
            		alt12=3;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 12;
                EXCEPTION->state        = 0;


                goto rulevalueEx;
            }

            switch (alt12) 
            {
        	case 1:
        	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:138:9: objectInit
        	    {
        	        FOLLOWPUSH(FOLLOW_objectInit_in_value725);
        	        objectInit49=objectInit(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulevalueEx;
        	        }

        	        CREATE_stream_objectInit; stream_objectInit->add(stream_objectInit, objectInit49.tree, NULL);

        	         
        	        /* AST REWRITE
        	         * elements          : objectInit
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 138:20: -> ^( N_OBJECT_INIT_VAL objectInit )
        	        	{
        	        	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:138:23: ^( N_OBJECT_INIT_VAL objectInit )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, N_OBJECT_INIT_VAL, (pANTLR3_UINT8)"N_OBJECT_INIT_VAL"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_objectInit == NULL ? NULL : stream_objectInit->nextTree(stream_objectInit));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:139:4: arrayInit
        	    {
        	        FOLLOWPUSH(FOLLOW_arrayInit_in_value738);
        	        arrayInit50=arrayInit(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulevalueEx;
        	        }

        	        CREATE_stream_arrayInit; stream_arrayInit->add(stream_arrayInit, arrayInit50.tree, NULL);

        	         
        	        /* AST REWRITE
        	         * elements          : arrayInit
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 139:14: -> ^( N_ARRAY_INIT_VAL arrayInit )
        	        	{
        	        	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:139:17: ^( N_ARRAY_INIT_VAL arrayInit )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, N_ARRAY_INIT_VAL, (pANTLR3_UINT8)"N_ARRAY_INIT_VAL"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_arrayInit == NULL ? NULL : stream_arrayInit->nextTree(stream_arrayInit));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:140:4: literal
        	    {
        	        FOLLOWPUSH(FOLLOW_literal_in_value751);
        	        literal51=literal(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulevalueEx;
        	        }

        	        CREATE_stream_literal; stream_literal->add(stream_literal, literal51.tree, NULL);

        	         
        	        /* AST REWRITE
        	         * elements          : literal
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 140:13: -> ^( N_LITERAL_VAL literal )
        	        	{
        	        	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:140:16: ^( N_LITERAL_VAL literal )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, N_LITERAL_VAL, (pANTLR3_UINT8)"N_LITERAL_VAL"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_literal == NULL ? NULL : stream_literal->nextTree(stream_literal));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 4:
        	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:141:5: reference
        	    {
        	        FOLLOWPUSH(FOLLOW_reference_in_value766);
        	        reference52=reference(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulevalueEx;
        	        }

        	        CREATE_stream_reference; stream_reference->add(stream_reference, reference52.tree, NULL);

        	         
        	        /* AST REWRITE
        	         * elements          : reference
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 141:15: -> ^( N_REFERENCE_VAL reference )
        	        	{
        	        	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:141:18: ^( N_REFERENCE_VAL reference )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, N_REFERENCE_VAL, (pANTLR3_UINT8)"N_REFERENCE_VAL"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_reference == NULL ? NULL : stream_reference->nextTree(stream_reference));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulevalueEx; /* Prevent compiler warnings */
    rulevalueEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_arrayInit != NULL) stream_arrayInit->free(stream_arrayInit);
        if (stream_objectInit != NULL) stream_objectInit->free(stream_objectInit);
        if (stream_reference != NULL) stream_reference->free(stream_reference);
        if (stream_literal != NULL) stream_literal->free(stream_literal);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end value */

/** 
 * $ANTLR start reference
 * C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:144:1: reference : ID ( '.' ID )* -> ( ID )+ ;
 */
static ContainedObjectsParser_reference_return
reference(pContainedObjectsParser ctx)
{   
    ContainedObjectsParser_reference_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    ID53;
    pANTLR3_COMMON_TOKEN    char_literal54;
    pANTLR3_COMMON_TOKEN    ID55;

    pANTLR3_BASE_TREE ID53_tree;
    pANTLR3_BASE_TREE char_literal54_tree;
    pANTLR3_BASE_TREE ID55_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_68;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_ID;

    /* Initialize rule variables
     */


    root_0 = NULL;

    ID53       = NULL;
    char_literal54       = NULL;
    ID55       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    ID53_tree   = NULL;
    char_literal54_tree   = NULL;
    ID55_tree   = NULL;

    stream_68   = NULL;
    #define CREATE_stream_68  if (stream_68 == NULL) {stream_68 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 68"); } 
    stream_ID   = NULL;
    #define CREATE_stream_ID  if (stream_ID == NULL) {stream_ID = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token ID"); } 

    retval.tree  = NULL;
    {
        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:145:2: ( ID ( '.' ID )* -> ( ID )+ )
        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:145:4: ID ( '.' ID )*
        {
            ID53 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_reference785); 
            if  (HASEXCEPTION())
            {
                goto rulereferenceEx;
            }
             
            CREATE_stream_ID; stream_ID->add(stream_ID, ID53, NULL);


            // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:145:7: ( '.' ID )*

            for (;;)
            {
                int alt13=2;
                switch ( LA(1) ) 
                {
                case 68:
                	{
                		alt13=1;
                	}
                    break;

                }

                switch (alt13) 
                {
            	case 1:
            	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:145:8: '.' ID
            	    {
            	        char_literal54 = (pANTLR3_COMMON_TOKEN) MATCHT(68, &FOLLOW_68_in_reference788); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulereferenceEx;
            	        }
            	         
            	        CREATE_stream_68; stream_68->add(stream_68, char_literal54, NULL);

            	        ID55 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_reference790); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulereferenceEx;
            	        }
            	         
            	        CREATE_stream_ID; stream_ID->add(stream_ID, ID55, NULL);


            	    }
            	    break;

            	default:
            	    goto loop13;	/* break out of the loop */
            	    break;
                }
            }
            loop13: ; /* Jump out to here if this rule does not match */


             
            /* AST REWRITE
             * elements          : ID
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 146:3: -> ( ID )+
            	{
            	    if ((stream_ID == NULL || !stream_ID->hasNext(stream_ID))  )
            	    {
            	        CONSTRUCTEX();
            	        EXCEPTION->type         = ANTLR3_REWRITE_EARLY_EXCEPTION;
            	        EXCEPTION->name         = (void *)ANTLR3_REWRITE_EARLY_EXCEPTION_NAME;
            	    }
            	    else
            	    {
            	    	while ( (stream_ID->hasNext(stream_ID))  ) {
            	    		ADAPTOR->addChild(ADAPTOR, root_0, stream_ID == NULL ? NULL : stream_ID->nextNode(stream_ID));

            	    	}
            	    	stream_ID->reset(stream_ID);

            	    }
            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulereferenceEx; /* Prevent compiler warnings */
    rulereferenceEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_68 != NULL) stream_68->free(stream_68);
        if (stream_ID != NULL) stream_ID->free(stream_ID);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end reference */

/** 
 * $ANTLR start literal
 * C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:149:1: literal : ( INTL -> ^( N_INT_LITERAL INTL ) | FLOATL -> ^( N_FLOAT_LITERAL FLOATL ) | STRINGL -> ^( N_STRING_LITERAL STRINGL ) );
 */
static ContainedObjectsParser_literal_return
literal(pContainedObjectsParser ctx)
{   
    ContainedObjectsParser_literal_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    INTL56;
    pANTLR3_COMMON_TOKEN    FLOATL57;
    pANTLR3_COMMON_TOKEN    STRINGL58;

    pANTLR3_BASE_TREE INTL56_tree;
    pANTLR3_BASE_TREE FLOATL57_tree;
    pANTLR3_BASE_TREE STRINGL58_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_STRINGL;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_FLOATL;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_INTL;

    /* Initialize rule variables
     */


    root_0 = NULL;

    INTL56       = NULL;
    FLOATL57       = NULL;
    STRINGL58       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    INTL56_tree   = NULL;
    FLOATL57_tree   = NULL;
    STRINGL58_tree   = NULL;

    stream_STRINGL   = NULL;
    #define CREATE_stream_STRINGL  if (stream_STRINGL == NULL) {stream_STRINGL = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token STRINGL"); } 
    stream_FLOATL   = NULL;
    #define CREATE_stream_FLOATL  if (stream_FLOATL == NULL) {stream_FLOATL = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token FLOATL"); } 
    stream_INTL   = NULL;
    #define CREATE_stream_INTL  if (stream_INTL == NULL) {stream_INTL = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token INTL"); } 

    retval.tree  = NULL;
    {
        {
            //  C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:149:9: ( INTL -> ^( N_INT_LITERAL INTL ) | FLOATL -> ^( N_FLOAT_LITERAL FLOATL ) | STRINGL -> ^( N_STRING_LITERAL STRINGL ) )
            
            ANTLR3_UINT32 alt14;

            alt14=3;

            switch ( LA(1) ) 
            {
            case INTL:
            	{
            		alt14=1;
            	}
                break;
            case FLOATL:
            	{
            		alt14=2;
            	}
                break;
            case STRINGL:
            	{
            		alt14=3;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 14;
                EXCEPTION->state        = 0;


                goto ruleliteralEx;
            }

            switch (alt14) 
            {
        	case 1:
        	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:149:11: INTL
        	    {
        	        INTL56 = (pANTLR3_COMMON_TOKEN) MATCHT(INTL, &FOLLOW_INTL_in_literal809); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleliteralEx;
        	        }
        	         
        	        CREATE_stream_INTL; stream_INTL->add(stream_INTL, INTL56, NULL);


        	         
        	        /* AST REWRITE
        	         * elements          : INTL
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 149:16: -> ^( N_INT_LITERAL INTL )
        	        	{
        	        	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:149:19: ^( N_INT_LITERAL INTL )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, N_INT_LITERAL, (pANTLR3_UINT8)"N_INT_LITERAL"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_INTL == NULL ? NULL : stream_INTL->nextNode(stream_INTL));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:150:4: FLOATL
        	    {
        	        FLOATL57 = (pANTLR3_COMMON_TOKEN) MATCHT(FLOATL, &FOLLOW_FLOATL_in_literal822); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleliteralEx;
        	        }
        	         
        	        CREATE_stream_FLOATL; stream_FLOATL->add(stream_FLOATL, FLOATL57, NULL);


        	         
        	        /* AST REWRITE
        	         * elements          : FLOATL
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 150:12: -> ^( N_FLOAT_LITERAL FLOATL )
        	        	{
        	        	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:150:15: ^( N_FLOAT_LITERAL FLOATL )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, N_FLOAT_LITERAL, (pANTLR3_UINT8)"N_FLOAT_LITERAL"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_FLOATL == NULL ? NULL : stream_FLOATL->nextNode(stream_FLOATL));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:151:5: STRINGL
        	    {
        	        STRINGL58 = (pANTLR3_COMMON_TOKEN) MATCHT(STRINGL, &FOLLOW_STRINGL_in_literal837); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleliteralEx;
        	        }
        	         
        	        CREATE_stream_STRINGL; stream_STRINGL->add(stream_STRINGL, STRINGL58, NULL);


        	         
        	        /* AST REWRITE
        	         * elements          : STRINGL
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 151:13: -> ^( N_STRING_LITERAL STRINGL )
        	        	{
        	        	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:151:16: ^( N_STRING_LITERAL STRINGL )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, N_STRING_LITERAL, (pANTLR3_UINT8)"N_STRING_LITERAL"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_STRINGL == NULL ? NULL : stream_STRINGL->nextNode(stream_STRINGL));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleliteralEx; /* Prevent compiler warnings */
    ruleliteralEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_STRINGL != NULL) stream_STRINGL->free(stream_STRINGL);
        if (stream_FLOATL != NULL) stream_FLOATL->free(stream_FLOATL);
        if (stream_INTL != NULL) stream_INTL->free(stream_INTL);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end literal */

/** 
 * $ANTLR start arrayInit
 * C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:154:1: arrayInit : simpleType '[' ']' '{' ( value ( ',' value )* )? '}' -> ^( N_ARRAY_TYPE simpleType ) ^( N_ARRAY_VALUES ( value )* ) ;
 */
static ContainedObjectsParser_arrayInit_return
arrayInit(pContainedObjectsParser ctx)
{   
    ContainedObjectsParser_arrayInit_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal60;
    pANTLR3_COMMON_TOKEN    char_literal61;
    pANTLR3_COMMON_TOKEN    char_literal62;
    pANTLR3_COMMON_TOKEN    char_literal64;
    pANTLR3_COMMON_TOKEN    char_literal66;
    ContainedObjectsParser_simpleType_return simpleType59;
    #undef	RETURN_TYPE_simpleType59
    #define	RETURN_TYPE_simpleType59 ContainedObjectsParser_simpleType_return

    ContainedObjectsParser_value_return value63;
    #undef	RETURN_TYPE_value63
    #define	RETURN_TYPE_value63 ContainedObjectsParser_value_return

    ContainedObjectsParser_value_return value65;
    #undef	RETURN_TYPE_value65
    #define	RETURN_TYPE_value65 ContainedObjectsParser_value_return

    pANTLR3_BASE_TREE char_literal60_tree;
    pANTLR3_BASE_TREE char_literal61_tree;
    pANTLR3_BASE_TREE char_literal62_tree;
    pANTLR3_BASE_TREE char_literal64_tree;
    pANTLR3_BASE_TREE char_literal66_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_66;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_69;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_64;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_70;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_63;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_simpleType;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_value;
    /* Initialize rule variables
     */


    root_0 = NULL;

    char_literal60       = NULL;
    char_literal61       = NULL;
    char_literal62       = NULL;
    char_literal64       = NULL;
    char_literal66       = NULL;
    simpleType59.tree = NULL;

    value63.tree = NULL;

    value65.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal60_tree   = NULL;
    char_literal61_tree   = NULL;
    char_literal62_tree   = NULL;
    char_literal64_tree   = NULL;
    char_literal66_tree   = NULL;

    stream_66   = NULL;
    #define CREATE_stream_66  if (stream_66 == NULL) {stream_66 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 66"); } 
    stream_69   = NULL;
    #define CREATE_stream_69  if (stream_69 == NULL) {stream_69 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 69"); } 
    stream_64   = NULL;
    #define CREATE_stream_64  if (stream_64 == NULL) {stream_64 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 64"); } 
    stream_70   = NULL;
    #define CREATE_stream_70  if (stream_70 == NULL) {stream_70 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 70"); } 
    stream_63   = NULL;
    #define CREATE_stream_63  if (stream_63 == NULL) {stream_63 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 63"); } 
    stream_simpleType   = NULL;
    #define CREATE_stream_simpleType  if (stream_simpleType == NULL) {stream_simpleType = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule simpleType"); }
    stream_value   = NULL;
    #define CREATE_stream_value  if (stream_value == NULL) {stream_value = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule value"); }

    retval.tree  = NULL;
    {
        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:155:2: ( simpleType '[' ']' '{' ( value ( ',' value )* )? '}' -> ^( N_ARRAY_TYPE simpleType ) ^( N_ARRAY_VALUES ( value )* ) )
        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:155:4: simpleType '[' ']' '{' ( value ( ',' value )* )? '}'
        {
            FOLLOWPUSH(FOLLOW_simpleType_in_arrayInit856);
            simpleType59=simpleType(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulearrayInitEx;
            }

            CREATE_stream_simpleType; stream_simpleType->add(stream_simpleType, simpleType59.tree, NULL);
            char_literal60 = (pANTLR3_COMMON_TOKEN) MATCHT(69, &FOLLOW_69_in_arrayInit858); 
            if  (HASEXCEPTION())
            {
                goto rulearrayInitEx;
            }
             
            CREATE_stream_69; stream_69->add(stream_69, char_literal60, NULL);

            char_literal61 = (pANTLR3_COMMON_TOKEN) MATCHT(70, &FOLLOW_70_in_arrayInit860); 
            if  (HASEXCEPTION())
            {
                goto rulearrayInitEx;
            }
             
            CREATE_stream_70; stream_70->add(stream_70, char_literal61, NULL);

            char_literal62 = (pANTLR3_COMMON_TOKEN) MATCHT(63, &FOLLOW_63_in_arrayInit862); 
            if  (HASEXCEPTION())
            {
                goto rulearrayInitEx;
            }
             
            CREATE_stream_63; stream_63->add(stream_63, char_literal62, NULL);


            // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:155:27: ( value ( ',' value )* )?
            {
                int alt16=2;
                switch ( LA(1) ) 
                {
                    case CLASS_KW:
                    case INTEGER_KW:
                    case FLOAT_KW:
                    case STRING_KW:
                    case ID:
                    case INTL:
                    case FLOATL:
                    case STRINGL:
                    	{
                    		alt16=1;
                    	}
                        break;
                }

                switch (alt16) 
                {
            	case 1:
            	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:155:28: value ( ',' value )*
            	    {
            	        FOLLOWPUSH(FOLLOW_value_in_arrayInit865);
            	        value63=value(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulearrayInitEx;
            	        }

            	        CREATE_stream_value; stream_value->add(stream_value, value63.tree, NULL);

            	        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:155:34: ( ',' value )*

            	        for (;;)
            	        {
            	            int alt15=2;
            	            switch ( LA(1) ) 
            	            {
            	            case 66:
            	            	{
            	            		alt15=1;
            	            	}
            	                break;

            	            }

            	            switch (alt15) 
            	            {
            	        	case 1:
            	        	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:155:35: ',' value
            	        	    {
            	        	        char_literal64 = (pANTLR3_COMMON_TOKEN) MATCHT(66, &FOLLOW_66_in_arrayInit868); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulearrayInitEx;
            	        	        }
            	        	         
            	        	        CREATE_stream_66; stream_66->add(stream_66, char_literal64, NULL);

            	        	        FOLLOWPUSH(FOLLOW_value_in_arrayInit870);
            	        	        value65=value(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulearrayInitEx;
            	        	        }

            	        	        CREATE_stream_value; stream_value->add(stream_value, value65.tree, NULL);

            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop15;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop15: ; /* Jump out to here if this rule does not match */


            	    }
            	    break;

                }
            }
            char_literal66 = (pANTLR3_COMMON_TOKEN) MATCHT(64, &FOLLOW_64_in_arrayInit876); 
            if  (HASEXCEPTION())
            {
                goto rulearrayInitEx;
            }
             
            CREATE_stream_64; stream_64->add(stream_64, char_literal66, NULL);


             
            /* AST REWRITE
             * elements          : value, simpleType
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 156:3: -> ^( N_ARRAY_TYPE simpleType ) ^( N_ARRAY_VALUES ( value )* )
            	{
            	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:156:6: ^( N_ARRAY_TYPE simpleType )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, N_ARRAY_TYPE, (pANTLR3_UINT8)"N_ARRAY_TYPE"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_simpleType == NULL ? NULL : stream_simpleType->nextTree(stream_simpleType));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }
            	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:156:33: ^( N_ARRAY_VALUES ( value )* )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, N_ARRAY_VALUES, (pANTLR3_UINT8)"N_ARRAY_VALUES"), root_1));

            	        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:156:50: ( value )*
            	        {
            	        	while ( (stream_value != NULL && stream_value->hasNext(stream_value))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_value == NULL ? NULL : stream_value->nextTree(stream_value));

            	        	}
            	        	if (stream_value != NULL) stream_value->reset(stream_value);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulearrayInitEx; /* Prevent compiler warnings */
    rulearrayInitEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_66 != NULL) stream_66->free(stream_66);
        if (stream_69 != NULL) stream_69->free(stream_69);
        if (stream_64 != NULL) stream_64->free(stream_64);
        if (stream_70 != NULL) stream_70->free(stream_70);
        if (stream_63 != NULL) stream_63->free(stream_63);
        if (stream_simpleType != NULL) stream_simpleType->free(stream_simpleType);
        if (stream_value != NULL) stream_value->free(stream_value);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end arrayInit */

/** 
 * $ANTLR start objectInit
 * C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:159:1: objectInit : ID '(' actualParamList ')' -> ^( N_CLASS_NAME ID ) ^( N_ACTUAL_PARAMS actualParamList ) ;
 */
static ContainedObjectsParser_objectInit_return
objectInit(pContainedObjectsParser ctx)
{   
    ContainedObjectsParser_objectInit_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    ID67;
    pANTLR3_COMMON_TOKEN    char_literal68;
    pANTLR3_COMMON_TOKEN    char_literal70;
    ContainedObjectsParser_actualParamList_return actualParamList69;
    #undef	RETURN_TYPE_actualParamList69
    #define	RETURN_TYPE_actualParamList69 ContainedObjectsParser_actualParamList_return

    pANTLR3_BASE_TREE ID67_tree;
    pANTLR3_BASE_TREE char_literal68_tree;
    pANTLR3_BASE_TREE char_literal70_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_ID;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_62;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_61;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_actualParamList;
    /* Initialize rule variables
     */


    root_0 = NULL;

    ID67       = NULL;
    char_literal68       = NULL;
    char_literal70       = NULL;
    actualParamList69.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    ID67_tree   = NULL;
    char_literal68_tree   = NULL;
    char_literal70_tree   = NULL;

    stream_ID   = NULL;
    #define CREATE_stream_ID  if (stream_ID == NULL) {stream_ID = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token ID"); } 
    stream_62   = NULL;
    #define CREATE_stream_62  if (stream_62 == NULL) {stream_62 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 62"); } 
    stream_61   = NULL;
    #define CREATE_stream_61  if (stream_61 == NULL) {stream_61 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 61"); } 
    stream_actualParamList   = NULL;
    #define CREATE_stream_actualParamList  if (stream_actualParamList == NULL) {stream_actualParamList = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule actualParamList"); }

    retval.tree  = NULL;
    {
        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:160:2: ( ID '(' actualParamList ')' -> ^( N_CLASS_NAME ID ) ^( N_ACTUAL_PARAMS actualParamList ) )
        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:160:4: ID '(' actualParamList ')'
        {
            ID67 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_objectInit904); 
            if  (HASEXCEPTION())
            {
                goto ruleobjectInitEx;
            }
             
            CREATE_stream_ID; stream_ID->add(stream_ID, ID67, NULL);

            char_literal68 = (pANTLR3_COMMON_TOKEN) MATCHT(61, &FOLLOW_61_in_objectInit906); 
            if  (HASEXCEPTION())
            {
                goto ruleobjectInitEx;
            }
             
            CREATE_stream_61; stream_61->add(stream_61, char_literal68, NULL);

            FOLLOWPUSH(FOLLOW_actualParamList_in_objectInit908);
            actualParamList69=actualParamList(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleobjectInitEx;
            }

            CREATE_stream_actualParamList; stream_actualParamList->add(stream_actualParamList, actualParamList69.tree, NULL);
            char_literal70 = (pANTLR3_COMMON_TOKEN) MATCHT(62, &FOLLOW_62_in_objectInit910); 
            if  (HASEXCEPTION())
            {
                goto ruleobjectInitEx;
            }
             
            CREATE_stream_62; stream_62->add(stream_62, char_literal70, NULL);


             
            /* AST REWRITE
             * elements          : actualParamList, ID
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 161:3: -> ^( N_CLASS_NAME ID ) ^( N_ACTUAL_PARAMS actualParamList )
            	{
            	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:161:6: ^( N_CLASS_NAME ID )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, N_CLASS_NAME, (pANTLR3_UINT8)"N_CLASS_NAME"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_ID == NULL ? NULL : stream_ID->nextNode(stream_ID));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }
            	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:161:25: ^( N_ACTUAL_PARAMS actualParamList )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, N_ACTUAL_PARAMS, (pANTLR3_UINT8)"N_ACTUAL_PARAMS"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_actualParamList == NULL ? NULL : stream_actualParamList->nextTree(stream_actualParamList));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleobjectInitEx; /* Prevent compiler warnings */
    ruleobjectInitEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_ID != NULL) stream_ID->free(stream_ID);
        if (stream_62 != NULL) stream_62->free(stream_62);
        if (stream_61 != NULL) stream_61->free(stream_61);
        if (stream_actualParamList != NULL) stream_actualParamList->free(stream_actualParamList);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end objectInit */

/** 
 * $ANTLR start type
 * C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:164:1: type : ( arrayType -> ^( N_ARRAY_TYPE arrayType ) | simpleType -> ^( N_SIMPLE_TYPE simpleType ) );
 */
static ContainedObjectsParser_type_return
type(pContainedObjectsParser ctx)
{   
    ContainedObjectsParser_type_return retval;

    pANTLR3_BASE_TREE root_0;

    ContainedObjectsParser_arrayType_return arrayType71;
    #undef	RETURN_TYPE_arrayType71
    #define	RETURN_TYPE_arrayType71 ContainedObjectsParser_arrayType_return

    ContainedObjectsParser_simpleType_return simpleType72;
    #undef	RETURN_TYPE_simpleType72
    #define	RETURN_TYPE_simpleType72 ContainedObjectsParser_simpleType_return

    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_arrayType;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_simpleType;
    /* Initialize rule variables
     */


    root_0 = NULL;

    arrayType71.tree = NULL;

    simpleType72.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;


    stream_arrayType   = NULL;
    #define CREATE_stream_arrayType  if (stream_arrayType == NULL) {stream_arrayType = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule arrayType"); }
    stream_simpleType   = NULL;
    #define CREATE_stream_simpleType  if (stream_simpleType == NULL) {stream_simpleType = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule simpleType"); }

    retval.tree  = NULL;
    {
        {
            //  C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:164:6: ( arrayType -> ^( N_ARRAY_TYPE arrayType ) | simpleType -> ^( N_SIMPLE_TYPE simpleType ) )
            
            ANTLR3_UINT32 alt17;

            alt17=2;

            switch ( LA(1) ) 
            {
            case INTEGER_KW:
            	{
            		switch ( LA(2) ) 
            		{
            		case 69:
            			{
            				alt17=1;
            			}
            		    break;
            		case ID:
            			{
            				alt17=2;
            			}
            		    break;

            		default:
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 17;
            		    EXCEPTION->state        = 1;


            		    goto ruletypeEx;
            		}

            	}
                break;
            case FLOAT_KW:
            	{
            		switch ( LA(2) ) 
            		{
            		case ID:
            			{
            				alt17=2;
            			}
            		    break;
            		case 69:
            			{
            				alt17=1;
            			}
            		    break;

            		default:
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 17;
            		    EXCEPTION->state        = 2;


            		    goto ruletypeEx;
            		}

            	}
                break;
            case STRING_KW:
            	{
            		switch ( LA(2) ) 
            		{
            		case ID:
            			{
            				alt17=2;
            			}
            		    break;
            		case 69:
            			{
            				alt17=1;
            			}
            		    break;

            		default:
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 17;
            		    EXCEPTION->state        = 3;


            		    goto ruletypeEx;
            		}

            	}
                break;
            case ID:
            	{
            		switch ( LA(2) ) 
            		{
            		case ID:
            			{
            				alt17=2;
            			}
            		    break;
            		case 69:
            			{
            				alt17=1;
            			}
            		    break;

            		default:
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 17;
            		    EXCEPTION->state        = 4;


            		    goto ruletypeEx;
            		}

            	}
                break;
            case CLASS_KW:
            	{
            		switch ( LA(2) ) 
            		{
            		case 71:
            			{
            				switch ( LA(3) ) 
            				{
            				case ID:
            					{
            						switch ( LA(4) ) 
            						{
            						case 72:
            							{
            								switch ( LA(5) ) 
            								{
            								case 69:
            									{
            										alt17=1;
            									}
            								    break;
            								case ID:
            									{
            										alt17=2;
            									}
            								    break;

            								default:
            								    CONSTRUCTEX();
            								    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            								    EXCEPTION->message      = (void *)"";
            								    EXCEPTION->decisionNum  = 17;
            								    EXCEPTION->state        = 10;


            								    goto ruletypeEx;
            								}

            							}
            						    break;

            						default:
            						    CONSTRUCTEX();
            						    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            						    EXCEPTION->message      = (void *)"";
            						    EXCEPTION->decisionNum  = 17;
            						    EXCEPTION->state        = 9;


            						    goto ruletypeEx;
            						}

            					}
            				    break;

            				default:
            				    CONSTRUCTEX();
            				    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				    EXCEPTION->message      = (void *)"";
            				    EXCEPTION->decisionNum  = 17;
            				    EXCEPTION->state        = 8;


            				    goto ruletypeEx;
            				}

            			}
            		    break;

            		default:
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 17;
            		    EXCEPTION->state        = 5;


            		    goto ruletypeEx;
            		}

            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 17;
                EXCEPTION->state        = 0;


                goto ruletypeEx;
            }

            switch (alt17) 
            {
        	case 1:
        	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:164:8: arrayType
        	    {
        	        FOLLOWPUSH(FOLLOW_arrayType_in_type936);
        	        arrayType71=arrayType(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletypeEx;
        	        }

        	        CREATE_stream_arrayType; stream_arrayType->add(stream_arrayType, arrayType71.tree, NULL);

        	         
        	        /* AST REWRITE
        	         * elements          : arrayType
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 164:18: -> ^( N_ARRAY_TYPE arrayType )
        	        	{
        	        	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:164:21: ^( N_ARRAY_TYPE arrayType )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, N_ARRAY_TYPE, (pANTLR3_UINT8)"N_ARRAY_TYPE"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_arrayType == NULL ? NULL : stream_arrayType->nextTree(stream_arrayType));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:165:4: simpleType
        	    {
        	        FOLLOWPUSH(FOLLOW_simpleType_in_type949);
        	        simpleType72=simpleType(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletypeEx;
        	        }

        	        CREATE_stream_simpleType; stream_simpleType->add(stream_simpleType, simpleType72.tree, NULL);

        	         
        	        /* AST REWRITE
        	         * elements          : simpleType
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 165:15: -> ^( N_SIMPLE_TYPE simpleType )
        	        	{
        	        	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:165:18: ^( N_SIMPLE_TYPE simpleType )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, N_SIMPLE_TYPE, (pANTLR3_UINT8)"N_SIMPLE_TYPE"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_simpleType == NULL ? NULL : stream_simpleType->nextTree(stream_simpleType));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruletypeEx; /* Prevent compiler warnings */
    ruletypeEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_arrayType != NULL) stream_arrayType->free(stream_arrayType);
        if (stream_simpleType != NULL) stream_simpleType->free(stream_simpleType);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end type */

/** 
 * $ANTLR start arrayType
 * C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:168:1: arrayType : simpleType '[' ']' -> ^( N_TYPE simpleType ) ;
 */
static ContainedObjectsParser_arrayType_return
arrayType(pContainedObjectsParser ctx)
{   
    ContainedObjectsParser_arrayType_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal74;
    pANTLR3_COMMON_TOKEN    char_literal75;
    ContainedObjectsParser_simpleType_return simpleType73;
    #undef	RETURN_TYPE_simpleType73
    #define	RETURN_TYPE_simpleType73 ContainedObjectsParser_simpleType_return

    pANTLR3_BASE_TREE char_literal74_tree;
    pANTLR3_BASE_TREE char_literal75_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_69;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_70;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_simpleType;
    /* Initialize rule variables
     */


    root_0 = NULL;

    char_literal74       = NULL;
    char_literal75       = NULL;
    simpleType73.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal74_tree   = NULL;
    char_literal75_tree   = NULL;

    stream_69   = NULL;
    #define CREATE_stream_69  if (stream_69 == NULL) {stream_69 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 69"); } 
    stream_70   = NULL;
    #define CREATE_stream_70  if (stream_70 == NULL) {stream_70 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 70"); } 
    stream_simpleType   = NULL;
    #define CREATE_stream_simpleType  if (stream_simpleType == NULL) {stream_simpleType = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule simpleType"); }

    retval.tree  = NULL;
    {
        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:169:2: ( simpleType '[' ']' -> ^( N_TYPE simpleType ) )
        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:169:4: simpleType '[' ']'
        {
            FOLLOWPUSH(FOLLOW_simpleType_in_arrayType968);
            simpleType73=simpleType(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulearrayTypeEx;
            }

            CREATE_stream_simpleType; stream_simpleType->add(stream_simpleType, simpleType73.tree, NULL);
            char_literal74 = (pANTLR3_COMMON_TOKEN) MATCHT(69, &FOLLOW_69_in_arrayType970); 
            if  (HASEXCEPTION())
            {
                goto rulearrayTypeEx;
            }
             
            CREATE_stream_69; stream_69->add(stream_69, char_literal74, NULL);

            char_literal75 = (pANTLR3_COMMON_TOKEN) MATCHT(70, &FOLLOW_70_in_arrayType972); 
            if  (HASEXCEPTION())
            {
                goto rulearrayTypeEx;
            }
             
            CREATE_stream_70; stream_70->add(stream_70, char_literal75, NULL);


             
            /* AST REWRITE
             * elements          : simpleType
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 170:3: -> ^( N_TYPE simpleType )
            	{
            	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:170:6: ^( N_TYPE simpleType )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, N_TYPE, (pANTLR3_UINT8)"N_TYPE"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_simpleType == NULL ? NULL : stream_simpleType->nextTree(stream_simpleType));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulearrayTypeEx; /* Prevent compiler warnings */
    rulearrayTypeEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_69 != NULL) stream_69->free(stream_69);
        if (stream_70 != NULL) stream_70->free(stream_70);
        if (stream_simpleType != NULL) stream_simpleType->free(stream_simpleType);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end arrayType */

/** 
 * $ANTLR start simpleType
 * C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:173:1: simpleType : ( INTEGER_KW -> N_INTEGER_TYPE | FLOAT_KW -> N_FLOAT_TYPE | STRING_KW -> N_STRING_TYPE | ID -> ^( N_OBJECT_TYPE ID ) | CLASS_KW '<' ID '>' -> ^( N_CLASS_TYPE ID ) );
 */
static ContainedObjectsParser_simpleType_return
simpleType(pContainedObjectsParser ctx)
{   
    ContainedObjectsParser_simpleType_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    INTEGER_KW76;
    pANTLR3_COMMON_TOKEN    FLOAT_KW77;
    pANTLR3_COMMON_TOKEN    STRING_KW78;
    pANTLR3_COMMON_TOKEN    ID79;
    pANTLR3_COMMON_TOKEN    CLASS_KW80;
    pANTLR3_COMMON_TOKEN    char_literal81;
    pANTLR3_COMMON_TOKEN    ID82;
    pANTLR3_COMMON_TOKEN    char_literal83;

    pANTLR3_BASE_TREE INTEGER_KW76_tree;
    pANTLR3_BASE_TREE FLOAT_KW77_tree;
    pANTLR3_BASE_TREE STRING_KW78_tree;
    pANTLR3_BASE_TREE ID79_tree;
    pANTLR3_BASE_TREE CLASS_KW80_tree;
    pANTLR3_BASE_TREE char_literal81_tree;
    pANTLR3_BASE_TREE ID82_tree;
    pANTLR3_BASE_TREE char_literal83_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_CLASS_KW;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_FLOAT_KW;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_INTEGER_KW;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_ID;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_71;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_72;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_STRING_KW;

    /* Initialize rule variables
     */


    root_0 = NULL;

    INTEGER_KW76       = NULL;
    FLOAT_KW77       = NULL;
    STRING_KW78       = NULL;
    ID79       = NULL;
    CLASS_KW80       = NULL;
    char_literal81       = NULL;
    ID82       = NULL;
    char_literal83       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    INTEGER_KW76_tree   = NULL;
    FLOAT_KW77_tree   = NULL;
    STRING_KW78_tree   = NULL;
    ID79_tree   = NULL;
    CLASS_KW80_tree   = NULL;
    char_literal81_tree   = NULL;
    ID82_tree   = NULL;
    char_literal83_tree   = NULL;

    stream_CLASS_KW   = NULL;
    #define CREATE_stream_CLASS_KW  if (stream_CLASS_KW == NULL) {stream_CLASS_KW = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token CLASS_KW"); } 
    stream_FLOAT_KW   = NULL;
    #define CREATE_stream_FLOAT_KW  if (stream_FLOAT_KW == NULL) {stream_FLOAT_KW = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token FLOAT_KW"); } 
    stream_INTEGER_KW   = NULL;
    #define CREATE_stream_INTEGER_KW  if (stream_INTEGER_KW == NULL) {stream_INTEGER_KW = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token INTEGER_KW"); } 
    stream_ID   = NULL;
    #define CREATE_stream_ID  if (stream_ID == NULL) {stream_ID = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token ID"); } 
    stream_71   = NULL;
    #define CREATE_stream_71  if (stream_71 == NULL) {stream_71 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 71"); } 
    stream_72   = NULL;
    #define CREATE_stream_72  if (stream_72 == NULL) {stream_72 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 72"); } 
    stream_STRING_KW   = NULL;
    #define CREATE_stream_STRING_KW  if (stream_STRING_KW == NULL) {stream_STRING_KW = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token STRING_KW"); } 

    retval.tree  = NULL;
    {
        {
            //  C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:174:3: ( INTEGER_KW -> N_INTEGER_TYPE | FLOAT_KW -> N_FLOAT_TYPE | STRING_KW -> N_STRING_TYPE | ID -> ^( N_OBJECT_TYPE ID ) | CLASS_KW '<' ID '>' -> ^( N_CLASS_TYPE ID ) )
            
            ANTLR3_UINT32 alt18;

            alt18=5;

            switch ( LA(1) ) 
            {
            case INTEGER_KW:
            	{
            		alt18=1;
            	}
                break;
            case FLOAT_KW:
            	{
            		alt18=2;
            	}
                break;
            case STRING_KW:
            	{
            		alt18=3;
            	}
                break;
            case ID:
            	{
            		alt18=4;
            	}
                break;
            case CLASS_KW:
            	{
            		alt18=5;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 18;
                EXCEPTION->state        = 0;


                goto rulesimpleTypeEx;
            }

            switch (alt18) 
            {
        	case 1:
        	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:174:5: INTEGER_KW
        	    {
        	        INTEGER_KW76 = (pANTLR3_COMMON_TOKEN) MATCHT(INTEGER_KW, &FOLLOW_INTEGER_KW_in_simpleType994); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesimpleTypeEx;
        	        }
        	         
        	        CREATE_stream_INTEGER_KW; stream_INTEGER_KW->add(stream_INTEGER_KW, INTEGER_KW76, NULL);


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 174:17: -> N_INTEGER_TYPE
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, N_INTEGER_TYPE, (pANTLR3_UINT8)"N_INTEGER_TYPE"));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:175:4: FLOAT_KW
        	    {
        	        FLOAT_KW77 = (pANTLR3_COMMON_TOKEN) MATCHT(FLOAT_KW, &FOLLOW_FLOAT_KW_in_simpleType1004); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesimpleTypeEx;
        	        }
        	         
        	        CREATE_stream_FLOAT_KW; stream_FLOAT_KW->add(stream_FLOAT_KW, FLOAT_KW77, NULL);


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 175:14: -> N_FLOAT_TYPE
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, N_FLOAT_TYPE, (pANTLR3_UINT8)"N_FLOAT_TYPE"));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:176:4: STRING_KW
        	    {
        	        STRING_KW78 = (pANTLR3_COMMON_TOKEN) MATCHT(STRING_KW, &FOLLOW_STRING_KW_in_simpleType1014); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesimpleTypeEx;
        	        }
        	         
        	        CREATE_stream_STRING_KW; stream_STRING_KW->add(stream_STRING_KW, STRING_KW78, NULL);


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 176:15: -> N_STRING_TYPE
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, N_STRING_TYPE, (pANTLR3_UINT8)"N_STRING_TYPE"));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 4:
        	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:177:4: ID
        	    {
        	        ID79 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_simpleType1024); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesimpleTypeEx;
        	        }
        	         
        	        CREATE_stream_ID; stream_ID->add(stream_ID, ID79, NULL);


        	         
        	        /* AST REWRITE
        	         * elements          : ID
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 177:9: -> ^( N_OBJECT_TYPE ID )
        	        	{
        	        	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:177:12: ^( N_OBJECT_TYPE ID )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, N_OBJECT_TYPE, (pANTLR3_UINT8)"N_OBJECT_TYPE"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_ID == NULL ? NULL : stream_ID->nextNode(stream_ID));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 5:
        	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:178:4: CLASS_KW '<' ID '>'
        	    {
        	        CLASS_KW80 = (pANTLR3_COMMON_TOKEN) MATCHT(CLASS_KW, &FOLLOW_CLASS_KW_in_simpleType1039); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesimpleTypeEx;
        	        }
        	         
        	        CREATE_stream_CLASS_KW; stream_CLASS_KW->add(stream_CLASS_KW, CLASS_KW80, NULL);

        	        char_literal81 = (pANTLR3_COMMON_TOKEN) MATCHT(71, &FOLLOW_71_in_simpleType1041); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesimpleTypeEx;
        	        }
        	         
        	        CREATE_stream_71; stream_71->add(stream_71, char_literal81, NULL);

        	        ID82 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_simpleType1043); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesimpleTypeEx;
        	        }
        	         
        	        CREATE_stream_ID; stream_ID->add(stream_ID, ID82, NULL);

        	        char_literal83 = (pANTLR3_COMMON_TOKEN) MATCHT(72, &FOLLOW_72_in_simpleType1045); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesimpleTypeEx;
        	        }
        	         
        	        CREATE_stream_72; stream_72->add(stream_72, char_literal83, NULL);


        	         
        	        /* AST REWRITE
        	         * elements          : ID
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 178:24: -> ^( N_CLASS_TYPE ID )
        	        	{
        	        	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:178:27: ^( N_CLASS_TYPE ID )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, N_CLASS_TYPE, (pANTLR3_UINT8)"N_CLASS_TYPE"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_ID == NULL ? NULL : stream_ID->nextNode(stream_ID));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulesimpleTypeEx; /* Prevent compiler warnings */
    rulesimpleTypeEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_CLASS_KW != NULL) stream_CLASS_KW->free(stream_CLASS_KW);
        if (stream_FLOAT_KW != NULL) stream_FLOAT_KW->free(stream_FLOAT_KW);
        if (stream_INTEGER_KW != NULL) stream_INTEGER_KW->free(stream_INTEGER_KW);
        if (stream_ID != NULL) stream_ID->free(stream_ID);
        if (stream_71 != NULL) stream_71->free(stream_71);
        if (stream_72 != NULL) stream_72->free(stream_72);
        if (stream_STRING_KW != NULL) stream_STRING_KW->free(stream_STRING_KW);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end simpleType */
/* End of parsing rules
 * ==============================================
 */

/* ==============================================
 * Syntactic predicates
 */
/* End of syntactic predicates
 * ==============================================
 */

 
 



/* End of code
 * =============================================================================
 */
