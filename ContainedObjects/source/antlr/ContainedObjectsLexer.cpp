/** \file
 *  This C source file was generated by $ANTLR version 3.2 Sep 23, 2009 12:02:23
 *
 *     -  From the grammar source file : C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g
 *     -                            On : 2010-11-03 17:47:39
 *     -                 for the lexer : ContainedObjectsLexerLexer *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
*/
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "ContainedObjectsLexer.h"
/* ----------------------------------------- */


/** String literals used by ContainedObjectsLexer that we must do things like MATCHS() with.
 *  C will normally just lay down 8 bit characters, and you can use L"xxx" to
 *  get wchar_t, but wchar_t is 16 bits on Windows, which is not UTF32 and so
 *  we perform this little trick of defining the literals as arrays of UINT32
 *  and passing in the address of these.
 */
static ANTLR3_UCHAR	lit_1[]  = { 0x63, 0x6C, 0x61, 0x73, 0x73,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_2[]  = { 0x69, 0x6E, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_3[]  = { 0x69, 0x6D, 0x70, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x73,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_4[]  = { 0x73, 0x74, 0x61, 0x74, 0x69, 0x63,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_5[]  = { 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_6[]  = { 0x66, 0x6C, 0x6F, 0x61, 0x74,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_7[]  = { 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_8[]  = { 0x2F, 0x2F,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_9[]  = { 0x2F, 0x2A,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_10[]  = { 0x2A, 0x2F,  ANTLR3_STRING_TERMINATOR};




/* MACROS that hide the C interface implementations from the
 * generated code, which makes it a little more understandable to the human eye.
 * I am very much against using C pre-processor macros for function calls and bits
 * of code as you cannot see what is happening when single stepping in debuggers
 * and so on. The exception (in my book at least) is for generated code, where you are
 * not maintaining it, but may wish to read and understand it. If you single step it, you know that input()
 * hides some indirect calls, but is always referring to the input stream. This is
 * probably more readable than ctx->input->istream->input(snarfle0->blarg) and allows me to rejig
 * the runtime interfaces without changing the generated code too often, without
 * confusing the reader of the generated output, who may not wish to know the gory
 * details of the interface inheritance.
 */
 
#define		CTX	ctx

/* Aids in accessing scopes for grammar programmers
 */
#undef	SCOPE_TYPE
#undef	SCOPE_STACK
#undef	SCOPE_TOP
#define	SCOPE_TYPE(scope)   pContainedObjectsLexer_##scope##_SCOPE
#define SCOPE_STACK(scope)  pContainedObjectsLexer_##scope##Stack
#define	SCOPE_TOP(scope)    ctx->pContainedObjectsLexer_##scope##Top
#define	SCOPE_SIZE(scope)		ctx->pContainedObjectsLexer_##scope##Stack_limit
#define SCOPE_INSTANCE(scope, i)	(ctx->SCOPE_STACK(scope)->get(ctx->SCOPE_STACK(scope),i))

 
/* Macros for accessing things in a lexer
 */
#undef	    LEXER
#undef	    RECOGNIZER		    
#undef	    RULEMEMO		    
#undef	    GETCHARINDEX
#undef	    GETLINE
#undef	    GETCHARPOSITIONINLINE
#undef	    EMIT
#undef	    EMITNEW
#undef	    MATCHC
#undef	    MATCHS
#undef	    MATCHRANGE
#undef	    LTOKEN
#undef	    HASFAILED
#undef	    FAILEDFLAG
#undef	    INPUT
#undef	    STRSTREAM
#undef	    LA
#undef	    HASEXCEPTION
#undef	    EXCEPTION
#undef	    CONSTRUCTEX
#undef	    CONSUME
#undef	    LRECOVER
#undef	    MARK
#undef	    REWIND
#undef	    REWINDLAST
#undef	    BACKTRACKING
#undef		MATCHANY
#undef		MEMOIZE
#undef		HAVEPARSEDRULE
#undef		GETTEXT
#undef		INDEX
#undef		SEEK
#undef		PUSHSTREAM
#undef		POPSTREAM
#undef		SETTEXT
#undef		SETTEXT8

#define	    LEXER					ctx->pLexer
#define	    RECOGNIZER			    LEXER->rec
#define		LEXSTATE				RECOGNIZER->state
#define		TOKSOURCE				LEXSTATE->tokSource
#define	    GETCHARINDEX()			LEXER->getCharIndex(LEXER)
#define	    GETLINE()				LEXER->getLine(LEXER)
#define	    GETTEXT()				LEXER->getText(LEXER)
#define	    GETCHARPOSITIONINLINE() LEXER->getCharPositionInLine(LEXER)
#define	    EMIT()					LEXSTATE->type = _type; LEXER->emit(LEXER)
#define	    EMITNEW(t)				LEXER->emitNew(LEXER, t)
#define	    MATCHC(c)				LEXER->matchc(LEXER, c)
#define	    MATCHS(s)				LEXER->matchs(LEXER, s)
#define	    MATCHRANGE(c1,c2)	    LEXER->matchRange(LEXER, c1, c2)
#define	    MATCHANY()				LEXER->matchAny(LEXER)
#define	    LTOKEN  				LEXSTATE->token
#define	    HASFAILED()				(LEXSTATE->failed == ANTLR3_TRUE)
#define	    BACKTRACKING			LEXSTATE->backtracking
#define	    FAILEDFLAG				LEXSTATE->failed
#define	    INPUT					LEXER->input
#define	    STRSTREAM				INPUT
#define		ISTREAM					INPUT->istream
#define		INDEX()					ISTREAM->index(ISTREAM)
#define		SEEK(n)					ISTREAM->seek(ISTREAM, n)
#define	    EOF_TOKEN				&(LEXSTATE->tokSource->eofToken)
#define	    HASEXCEPTION()			(LEXSTATE->error == ANTLR3_TRUE)
#define	    EXCEPTION				LEXSTATE->exception
#define	    CONSTRUCTEX()			RECOGNIZER->exConstruct(RECOGNIZER)
#define	    LRECOVER()				LEXER->recover(LEXER)
#define	    MARK()					ISTREAM->mark(ISTREAM)
#define	    REWIND(m)				ISTREAM->rewind(ISTREAM, m)
#define	    REWINDLAST()			ISTREAM->rewindLast(ISTREAM)
#define		MEMOIZE(ri,si)			RECOGNIZER->memoize(RECOGNIZER, ri, si)
#define		HAVEPARSEDRULE(r)		RECOGNIZER->alreadyParsedRule(RECOGNIZER, r)
#define		PUSHSTREAM(str)			LEXER->pushCharStream(LEXER, str)
#define		POPSTREAM()				LEXER->popCharStream(LEXER)
#define		SETTEXT(str)			LEXSTATE->text = str
#define		SKIP()					LEXSTATE->token = &(TOKSOURCE->skipToken)
#define		USER1					LEXSTATE->user1
#define		USER2					LEXSTATE->user2
#define		USER3					LEXSTATE->user3
#define		CUSTOM					LEXSTATE->custom
#define		RULEMEMO				LEXSTATE->ruleMemo
#define		DBG						RECOGNIZER->debugger

/* If we have been told we can rely on the standard 8 bit or 16 bit input
 * stream, then we can define our macros to use the direct pointers
 * in the input object, which is much faster than indirect calls. This
 * is really only significant to lexers with a lot of fragment rules (which
 * do not place LA(1) in a temporary at the moment) and even then
 * only if there is a lot of input (order of say 1M or so).
 */
#if	defined(ANTLR3_INLINE_INPUT_ASCII) || defined(ANTLR3_INLINE_INPUT_UTF16)

# ifdef	ANTLR3_INLINE_INPUT_ASCII

/* 8 bit "ASCII" (actually any 8 bit character set) */

#  define	    NEXTCHAR			((pANTLR3_UINT8)(INPUT->nextChar))
#  define	    DATAP				((pANTLR3_UINT8)(INPUT->data))

# else

#  define	    NEXTCHAR			((pANTLR3_UINT16)(INPUT->nextChar)) 
#  define	    DATAP				((pANTLR3_UINT16)(INPUT->data))

# endif

# define	    LA(n) ((NEXTCHAR + n) > (DATAP + INPUT->sizeBuf) ? ANTLR3_CHARSTREAM_EOF : (ANTLR3_UCHAR)(*(NEXTCHAR + n - 1)))
# define	    CONSUME()											\
{																	\
    if	(NEXTCHAR < (DATAP + INPUT->sizeBuf))						\
    {																\
		INPUT->charPositionInLine++;								\
		if  ((ANTLR3_UCHAR)(*NEXTCHAR) == INPUT->newlineChar)		\
		{															\
			INPUT->line++;											\
			INPUT->charPositionInLine	= 0;						\
			INPUT->currentLine		= (void *)(NEXTCHAR + 1);		\
		}															\
		INPUT->nextChar = (void *)(NEXTCHAR + 1);					\
    }																\
}

#else

// Pick up the input character by calling the input stream implementation.
//
#define	    CONSUME()				INPUT->istream->consume(INPUT->istream)
#define	    LA(n)					INPUT->istream->_LA(INPUT->istream, n)

#endif
#define		TOKTEXT(tok, txt)				tok, (pANTLR3_UINT8)txt

/* The 4 tokens defined below may well clash with your own #defines or token types. If so
 * then for the present you must use different names for your defines as these are hard coded
 * in the code generator. It would be better not to use such names internally, and maybe
 * we can change this in a forthcoming release. I deliberately do not #undef these
 * here as this will at least give you a redefined error somewhere if they clash.
 */
#define	    UP	    ANTLR3_TOKEN_UP
#define	    DOWN    ANTLR3_TOKEN_DOWN
#define	    EOR	    ANTLR3_TOKEN_EOR
#define	    INVALID ANTLR3_TOKEN_INVALID


/* =============================================================================
 * Functions to create and destroy scopes. First come the rule scopes, followed
 * by the global declared scopes.
 */



/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */


/* Forward declare the locally static matching functions we have generated and any predicate functions.
 */
static ANTLR3_INLINE  void	mCLASS_KW    (pContainedObjectsLexer ctx);
static ANTLR3_INLINE  void	mINTERFACE_KW    (pContainedObjectsLexer ctx);
static ANTLR3_INLINE  void	mIMPLEMENTS_KW    (pContainedObjectsLexer ctx);
static ANTLR3_INLINE  void	mSTATIC_KW    (pContainedObjectsLexer ctx);
static ANTLR3_INLINE  void	mINTEGER_KW    (pContainedObjectsLexer ctx);
static ANTLR3_INLINE  void	mFLOAT_KW    (pContainedObjectsLexer ctx);
static ANTLR3_INLINE  void	mSTRING_KW    (pContainedObjectsLexer ctx);
static ANTLR3_INLINE  void	mT__60    (pContainedObjectsLexer ctx);
static ANTLR3_INLINE  void	mT__61    (pContainedObjectsLexer ctx);
static ANTLR3_INLINE  void	mT__62    (pContainedObjectsLexer ctx);
static ANTLR3_INLINE  void	mT__63    (pContainedObjectsLexer ctx);
static ANTLR3_INLINE  void	mT__64    (pContainedObjectsLexer ctx);
static ANTLR3_INLINE  void	mT__65    (pContainedObjectsLexer ctx);
static ANTLR3_INLINE  void	mT__66    (pContainedObjectsLexer ctx);
static ANTLR3_INLINE  void	mT__67    (pContainedObjectsLexer ctx);
static ANTLR3_INLINE  void	mT__68    (pContainedObjectsLexer ctx);
static ANTLR3_INLINE  void	mT__69    (pContainedObjectsLexer ctx);
static ANTLR3_INLINE  void	mID    (pContainedObjectsLexer ctx);
static ANTLR3_INLINE  void	mINTL    (pContainedObjectsLexer ctx);
static ANTLR3_INLINE  void	mFLOATL    (pContainedObjectsLexer ctx);
static ANTLR3_INLINE  void	mCOMMENT    (pContainedObjectsLexer ctx);
static ANTLR3_INLINE  void	mSTRINGL    (pContainedObjectsLexer ctx);
static ANTLR3_INLINE  void	mEXPONENT    (pContainedObjectsLexer ctx);
static ANTLR3_INLINE  void	mHEX_DIGIT    (pContainedObjectsLexer ctx);
static ANTLR3_INLINE  void	mESC_SEQ    (pContainedObjectsLexer ctx);
static ANTLR3_INLINE  void	mOCTAL_ESC    (pContainedObjectsLexer ctx);
static ANTLR3_INLINE  void	mUNICODE_ESC    (pContainedObjectsLexer ctx);
static ANTLR3_INLINE  void	mSPACE    (pContainedObjectsLexer ctx);
static ANTLR3_INLINE  void	mTokens    (pContainedObjectsLexer ctx);
static void	ContainedObjectsLexerFree(pContainedObjectsLexer ctx);

/* =========================================================================
 * Lexer matching rules end.
 * =========================================================================
 */



static void
ContainedObjectsLexerFree  (pContainedObjectsLexer ctx)
{
    LEXER->free(LEXER);
    
    ANTLR3_FREE(ctx);
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g";

/** \brief Return the name of the grammar file that generated this code.
 */
static const char * getGrammarFileName()
{
	return fileName;
}

/** \brief Create a new lexer called ContainedObjectsLexer
 *
 * \param[in]    instream Pointer to an initialized input stream
 * \return 
 *     - Success pContainedObjectsLexer initialized for the lex start
 *     - Fail NULL
 */
ANTLR3_API pContainedObjectsLexer ContainedObjectsLexerNew         
(pANTLR3_INPUT_STREAM instream)
{
	// See if we can create a new lexer with the standard constructor
	//
	return ContainedObjectsLexerNewSSD(instream, NULL);
}

/** \brief Create a new lexer called ContainedObjectsLexer
 *
 * \param[in]    instream Pointer to an initialized input stream
 * \param[state] state Previously created shared recognizer stat
 * \return 
 *     - Success pContainedObjectsLexer initialized for the lex start
 *     - Fail NULL
 */
ANTLR3_API pContainedObjectsLexer ContainedObjectsLexerNewSSD         
(pANTLR3_INPUT_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state)
{
    pContainedObjectsLexer ctx; // Context structure we will build and return

    ctx = (pContainedObjectsLexer) ANTLR3_CALLOC(1, sizeof(ContainedObjectsLexer));

    if  (ctx == NULL)
    {
        // Failed to allocate memory for lexer context
        return  NULL;
    }

    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * in base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 lexer function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function. 
     *
     * We don't use the macros defined in ContainedObjectsLexer.h here so you can get a sense
     * of what goes where.
     */
    
    /* Create a base lexer, using the supplied input stream
     */
    ctx->pLexer	= antlr3LexerNewStream(ANTLR3_SIZE_HINT, instream, state);
    
    /* Check that we allocated the memory correctly
     */
    if	(ctx->pLexer == NULL)
    {
		ANTLR3_FREE(ctx);
		return  NULL;
    }
    /* Install the implementation of our ContainedObjectsLexer interface
     */
    ctx->mCLASS_KW	= mCLASS_KW;
    ctx->mINTERFACE_KW	= mINTERFACE_KW;
    ctx->mIMPLEMENTS_KW	= mIMPLEMENTS_KW;
    ctx->mSTATIC_KW	= mSTATIC_KW;
    ctx->mINTEGER_KW	= mINTEGER_KW;
    ctx->mFLOAT_KW	= mFLOAT_KW;
    ctx->mSTRING_KW	= mSTRING_KW;
    ctx->mT__60	= mT__60;
    ctx->mT__61	= mT__61;
    ctx->mT__62	= mT__62;
    ctx->mT__63	= mT__63;
    ctx->mT__64	= mT__64;
    ctx->mT__65	= mT__65;
    ctx->mT__66	= mT__66;
    ctx->mT__67	= mT__67;
    ctx->mT__68	= mT__68;
    ctx->mT__69	= mT__69;
    ctx->mID	= mID;
    ctx->mINTL	= mINTL;
    ctx->mFLOATL	= mFLOATL;
    ctx->mCOMMENT	= mCOMMENT;
    ctx->mSTRINGL	= mSTRINGL;
    ctx->mEXPONENT	= mEXPONENT;
    ctx->mHEX_DIGIT	= mHEX_DIGIT;
    ctx->mESC_SEQ	= mESC_SEQ;
    ctx->mOCTAL_ESC	= mOCTAL_ESC;
    ctx->mUNICODE_ESC	= mUNICODE_ESC;
    ctx->mSPACE	= mSPACE;
    ctx->mTokens	= mTokens;
    
    /** When the nextToken() call is made to this lexer's pANTLR3_TOKEN_SOURCE
     *  it will call mTokens() in this generated code, and will pass it the ctx
     * pointer of this lexer, not the context of the base lexer, so store that now.
     */
    ctx->pLexer->ctx	    = ctx;
    
    /**Install the token matching function
     */
    ctx->pLexer->mTokens = (void (*) (void *))(mTokens);
    
    ctx->getGrammarFileName	= getGrammarFileName;
    ctx->free		= ContainedObjectsLexerFree;

    
    


    /* Return the newly built lexer to the caller
     */
    return  ctx;
}

/* =========================================================================
 * DFA tables for the lexer
 */
/** Static dfa state tables for Cyclic dfa:
 *    189:1: FLOATL : ( ( '0' .. '9' )+ '.' ( '0' .. '9' )* ( EXPONENT )? | '.' ( '0' .. '9' )+ ( EXPONENT )? | ( '0' .. '9' )+ EXPONENT );
 */
static const ANTLR3_INT32 dfa9_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa9_eof[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa9_min[5] =
    {
	46, 46, -1, -1, -1
    };
static const ANTLR3_INT32 dfa9_max[5] =
    {
	57, 101, -1, -1, -1
    };
static const ANTLR3_INT32 dfa9_accept[5] =
    {
	-1, -1, 2, 3, 1
    };
static const ANTLR3_INT32 dfa9_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa9_T_empty	    NULL

static const ANTLR3_INT32 dfa9_T0[] =
    {
	4, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3
    };static const ANTLR3_INT32 dfa9_T1[] =
    {
	2, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa9_transitions[] =
{
    dfa9_T1, dfa9_T0, dfa9_T_empty, dfa9_T_empty, dfa9_T_empty	
};


/* Declare tracking structure for Cyclic DFA 9
 */
static
ANTLR3_CYCLIC_DFA cdfa9
    =	{
	    9,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"189:1: FLOATL : ( ( '0' .. '9' )+ '.' ( '0' .. '9' )* ( EXPONENT )? | '.' ( '0' .. '9' )+ ( EXPONENT )? | ( '0' .. '9' )+ EXPONENT );",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa9_eot,	    /* EOT table			    */
	    dfa9_eof,	    /* EOF table			    */
	    dfa9_min,	    /* Minimum tokens for each state    */
	    dfa9_max,	    /* Maximum tokens for each state    */
	    dfa9_accept,	/* Accept table			    */
	    dfa9_special,	/* Special transition states	    */
	    dfa9_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 9
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    1:1: Tokens : ( CLASS_KW | INTERFACE_KW | IMPLEMENTS_KW | STATIC_KW | INTEGER_KW | FLOAT_KW | STRING_KW | T__60 | T__61 | T__62 | T__63 | T__64 | T__65 | T__66 | T__67 | T__68 | T__69 | ID | INTL | FLOATL | COMMENT | STRINGL | SPACE );
 */
static const ANTLR3_INT32 dfa20_eot[67] =
    {
	-1, 15, 15, 15, 15, -1, -1, -1, -1, -1, -1, -1, 26, -1, -1, -1, 27, -1, 
	-1, -1, 15, 15, 15, 15, 15, -1, -1, -1, 15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 47, 15, 15, 15, 15, 15, 53, -1, 15, 15, 15, 57, 58, -1, 
	15, 60, 15, -1, -1, 15, -1, 15, 64, 15, -1, 66, -1
    };
static const ANTLR3_INT32 dfa20_eof[67] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa20_min[67] =
    {
	9, 108, 109, 116, 108, -1, -1, -1, -1, -1, -1, -1, 48, -1, -1, -1, 46, 
	-1, -1, -1, 97, 116, 112, 97, 111, -1, -1, -1, 115, 101, 108, 116, 105, 
	97, 115, 103, 101, 105, 110, 116, 48, 102, 101, 109, 99, 103, 48, -1, 97, 
	114, 101, 48, 48, -1, 99, 48, 110, -1, -1, 101, -1, 116, 48, 115, -1, 48, 
	-1
    };
static const ANTLR3_INT32 dfa20_max[67] =
    {
	125, 108, 110, 116, 108, -1, -1, -1, -1, -1, -1, -1, 57, -1, -1, -1, 101, 
	-1, -1, -1, 97, 116, 112, 114, 111, -1, -1, -1, 115, 101, 108, 116, 105, 
	97, 115, 114, 101, 105, 110, 116, 122, 102, 101, 109, 99, 103, 122, -1, 
	97, 114, 101, 122, 122, -1, 99, 122, 110, -1, -1, 101, -1, 116, 122, 115, 
	-1, 122, -1
    };
static const ANTLR3_INT32 dfa20_accept[67] =
    {
	-1, -1, -1, -1, -1, 8, 9, 10, 11, 12, 13, 14, -1, 16, 17, 18, -1, 21, 
	22, 23, -1, -1, -1, -1, -1, 20, 15, 19, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, 6, -1, 
	-1, -1, 4, 7, -1, 5, -1, -1, -1, 2, -1, 3
    };
static const ANTLR3_INT32 dfa20_special[67] =
    {	
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa20_T_empty	    NULL

static const ANTLR3_INT32 dfa20_T0[] =
    {
	24
    };static const ANTLR3_INT32 dfa20_T1[] =
    {
	22, 21
    };static const ANTLR3_INT32 dfa20_T2[] =
    {
	29
    };static const ANTLR3_INT32 dfa20_T3[] =
    {
	42, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 41
    };static const ANTLR3_INT32 dfa20_T4[] =
    {
	35
    };static const ANTLR3_INT32 dfa20_T5[] =
    {
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15, -1, -1, -1, -1, -1, -1, -1, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, -1, -1, -1, -1, 15, -1, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15
    };static const ANTLR3_INT32 dfa20_T6[] =
    {
	38
    };static const ANTLR3_INT32 dfa20_T7[] =
    {
	52
    };static const ANTLR3_INT32 dfa20_T8[] =
    {
	45
    };static const ANTLR3_INT32 dfa20_T9[] =
    {
	20
    };static const ANTLR3_INT32 dfa20_T10[] =
    {
	19, 19, -1, 19, 19, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 19, -1, 18, -1, -1, -1, -1, -1, 5, 6, -1, -1, 10, -1, 
	12, 17, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, -1, 9, -1, 11, -1, -1, 
	-1, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 15, 13, -1, 14, -1, 15, -1, 15, 15, 1, 
	15, 15, 4, 15, 15, 2, 15, 15, 15, 15, 15, 15, 15, 15, 15, 3, 15, 15, 15, 
	15, 15, 15, 15, 7, -1, 8
    };static const ANTLR3_INT32 dfa20_T11[] =
    {
	44
    };static const ANTLR3_INT32 dfa20_T12[] =
    {
	37
    };static const ANTLR3_INT32 dfa20_T13[] =
    {
	51
    };static const ANTLR3_INT32 dfa20_T14[] =
    {
	55
    };static const ANTLR3_INT32 dfa20_T15[] =
    {
	25, -1, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 25, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 25
    };static const ANTLR3_INT32 dfa20_T16[] =
    {
	49
    };static const ANTLR3_INT32 dfa20_T17[] =
    {
	46
    };static const ANTLR3_INT32 dfa20_T18[] =
    {
	33
    };static const ANTLR3_INT32 dfa20_T19[] =
    {
	39
    };static const ANTLR3_INT32 dfa20_T20[] =
    {
	34
    };static const ANTLR3_INT32 dfa20_T21[] =
    {
	31, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 32
    };static const ANTLR3_INT32 dfa20_T22[] =
    {
	28
    };static const ANTLR3_INT32 dfa20_T23[] =
    {
	25, 25, 25, 25, 25, 25, 25, 25, 25, 25
    };static const ANTLR3_INT32 dfa20_T24[] =
    {
	23
    };static const ANTLR3_INT32 dfa20_T25[] =
    {
	40
    };static const ANTLR3_INT32 dfa20_T26[] =
    {
	48
    };static const ANTLR3_INT32 dfa20_T27[] =
    {
	54
    };static const ANTLR3_INT32 dfa20_T28[] =
    {
	59
    };static const ANTLR3_INT32 dfa20_T29[] =
    {
	62
    };static const ANTLR3_INT32 dfa20_T30[] =
    {
	56
    };static const ANTLR3_INT32 dfa20_T31[] =
    {
	61
    };static const ANTLR3_INT32 dfa20_T32[] =
    {
	63
    };static const ANTLR3_INT32 dfa20_T33[] =
    {
	65
    };static const ANTLR3_INT32 dfa20_T34[] =
    {
	30
    };static const ANTLR3_INT32 dfa20_T35[] =
    {
	36
    };static const ANTLR3_INT32 dfa20_T36[] =
    {
	43
    };static const ANTLR3_INT32 dfa20_T37[] =
    {
	50
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa20_transitions[] =
{
    dfa20_T10, dfa20_T9, dfa20_T1, dfa20_T24, dfa20_T0, dfa20_T_empty, 
    dfa20_T_empty, dfa20_T_empty, dfa20_T_empty, dfa20_T_empty, dfa20_T_empty, 
    dfa20_T_empty, dfa20_T23, dfa20_T_empty, dfa20_T_empty, dfa20_T_empty, 
    dfa20_T15, dfa20_T_empty, dfa20_T_empty, dfa20_T_empty, dfa20_T22, dfa20_T2, 
    dfa20_T34, dfa20_T21, dfa20_T18, dfa20_T_empty, dfa20_T_empty, dfa20_T_empty, 
    dfa20_T20, dfa20_T4, dfa20_T35, dfa20_T12, dfa20_T6, dfa20_T19, dfa20_T25, 
    dfa20_T3, dfa20_T36, dfa20_T11, dfa20_T8, dfa20_T17, dfa20_T5, dfa20_T26, 
    dfa20_T16, dfa20_T37, dfa20_T13, dfa20_T7, dfa20_T5, dfa20_T_empty, 
    dfa20_T27, dfa20_T14, dfa20_T30, dfa20_T5, dfa20_T5, dfa20_T_empty, 
    dfa20_T28, dfa20_T5, dfa20_T31, dfa20_T_empty, dfa20_T_empty, dfa20_T29, 
    dfa20_T_empty, dfa20_T32, dfa20_T5, dfa20_T33, dfa20_T_empty, dfa20_T5, 
    dfa20_T_empty	
};


/* Declare tracking structure for Cyclic DFA 20
 */
static
ANTLR3_CYCLIC_DFA cdfa20
    =	{
	    20,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"1:1: Tokens : ( CLASS_KW | INTERFACE_KW | IMPLEMENTS_KW | STATIC_KW | INTEGER_KW | FLOAT_KW | STRING_KW | T__60 | T__61 | T__62 | T__63 | T__64 | T__65 | T__66 | T__67 | T__68 | T__69 | ID | INTL | FLOATL | COMMENT | STRINGL | SPACE );",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa20_eot,	    /* EOT table			    */
	    dfa20_eof,	    /* EOF table			    */
	    dfa20_min,	    /* Minimum tokens for each state    */
	    dfa20_max,	    /* Maximum tokens for each state    */
	    dfa20_accept,	/* Accept table			    */
	    dfa20_special,	/* Special transition states	    */
	    dfa20_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 20
 * ---------------------
 */ 
/* =========================================================================
 * End of DFA tables for the lexer
 */ 

/* =========================================================================
 * Functions to match the lexer grammar defined tokens from the input stream
 */

//   Comes from: 7:10: ( 'class' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start CLASS_KW
 *
 * Looks to match the characters the constitute the token CLASS_KW
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mCLASS_KW(pContainedObjectsLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = CLASS_KW;
       
    
    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:7:10: ( 'class' )
    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:7:12: 'class'
    {
        MATCHS(lit_1); 
        if  (HASEXCEPTION())
        {
            goto ruleCLASS_KWEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleCLASS_KWEx; /* Prevent compiler warnings */
    ruleCLASS_KWEx: ;

}
// $ANTLR end CLASS_KW

//   Comes from: 8:14: ( 'interface' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start INTERFACE_KW
 *
 * Looks to match the characters the constitute the token INTERFACE_KW
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mINTERFACE_KW(pContainedObjectsLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = INTERFACE_KW;
       
    
    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:8:14: ( 'interface' )
    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:8:16: 'interface'
    {
        MATCHS(lit_2); 
        if  (HASEXCEPTION())
        {
            goto ruleINTERFACE_KWEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleINTERFACE_KWEx; /* Prevent compiler warnings */
    ruleINTERFACE_KWEx: ;

}
// $ANTLR end INTERFACE_KW

//   Comes from: 9:15: ( 'implements' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start IMPLEMENTS_KW
 *
 * Looks to match the characters the constitute the token IMPLEMENTS_KW
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mIMPLEMENTS_KW(pContainedObjectsLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = IMPLEMENTS_KW;
       
    
    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:9:15: ( 'implements' )
    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:9:17: 'implements'
    {
        MATCHS(lit_3); 
        if  (HASEXCEPTION())
        {
            goto ruleIMPLEMENTS_KWEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleIMPLEMENTS_KWEx; /* Prevent compiler warnings */
    ruleIMPLEMENTS_KWEx: ;

}
// $ANTLR end IMPLEMENTS_KW

//   Comes from: 10:11: ( 'static' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start STATIC_KW
 *
 * Looks to match the characters the constitute the token STATIC_KW
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mSTATIC_KW(pContainedObjectsLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = STATIC_KW;
       
    
    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:10:11: ( 'static' )
    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:10:13: 'static'
    {
        MATCHS(lit_4); 
        if  (HASEXCEPTION())
        {
            goto ruleSTATIC_KWEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleSTATIC_KWEx; /* Prevent compiler warnings */
    ruleSTATIC_KWEx: ;

}
// $ANTLR end STATIC_KW

//   Comes from: 11:12: ( 'integer' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start INTEGER_KW
 *
 * Looks to match the characters the constitute the token INTEGER_KW
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mINTEGER_KW(pContainedObjectsLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = INTEGER_KW;
       
    
    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:11:12: ( 'integer' )
    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:11:14: 'integer'
    {
        MATCHS(lit_5); 
        if  (HASEXCEPTION())
        {
            goto ruleINTEGER_KWEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleINTEGER_KWEx; /* Prevent compiler warnings */
    ruleINTEGER_KWEx: ;

}
// $ANTLR end INTEGER_KW

//   Comes from: 12:10: ( 'float' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start FLOAT_KW
 *
 * Looks to match the characters the constitute the token FLOAT_KW
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mFLOAT_KW(pContainedObjectsLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = FLOAT_KW;
       
    
    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:12:10: ( 'float' )
    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:12:12: 'float'
    {
        MATCHS(lit_6); 
        if  (HASEXCEPTION())
        {
            goto ruleFLOAT_KWEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleFLOAT_KWEx; /* Prevent compiler warnings */
    ruleFLOAT_KWEx: ;

}
// $ANTLR end FLOAT_KW

//   Comes from: 13:11: ( 'string' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start STRING_KW
 *
 * Looks to match the characters the constitute the token STRING_KW
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mSTRING_KW(pContainedObjectsLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = STRING_KW;
       
    
    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:13:11: ( 'string' )
    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:13:13: 'string'
    {
        MATCHS(lit_7); 
        if  (HASEXCEPTION())
        {
            goto ruleSTRING_KWEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleSTRING_KWEx; /* Prevent compiler warnings */
    ruleSTRING_KWEx: ;

}
// $ANTLR end STRING_KW

//   Comes from: 14:7: ( '(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__60
 *
 * Looks to match the characters the constitute the token T__60
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__60(pContainedObjectsLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__60;
       
    
    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:14:7: ( '(' )
    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:14:9: '('
    {
        MATCHC('('); 
        if  (HASEXCEPTION())
        {
            goto ruleT__60Ex;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__60Ex; /* Prevent compiler warnings */
    ruleT__60Ex: ;

}
// $ANTLR end T__60

//   Comes from: 15:7: ( ')' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__61
 *
 * Looks to match the characters the constitute the token T__61
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__61(pContainedObjectsLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__61;
       
    
    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:15:7: ( ')' )
    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:15:9: ')'
    {
        MATCHC(')'); 
        if  (HASEXCEPTION())
        {
            goto ruleT__61Ex;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__61Ex; /* Prevent compiler warnings */
    ruleT__61Ex: ;

}
// $ANTLR end T__61

//   Comes from: 16:7: ( '{' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__62
 *
 * Looks to match the characters the constitute the token T__62
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__62(pContainedObjectsLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__62;
       
    
    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:16:7: ( '{' )
    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:16:9: '{'
    {
        MATCHC('{'); 
        if  (HASEXCEPTION())
        {
            goto ruleT__62Ex;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__62Ex; /* Prevent compiler warnings */
    ruleT__62Ex: ;

}
// $ANTLR end T__62

//   Comes from: 17:7: ( '}' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__63
 *
 * Looks to match the characters the constitute the token T__63
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__63(pContainedObjectsLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__63;
       
    
    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:17:7: ( '}' )
    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:17:9: '}'
    {
        MATCHC('}'); 
        if  (HASEXCEPTION())
        {
            goto ruleT__63Ex;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__63Ex; /* Prevent compiler warnings */
    ruleT__63Ex: ;

}
// $ANTLR end T__63

//   Comes from: 18:7: ( ';' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__64
 *
 * Looks to match the characters the constitute the token T__64
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__64(pContainedObjectsLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__64;
       
    
    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:18:7: ( ';' )
    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:18:9: ';'
    {
        MATCHC(';'); 
        if  (HASEXCEPTION())
        {
            goto ruleT__64Ex;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__64Ex; /* Prevent compiler warnings */
    ruleT__64Ex: ;

}
// $ANTLR end T__64

//   Comes from: 19:7: ( ',' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__65
 *
 * Looks to match the characters the constitute the token T__65
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__65(pContainedObjectsLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__65;
       
    
    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:19:7: ( ',' )
    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:19:9: ','
    {
        MATCHC(','); 
        if  (HASEXCEPTION())
        {
            goto ruleT__65Ex;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__65Ex; /* Prevent compiler warnings */
    ruleT__65Ex: ;

}
// $ANTLR end T__65

//   Comes from: 20:7: ( '=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__66
 *
 * Looks to match the characters the constitute the token T__66
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__66(pContainedObjectsLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__66;
       
    
    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:20:7: ( '=' )
    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:20:9: '='
    {
        MATCHC('='); 
        if  (HASEXCEPTION())
        {
            goto ruleT__66Ex;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__66Ex; /* Prevent compiler warnings */
    ruleT__66Ex: ;

}
// $ANTLR end T__66

//   Comes from: 21:7: ( '.' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__67
 *
 * Looks to match the characters the constitute the token T__67
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__67(pContainedObjectsLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__67;
       
    
    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:21:7: ( '.' )
    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:21:9: '.'
    {
        MATCHC('.'); 
        if  (HASEXCEPTION())
        {
            goto ruleT__67Ex;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__67Ex; /* Prevent compiler warnings */
    ruleT__67Ex: ;

}
// $ANTLR end T__67

//   Comes from: 22:7: ( '[' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__68
 *
 * Looks to match the characters the constitute the token T__68
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__68(pContainedObjectsLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__68;
       
    
    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:22:7: ( '[' )
    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:22:9: '['
    {
        MATCHC('['); 
        if  (HASEXCEPTION())
        {
            goto ruleT__68Ex;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__68Ex; /* Prevent compiler warnings */
    ruleT__68Ex: ;

}
// $ANTLR end T__68

//   Comes from: 23:7: ( ']' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__69
 *
 * Looks to match the characters the constitute the token T__69
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__69(pContainedObjectsLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__69;
       
    
    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:23:7: ( ']' )
    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:23:9: ']'
    {
        MATCHC(']'); 
        if  (HASEXCEPTION())
        {
            goto ruleT__69Ex;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__69Ex; /* Prevent compiler warnings */
    ruleT__69Ex: ;

}
// $ANTLR end T__69

//   Comes from: 183:5: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )* )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start ID
 *
 * Looks to match the characters the constitute the token ID
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mID(pContainedObjectsLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = ID;
       
    
    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:183:5: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )* )
    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:183:7: ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*
    {
        if ( ((LA(1) >= 'A') && (LA(1) <= 'Z')) || LA(1) == '_' || ((LA(1) >= 'a') && (LA(1) <= 'z')) )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleIDEx;
        }


        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:183:31: ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*

        for (;;)
        {
            int alt1=2;
            switch ( LA(1) ) 
            {
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
            case 'A':
            case 'B':
            case 'C':
            case 'D':
            case 'E':
            case 'F':
            case 'G':
            case 'H':
            case 'I':
            case 'J':
            case 'K':
            case 'L':
            case 'M':
            case 'N':
            case 'O':
            case 'P':
            case 'Q':
            case 'R':
            case 'S':
            case 'T':
            case 'U':
            case 'V':
            case 'W':
            case 'X':
            case 'Y':
            case 'Z':
            case '_':
            case 'a':
            case 'b':
            case 'c':
            case 'd':
            case 'e':
            case 'f':
            case 'g':
            case 'h':
            case 'i':
            case 'j':
            case 'k':
            case 'l':
            case 'm':
            case 'n':
            case 'o':
            case 'p':
            case 'q':
            case 'r':
            case 's':
            case 't':
            case 'u':
            case 'v':
            case 'w':
            case 'x':
            case 'y':
            case 'z':
            	{
            		alt1=1;
            	}
                break;

            }

            switch (alt1) 
            {
        	case 1:
        	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:
        	    {
        	        if ( ((LA(1) >= '0') && (LA(1) <= '9')) || ((LA(1) >= 'A') && (LA(1) <= 'Z')) || LA(1) == '_' || ((LA(1) >= 'a') && (LA(1) <= 'z')) )
        	        {
        	            CONSUME();

        	        }
        	        else 
        	        {
        	            CONSTRUCTEX();
        	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
        	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

        	            LRECOVER();    goto ruleIDEx;
        	        }


        	    }
        	    break;

        	default:
        	    goto loop1;	/* break out of the loop */
        	    break;
            }
        }
        loop1: ; /* Jump out to here if this rule does not match */


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleIDEx; /* Prevent compiler warnings */
    ruleIDEx: ;

}
// $ANTLR end ID

//   Comes from: 186:6: ( ( '0' .. '9' )+ )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start INTL
 *
 * Looks to match the characters the constitute the token INTL
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mINTL(pContainedObjectsLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = INTL;
       
    
    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:186:6: ( ( '0' .. '9' )+ )
    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:186:8: ( '0' .. '9' )+
    {
        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:186:8: ( '0' .. '9' )+
        {
            int cnt2=0;

            for (;;)
            {
                int alt2=2;
        	switch ( LA(1) ) 
        	{
        	case '0':
        	case '1':
        	case '2':
        	case '3':
        	case '4':
        	case '5':
        	case '6':
        	case '7':
        	case '8':
        	case '9':
        		{
        			alt2=1;
        		}
        	    break;

        	}

        	switch (alt2) 
        	{
        	    case 1:
        	        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:186:8: '0' .. '9'
        	        {
        	            MATCHRANGE('0', '9'); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto ruleINTLEx;
        	            }


        	        }
        	        break;

        	    default:
        	    
        		if ( cnt2 >= 1 )
        		{
        		    goto loop2;
        		}
        		/* mismatchedSetEx()
        		 */
        		CONSTRUCTEX();
        		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
        		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


        		goto ruleINTLEx;
        	}
        	cnt2++;
            }
            loop2: ;	/* Jump to here if this rule does not match */
        }

    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleINTLEx; /* Prevent compiler warnings */
    ruleINTLEx: ;

}
// $ANTLR end INTL

//   Comes from: 190:5: ( ( '0' .. '9' )+ '.' ( '0' .. '9' )* ( EXPONENT )? | '.' ( '0' .. '9' )+ ( EXPONENT )? | ( '0' .. '9' )+ EXPONENT )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start FLOATL
 *
 * Looks to match the characters the constitute the token FLOATL
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mFLOATL(pContainedObjectsLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = FLOATL;
       
    
    {
        //  C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:190:5: ( ( '0' .. '9' )+ '.' ( '0' .. '9' )* ( EXPONENT )? | '.' ( '0' .. '9' )+ ( EXPONENT )? | ( '0' .. '9' )+ EXPONENT )
        
        ANTLR3_UINT32 alt9;

        alt9=3;

        alt9 = cdfa9.predict(ctx, RECOGNIZER, ISTREAM, &cdfa9);
        if  (HASEXCEPTION())
        {
            goto ruleFLOATLEx;
        }

        switch (alt9) 
        {
    	case 1:
    	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:190:9: ( '0' .. '9' )+ '.' ( '0' .. '9' )* ( EXPONENT )?
    	    {
    	        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:190:9: ( '0' .. '9' )+
    	        {
    	            int cnt3=0;

    	            for (;;)
    	            {
    	                int alt3=2;
    	        	switch ( LA(1) ) 
    	        	{
    	        	case '0':
    	        	case '1':
    	        	case '2':
    	        	case '3':
    	        	case '4':
    	        	case '5':
    	        	case '6':
    	        	case '7':
    	        	case '8':
    	        	case '9':
    	        		{
    	        			alt3=1;
    	        		}
    	        	    break;

    	        	}

    	        	switch (alt3) 
    	        	{
    	        	    case 1:
    	        	        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:190:10: '0' .. '9'
    	        	        {
    	        	            MATCHRANGE('0', '9'); 
    	        	            if  (HASEXCEPTION())
    	        	            {
    	        	                goto ruleFLOATLEx;
    	        	            }


    	        	        }
    	        	        break;

    	        	    default:
    	        	    
    	        		if ( cnt3 >= 1 )
    	        		{
    	        		    goto loop3;
    	        		}
    	        		/* mismatchedSetEx()
    	        		 */
    	        		CONSTRUCTEX();
    	        		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
    	        		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


    	        		goto ruleFLOATLEx;
    	        	}
    	        	cnt3++;
    	            }
    	            loop3: ;	/* Jump to here if this rule does not match */
    	        }
    	        MATCHC('.'); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleFLOATLEx;
    	        }


    	        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:190:25: ( '0' .. '9' )*

    	        for (;;)
    	        {
    	            int alt4=2;
    	            switch ( LA(1) ) 
    	            {
    	            case '0':
    	            case '1':
    	            case '2':
    	            case '3':
    	            case '4':
    	            case '5':
    	            case '6':
    	            case '7':
    	            case '8':
    	            case '9':
    	            	{
    	            		alt4=1;
    	            	}
    	                break;

    	            }

    	            switch (alt4) 
    	            {
    	        	case 1:
    	        	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:190:26: '0' .. '9'
    	        	    {
    	        	        MATCHRANGE('0', '9'); 
    	        	        if  (HASEXCEPTION())
    	        	        {
    	        	            goto ruleFLOATLEx;
    	        	        }


    	        	    }
    	        	    break;

    	        	default:
    	        	    goto loop4;	/* break out of the loop */
    	        	    break;
    	            }
    	        }
    	        loop4: ; /* Jump out to here if this rule does not match */


    	        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:190:37: ( EXPONENT )?
    	        {
    	            int alt5=2;
    	            switch ( LA(1) ) 
    	            {
    	                case 'E':
    	                case 'e':
    	                	{
    	                		alt5=1;
    	                	}
    	                    break;
    	            }

    	            switch (alt5) 
    	            {
    	        	case 1:
    	        	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:190:37: EXPONENT
    	        	    {
    	        	        /* 190:37: EXPONENT */
    	        	        mEXPONENT(ctx ); 
    	        	        if  (HASEXCEPTION())
    	        	        {
    	        	            goto ruleFLOATLEx;
    	        	        }


    	        	    }
    	        	    break;

    	            }
    	        }

    	    }
    	    break;
    	case 2:
    	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:191:9: '.' ( '0' .. '9' )+ ( EXPONENT )?
    	    {
    	        MATCHC('.'); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleFLOATLEx;
    	        }

    	        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:191:13: ( '0' .. '9' )+
    	        {
    	            int cnt6=0;

    	            for (;;)
    	            {
    	                int alt6=2;
    	        	switch ( LA(1) ) 
    	        	{
    	        	case '0':
    	        	case '1':
    	        	case '2':
    	        	case '3':
    	        	case '4':
    	        	case '5':
    	        	case '6':
    	        	case '7':
    	        	case '8':
    	        	case '9':
    	        		{
    	        			alt6=1;
    	        		}
    	        	    break;

    	        	}

    	        	switch (alt6) 
    	        	{
    	        	    case 1:
    	        	        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:191:14: '0' .. '9'
    	        	        {
    	        	            MATCHRANGE('0', '9'); 
    	        	            if  (HASEXCEPTION())
    	        	            {
    	        	                goto ruleFLOATLEx;
    	        	            }


    	        	        }
    	        	        break;

    	        	    default:
    	        	    
    	        		if ( cnt6 >= 1 )
    	        		{
    	        		    goto loop6;
    	        		}
    	        		/* mismatchedSetEx()
    	        		 */
    	        		CONSTRUCTEX();
    	        		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
    	        		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


    	        		goto ruleFLOATLEx;
    	        	}
    	        	cnt6++;
    	            }
    	            loop6: ;	/* Jump to here if this rule does not match */
    	        }

    	        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:191:25: ( EXPONENT )?
    	        {
    	            int alt7=2;
    	            switch ( LA(1) ) 
    	            {
    	                case 'E':
    	                case 'e':
    	                	{
    	                		alt7=1;
    	                	}
    	                    break;
    	            }

    	            switch (alt7) 
    	            {
    	        	case 1:
    	        	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:191:25: EXPONENT
    	        	    {
    	        	        /* 191:25: EXPONENT */
    	        	        mEXPONENT(ctx ); 
    	        	        if  (HASEXCEPTION())
    	        	        {
    	        	            goto ruleFLOATLEx;
    	        	        }


    	        	    }
    	        	    break;

    	            }
    	        }

    	    }
    	    break;
    	case 3:
    	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:192:9: ( '0' .. '9' )+ EXPONENT
    	    {
    	        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:192:9: ( '0' .. '9' )+
    	        {
    	            int cnt8=0;

    	            for (;;)
    	            {
    	                int alt8=2;
    	        	switch ( LA(1) ) 
    	        	{
    	        	case '0':
    	        	case '1':
    	        	case '2':
    	        	case '3':
    	        	case '4':
    	        	case '5':
    	        	case '6':
    	        	case '7':
    	        	case '8':
    	        	case '9':
    	        		{
    	        			alt8=1;
    	        		}
    	        	    break;

    	        	}

    	        	switch (alt8) 
    	        	{
    	        	    case 1:
    	        	        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:192:10: '0' .. '9'
    	        	        {
    	        	            MATCHRANGE('0', '9'); 
    	        	            if  (HASEXCEPTION())
    	        	            {
    	        	                goto ruleFLOATLEx;
    	        	            }


    	        	        }
    	        	        break;

    	        	    default:
    	        	    
    	        		if ( cnt8 >= 1 )
    	        		{
    	        		    goto loop8;
    	        		}
    	        		/* mismatchedSetEx()
    	        		 */
    	        		CONSTRUCTEX();
    	        		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
    	        		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


    	        		goto ruleFLOATLEx;
    	        	}
    	        	cnt8++;
    	            }
    	            loop8: ;	/* Jump to here if this rule does not match */
    	        }
    	        /* 192:9: ( '0' .. '9' )+ EXPONENT */
    	        mEXPONENT(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleFLOATLEx;
    	        }


    	    }
    	    break;

        }
    }
	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleFLOATLEx; /* Prevent compiler warnings */
    ruleFLOATLEx: ;

}
// $ANTLR end FLOATL

//   Comes from: 196:5: ( '//' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n' | '/*' ( options {greedy=false; } : . )* '*/' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start COMMENT
 *
 * Looks to match the characters the constitute the token COMMENT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mCOMMENT(pContainedObjectsLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = COMMENT;
       
    
    {
        //  C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:196:5: ( '//' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n' | '/*' ( options {greedy=false; } : . )* '*/' )
        
        ANTLR3_UINT32 alt13;

        alt13=2;

        switch ( LA(1) ) 
        {
        case '/':
        	{
        		switch ( LA(2) ) 
        		{
        		case '/':
        			{
        				alt13=1;
        			}
        		    break;
        		case '*':
        			{
        				alt13=2;
        			}
        		    break;

        		default:
        		    CONSTRUCTEX();
        		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        		    EXCEPTION->message      = (void *)"";
        		    EXCEPTION->decisionNum  = 13;
        		    EXCEPTION->state        = 1;


        		    goto ruleCOMMENTEx;
        		}

        	}
            break;

        default:
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            EXCEPTION->message      = (void *)"";
            EXCEPTION->decisionNum  = 13;
            EXCEPTION->state        = 0;


            goto ruleCOMMENTEx;
        }

        switch (alt13) 
        {
    	case 1:
    	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:196:9: '//' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n'
    	    {
    	        MATCHS(lit_8); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleCOMMENTEx;
    	        }



    	        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:196:14: (~ ( '\\n' | '\\r' ) )*

    	        for (;;)
    	        {
    	            int alt10=2;
    	            {
    	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
    	                */
    	                int LA10_0 = LA(1);
    	                if ( (((LA10_0 >= 0x0000) && (LA10_0 <= '\t')) || ((LA10_0 >= 0x000B) && (LA10_0 <= '\f')) || ((LA10_0 >= 0x000E) && (LA10_0 <= 0xFFFF))) ) 
    	                {
    	                    alt10=1;
    	                }

    	            }
    	            switch (alt10) 
    	            {
    	        	case 1:
    	        	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:196:14: ~ ( '\\n' | '\\r' )
    	        	    {
    	        	        if ( ((LA(1) >= 0x0000) && (LA(1) <= '\t')) || ((LA(1) >= 0x000B) && (LA(1) <= '\f')) || ((LA(1) >= 0x000E) && (LA(1) <= 0xFFFF)) )
    	        	        {
    	        	            CONSUME();

    	        	        }
    	        	        else 
    	        	        {
    	        	            CONSTRUCTEX();
    	        	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
    	        	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

    	        	            LRECOVER();    goto ruleCOMMENTEx;
    	        	        }


    	        	    }
    	        	    break;

    	        	default:
    	        	    goto loop10;	/* break out of the loop */
    	        	    break;
    	            }
    	        }
    	        loop10: ; /* Jump out to here if this rule does not match */


    	        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:196:28: ( '\\r' )?
    	        {
    	            int alt11=2;
    	            switch ( LA(1) ) 
    	            {
    	                case '\r':
    	                	{
    	                		alt11=1;
    	                	}
    	                    break;
    	            }

    	            switch (alt11) 
    	            {
    	        	case 1:
    	        	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:196:28: '\\r'
    	        	    {
    	        	        MATCHC('\r'); 
    	        	        if  (HASEXCEPTION())
    	        	        {
    	        	            goto ruleCOMMENTEx;
    	        	        }


    	        	    }
    	        	    break;

    	            }
    	        }
    	        MATCHC('\n'); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleCOMMENTEx;
    	        }

    	        {
    	            LEXSTATE->channel=HIDDEN;
    	        }

    	    }
    	    break;
    	case 2:
    	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:197:9: '/*' ( options {greedy=false; } : . )* '*/'
    	    {
    	        MATCHS(lit_9); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleCOMMENTEx;
    	        }



    	        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:197:14: ( options {greedy=false; } : . )*

    	        for (;;)
    	        {
    	            int alt12=2;
    	            {
    	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
    	                */
    	                int LA12_0 = LA(1);
    	                if ( (LA12_0 == '*') ) 
    	                {
    	                    {
    	                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
    	                        */
    	                        int LA12_1 = LA(2);
    	                        if ( (LA12_1 == '/') ) 
    	                        {
    	                            alt12=2;
    	                        }
    	                        else if ( (((LA12_1 >= 0x0000) && (LA12_1 <= '.')) || ((LA12_1 >= '0') && (LA12_1 <= 0xFFFF))) ) 
    	                        {
    	                            alt12=1;
    	                        }

    	                    }
    	                }
    	                else if ( (((LA12_0 >= 0x0000) && (LA12_0 <= ')')) || ((LA12_0 >= '+') && (LA12_0 <= 0xFFFF))) ) 
    	                {
    	                    alt12=1;
    	                }

    	            }
    	            switch (alt12) 
    	            {
    	        	case 1:
    	        	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:197:42: .
    	        	    {
    	        	        MATCHANY(); 
    	        	        if  (HASEXCEPTION())
    	        	        {
    	        	            goto ruleCOMMENTEx;
    	        	        }


    	        	    }
    	        	    break;

    	        	default:
    	        	    goto loop12;	/* break out of the loop */
    	        	    break;
    	            }
    	        }
    	        loop12: ; /* Jump out to here if this rule does not match */

    	        MATCHS(lit_10); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleCOMMENTEx;
    	        }


    	        {
    	            LEXSTATE->channel=HIDDEN;
    	        }

    	    }
    	    break;

        }
    }
	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleCOMMENTEx; /* Prevent compiler warnings */
    ruleCOMMENTEx: ;

}
// $ANTLR end COMMENT

//   Comes from: 201:5: ( '\"' ( ESC_SEQ | ~ ( '\\\\' | '\"' ) )* '\"' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start STRINGL
 *
 * Looks to match the characters the constitute the token STRINGL
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mSTRINGL(pContainedObjectsLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = STRINGL;
       
    
    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:201:5: ( '\"' ( ESC_SEQ | ~ ( '\\\\' | '\"' ) )* '\"' )
    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:201:8: '\"' ( ESC_SEQ | ~ ( '\\\\' | '\"' ) )* '\"'
    {
        MATCHC('"'); 
        if  (HASEXCEPTION())
        {
            goto ruleSTRINGLEx;
        }


        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:201:12: ( ESC_SEQ | ~ ( '\\\\' | '\"' ) )*

        for (;;)
        {
            int alt14=3;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA14_0 = LA(1);
                if ( (LA14_0 == '\\') ) 
                {
                    alt14=1;
                }
                else if ( (((LA14_0 >= 0x0000) && (LA14_0 <= '!')) || ((LA14_0 >= '#') && (LA14_0 <= '[')) || ((LA14_0 >= ']') && (LA14_0 <= 0xFFFF))) ) 
                {
                    alt14=2;
                }

            }
            switch (alt14) 
            {
        	case 1:
        	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:201:14: ESC_SEQ
        	    {
        	        /* 201:14: ESC_SEQ */
        	        mESC_SEQ(ctx ); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleSTRINGLEx;
        	        }


        	    }
        	    break;
        	case 2:
        	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:201:24: ~ ( '\\\\' | '\"' )
        	    {
        	        if ( ((LA(1) >= 0x0000) && (LA(1) <= '!')) || ((LA(1) >= '#') && (LA(1) <= '[')) || ((LA(1) >= ']') && (LA(1) <= 0xFFFF)) )
        	        {
        	            CONSUME();

        	        }
        	        else 
        	        {
        	            CONSTRUCTEX();
        	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
        	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

        	            LRECOVER();    goto ruleSTRINGLEx;
        	        }


        	    }
        	    break;

        	default:
        	    goto loop14;	/* break out of the loop */
        	    break;
            }
        }
        loop14: ; /* Jump out to here if this rule does not match */

        MATCHC('"'); 
        if  (HASEXCEPTION())
        {
            goto ruleSTRINGLEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleSTRINGLEx; /* Prevent compiler warnings */
    ruleSTRINGLEx: ;

}
// $ANTLR end STRINGL

//   Comes from: 209:10: ( ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+ )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start EXPONENT
 *
 * Looks to match the characters the constitute the token EXPONENT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mEXPONENT(pContainedObjectsLexer ctx)
{
	ANTLR3_UINT32	_type;

        
    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:209:10: ( ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+ )
    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:209:12: ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+
    {
        if ( LA(1) == 'E' || LA(1) == 'e' )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleEXPONENTEx;
        }


        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:209:22: ( '+' | '-' )?
        {
            int alt15=2;
            switch ( LA(1) ) 
            {
                case '+':
                case '-':
                	{
                		alt15=1;
                	}
                    break;
            }

            switch (alt15) 
            {
        	case 1:
        	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:
        	    {
        	        if ( LA(1) == '+' || LA(1) == '-' )
        	        {
        	            CONSUME();

        	        }
        	        else 
        	        {
        	            CONSTRUCTEX();
        	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
        	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

        	            LRECOVER();    goto ruleEXPONENTEx;
        	        }


        	    }
        	    break;

            }
        }
        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:209:33: ( '0' .. '9' )+
        {
            int cnt16=0;

            for (;;)
            {
                int alt16=2;
        	switch ( LA(1) ) 
        	{
        	case '0':
        	case '1':
        	case '2':
        	case '3':
        	case '4':
        	case '5':
        	case '6':
        	case '7':
        	case '8':
        	case '9':
        		{
        			alt16=1;
        		}
        	    break;

        	}

        	switch (alt16) 
        	{
        	    case 1:
        	        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:209:34: '0' .. '9'
        	        {
        	            MATCHRANGE('0', '9'); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto ruleEXPONENTEx;
        	            }


        	        }
        	        break;

        	    default:
        	    
        		if ( cnt16 >= 1 )
        		{
        		    goto loop16;
        		}
        		/* mismatchedSetEx()
        		 */
        		CONSTRUCTEX();
        		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
        		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


        		goto ruleEXPONENTEx;
        	}
        	cnt16++;
            }
            loop16: ;	/* Jump to here if this rule does not match */
        }

    }



    // This is where rules clean up and exit
    //
    goto ruleEXPONENTEx; /* Prevent compiler warnings */
    ruleEXPONENTEx: ;

}
// $ANTLR end EXPONENT

//   Comes from: 212:11: ( ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start HEX_DIGIT
 *
 * Looks to match the characters the constitute the token HEX_DIGIT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mHEX_DIGIT(pContainedObjectsLexer ctx)
{
	ANTLR3_UINT32	_type;

        
    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:212:11: ( ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) )
    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:212:13: ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' )
    {
        if ( ((LA(1) >= '0') && (LA(1) <= '9')) || ((LA(1) >= 'A') && (LA(1) <= 'F')) || ((LA(1) >= 'a') && (LA(1) <= 'f')) )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleHEX_DIGITEx;
        }


    }



    // This is where rules clean up and exit
    //
    goto ruleHEX_DIGITEx; /* Prevent compiler warnings */
    ruleHEX_DIGITEx: ;

}
// $ANTLR end HEX_DIGIT

//   Comes from: 216:5: ( '\\\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\\\"' | '\\'' | '\\\\' ) | UNICODE_ESC | OCTAL_ESC )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start ESC_SEQ
 *
 * Looks to match the characters the constitute the token ESC_SEQ
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mESC_SEQ(pContainedObjectsLexer ctx)
{
	ANTLR3_UINT32	_type;

        
    {
        //  C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:216:5: ( '\\\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\\\"' | '\\'' | '\\\\' ) | UNICODE_ESC | OCTAL_ESC )
        
        ANTLR3_UINT32 alt17;

        alt17=3;

        switch ( LA(1) ) 
        {
        case '\\':
        	{
        		switch ( LA(2) ) 
        		{
        		case '"':
        		case '\'':
        		case '\\':
        		case 'b':
        		case 'f':
        		case 'n':
        		case 'r':
        		case 't':
        			{
        				alt17=1;
        			}
        		    break;
        		case 'u':
        			{
        				alt17=2;
        			}
        		    break;
        		case '0':
        		case '1':
        		case '2':
        		case '3':
        		case '4':
        		case '5':
        		case '6':
        		case '7':
        			{
        				alt17=3;
        			}
        		    break;

        		default:
        		    CONSTRUCTEX();
        		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        		    EXCEPTION->message      = (void *)"";
        		    EXCEPTION->decisionNum  = 17;
        		    EXCEPTION->state        = 1;


        		    goto ruleESC_SEQEx;
        		}

        	}
            break;

        default:
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            EXCEPTION->message      = (void *)"";
            EXCEPTION->decisionNum  = 17;
            EXCEPTION->state        = 0;


            goto ruleESC_SEQEx;
        }

        switch (alt17) 
        {
    	case 1:
    	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:216:9: '\\\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\\\"' | '\\'' | '\\\\' )
    	    {
    	        MATCHC('\\'); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleESC_SEQEx;
    	        }

    	        if ( LA(1) == '"' || LA(1) == '\'' || LA(1) == '\\' || LA(1) == 'b' || LA(1) == 'f' || LA(1) == 'n' || LA(1) == 'r' || LA(1) == 't' )
    	        {
    	            CONSUME();

    	        }
    	        else 
    	        {
    	            CONSTRUCTEX();
    	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
    	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

    	            LRECOVER();    goto ruleESC_SEQEx;
    	        }


    	    }
    	    break;
    	case 2:
    	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:217:9: UNICODE_ESC
    	    {
    	        /* 217:9: UNICODE_ESC */
    	        mUNICODE_ESC(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleESC_SEQEx;
    	        }


    	    }
    	    break;
    	case 3:
    	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:218:9: OCTAL_ESC
    	    {
    	        /* 218:9: OCTAL_ESC */
    	        mOCTAL_ESC(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleESC_SEQEx;
    	        }


    	    }
    	    break;

        }
    }


    // This is where rules clean up and exit
    //
    goto ruleESC_SEQEx; /* Prevent compiler warnings */
    ruleESC_SEQEx: ;

}
// $ANTLR end ESC_SEQ

//   Comes from: 223:5: ( '\\\\' ( '0' .. '3' ) ( '0' .. '7' ) ( '0' .. '7' ) | '\\\\' ( '0' .. '7' ) ( '0' .. '7' ) | '\\\\' ( '0' .. '7' ) )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start OCTAL_ESC
 *
 * Looks to match the characters the constitute the token OCTAL_ESC
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mOCTAL_ESC(pContainedObjectsLexer ctx)
{
	ANTLR3_UINT32	_type;

        
    {
        //  C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:223:5: ( '\\\\' ( '0' .. '3' ) ( '0' .. '7' ) ( '0' .. '7' ) | '\\\\' ( '0' .. '7' ) ( '0' .. '7' ) | '\\\\' ( '0' .. '7' ) )
        
        ANTLR3_UINT32 alt18;

        alt18=3;

        switch ( LA(1) ) 
        {
        case '\\':
        	{
        		switch ( LA(2) ) 
        		{
        		case '0':
        		case '1':
        		case '2':
        		case '3':
        			{
        				switch ( LA(3) ) 
        				{
        				case '0':
        				case '1':
        				case '2':
        				case '3':
        				case '4':
        				case '5':
        				case '6':
        				case '7':
        					{
        						switch ( LA(4) ) 
        						{
        						case '0':
        						case '1':
        						case '2':
        						case '3':
        						case '4':
        						case '5':
        						case '6':
        						case '7':
        							{
        								alt18=1;
        							}
        						    break;

        						default:
        						    alt18=2;}

        					}
        				    break;

        				default:
        				    alt18=3;}

        			}
        		    break;
        		case '4':
        		case '5':
        		case '6':
        		case '7':
        			{
        				switch ( LA(3) ) 
        				{
        				case '0':
        				case '1':
        				case '2':
        				case '3':
        				case '4':
        				case '5':
        				case '6':
        				case '7':
        					{
        						alt18=2;
        					}
        				    break;

        				default:
        				    alt18=3;}

        			}
        		    break;

        		default:
        		    CONSTRUCTEX();
        		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        		    EXCEPTION->message      = (void *)"";
        		    EXCEPTION->decisionNum  = 18;
        		    EXCEPTION->state        = 1;


        		    goto ruleOCTAL_ESCEx;
        		}

        	}
            break;

        default:
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            EXCEPTION->message      = (void *)"";
            EXCEPTION->decisionNum  = 18;
            EXCEPTION->state        = 0;


            goto ruleOCTAL_ESCEx;
        }

        switch (alt18) 
        {
    	case 1:
    	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:223:9: '\\\\' ( '0' .. '3' ) ( '0' .. '7' ) ( '0' .. '7' )
    	    {
    	        MATCHC('\\'); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleOCTAL_ESCEx;
    	        }

    	        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:223:14: ( '0' .. '3' )
    	        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:223:15: '0' .. '3'
    	        {
    	            MATCHRANGE('0', '3'); 
    	            if  (HASEXCEPTION())
    	            {
    	                goto ruleOCTAL_ESCEx;
    	            }


    	        }

    	        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:223:25: ( '0' .. '7' )
    	        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:223:26: '0' .. '7'
    	        {
    	            MATCHRANGE('0', '7'); 
    	            if  (HASEXCEPTION())
    	            {
    	                goto ruleOCTAL_ESCEx;
    	            }


    	        }

    	        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:223:36: ( '0' .. '7' )
    	        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:223:37: '0' .. '7'
    	        {
    	            MATCHRANGE('0', '7'); 
    	            if  (HASEXCEPTION())
    	            {
    	                goto ruleOCTAL_ESCEx;
    	            }


    	        }


    	    }
    	    break;
    	case 2:
    	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:224:9: '\\\\' ( '0' .. '7' ) ( '0' .. '7' )
    	    {
    	        MATCHC('\\'); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleOCTAL_ESCEx;
    	        }

    	        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:224:14: ( '0' .. '7' )
    	        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:224:15: '0' .. '7'
    	        {
    	            MATCHRANGE('0', '7'); 
    	            if  (HASEXCEPTION())
    	            {
    	                goto ruleOCTAL_ESCEx;
    	            }


    	        }

    	        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:224:25: ( '0' .. '7' )
    	        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:224:26: '0' .. '7'
    	        {
    	            MATCHRANGE('0', '7'); 
    	            if  (HASEXCEPTION())
    	            {
    	                goto ruleOCTAL_ESCEx;
    	            }


    	        }


    	    }
    	    break;
    	case 3:
    	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:225:9: '\\\\' ( '0' .. '7' )
    	    {
    	        MATCHC('\\'); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleOCTAL_ESCEx;
    	        }

    	        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:225:14: ( '0' .. '7' )
    	        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:225:15: '0' .. '7'
    	        {
    	            MATCHRANGE('0', '7'); 
    	            if  (HASEXCEPTION())
    	            {
    	                goto ruleOCTAL_ESCEx;
    	            }


    	        }


    	    }
    	    break;

        }
    }


    // This is where rules clean up and exit
    //
    goto ruleOCTAL_ESCEx; /* Prevent compiler warnings */
    ruleOCTAL_ESCEx: ;

}
// $ANTLR end OCTAL_ESC

//   Comes from: 230:4: ( '\\\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start UNICODE_ESC
 *
 * Looks to match the characters the constitute the token UNICODE_ESC
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mUNICODE_ESC(pContainedObjectsLexer ctx)
{
	ANTLR3_UINT32	_type;

        
    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:230:4: ( '\\\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT )
    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:230:8: '\\\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT
    {
        MATCHC('\\'); 
        if  (HASEXCEPTION())
        {
            goto ruleUNICODE_ESCEx;
        }

        MATCHC('u'); 
        if  (HASEXCEPTION())
        {
            goto ruleUNICODE_ESCEx;
        }

        /* 230:8: '\\\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT */
        mHEX_DIGIT(ctx ); 
        if  (HASEXCEPTION())
        {
            goto ruleUNICODE_ESCEx;
        }

        /* 230:8: '\\\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT */
        mHEX_DIGIT(ctx ); 
        if  (HASEXCEPTION())
        {
            goto ruleUNICODE_ESCEx;
        }

        /* 230:8: '\\\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT */
        mHEX_DIGIT(ctx ); 
        if  (HASEXCEPTION())
        {
            goto ruleUNICODE_ESCEx;
        }

        /* 230:8: '\\\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT */
        mHEX_DIGIT(ctx ); 
        if  (HASEXCEPTION())
        {
            goto ruleUNICODE_ESCEx;
        }


    }



    // This is where rules clean up and exit
    //
    goto ruleUNICODE_ESCEx; /* Prevent compiler warnings */
    ruleUNICODE_ESCEx: ;

}
// $ANTLR end UNICODE_ESC

//   Comes from: 234:8: ( ( '\\t' | ' ' | '\\r' | '\\n' | '\\u000C' )+ )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start SPACE
 *
 * Looks to match the characters the constitute the token SPACE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mSPACE(pContainedObjectsLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = SPACE;
       
    
    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:234:8: ( ( '\\t' | ' ' | '\\r' | '\\n' | '\\u000C' )+ )
    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:234:10: ( '\\t' | ' ' | '\\r' | '\\n' | '\\u000C' )+
    {
        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:234:10: ( '\\t' | ' ' | '\\r' | '\\n' | '\\u000C' )+
        {
            int cnt19=0;

            for (;;)
            {
                int alt19=2;
        	switch ( LA(1) ) 
        	{
        	case '\t':
        	case '\n':
        	case '\f':
        	case '\r':
        	case ' ':
        		{
        			alt19=1;
        		}
        	    break;

        	}

        	switch (alt19) 
        	{
        	    case 1:
        	        // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:
        	        {
        	            if ( ((LA(1) >= '\t') && (LA(1) <= '\n')) || ((LA(1) >= '\f') && (LA(1) <= '\r')) || LA(1) == ' ' )
        	            {
        	                CONSUME();

        	            }
        	            else 
        	            {
        	                CONSTRUCTEX();
        	                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
        	                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

        	                LRECOVER();    goto ruleSPACEEx;
        	            }


        	        }
        	        break;

        	    default:
        	    
        		if ( cnt19 >= 1 )
        		{
        		    goto loop19;
        		}
        		/* mismatchedSetEx()
        		 */
        		CONSTRUCTEX();
        		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
        		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


        		goto ruleSPACEEx;
        	}
        	cnt19++;
            }
            loop19: ;	/* Jump to here if this rule does not match */
        }
        {

                             LEXSTATE->channel = HIDDEN;
                          
        }

    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleSPACEEx; /* Prevent compiler warnings */
    ruleSPACEEx: ;

}
// $ANTLR end SPACE

/** This is the entry point in to the lexer from an object that
 *  wants to generate the next token, such as a pCOMMON_TOKEN_STREAM
 */
static void 
mTokens(pContainedObjectsLexer ctx)
{
    {
        //  C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:1:8: ( CLASS_KW | INTERFACE_KW | IMPLEMENTS_KW | STATIC_KW | INTEGER_KW | FLOAT_KW | STRING_KW | T__60 | T__61 | T__62 | T__63 | T__64 | T__65 | T__66 | T__67 | T__68 | T__69 | ID | INTL | FLOATL | COMMENT | STRINGL | SPACE )
        
        ANTLR3_UINT32 alt20;

        alt20=23;

        alt20 = cdfa20.predict(ctx, RECOGNIZER, ISTREAM, &cdfa20);
        if  (HASEXCEPTION())
        {
            goto ruleTokensEx;
        }

        switch (alt20) 
        {
    	case 1:
    	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:1:10: CLASS_KW
    	    {
    	        /* 1:10: CLASS_KW */
    	        mCLASS_KW(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 2:
    	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:1:19: INTERFACE_KW
    	    {
    	        /* 1:19: INTERFACE_KW */
    	        mINTERFACE_KW(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 3:
    	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:1:32: IMPLEMENTS_KW
    	    {
    	        /* 1:32: IMPLEMENTS_KW */
    	        mIMPLEMENTS_KW(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 4:
    	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:1:46: STATIC_KW
    	    {
    	        /* 1:46: STATIC_KW */
    	        mSTATIC_KW(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 5:
    	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:1:56: INTEGER_KW
    	    {
    	        /* 1:56: INTEGER_KW */
    	        mINTEGER_KW(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 6:
    	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:1:67: FLOAT_KW
    	    {
    	        /* 1:67: FLOAT_KW */
    	        mFLOAT_KW(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 7:
    	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:1:76: STRING_KW
    	    {
    	        /* 1:76: STRING_KW */
    	        mSTRING_KW(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 8:
    	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:1:86: T__60
    	    {
    	        /* 1:86: T__60 */
    	        mT__60(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 9:
    	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:1:92: T__61
    	    {
    	        /* 1:92: T__61 */
    	        mT__61(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 10:
    	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:1:98: T__62
    	    {
    	        /* 1:98: T__62 */
    	        mT__62(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 11:
    	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:1:104: T__63
    	    {
    	        /* 1:104: T__63 */
    	        mT__63(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 12:
    	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:1:110: T__64
    	    {
    	        /* 1:110: T__64 */
    	        mT__64(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 13:
    	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:1:116: T__65
    	    {
    	        /* 1:116: T__65 */
    	        mT__65(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 14:
    	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:1:122: T__66
    	    {
    	        /* 1:122: T__66 */
    	        mT__66(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 15:
    	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:1:128: T__67
    	    {
    	        /* 1:128: T__67 */
    	        mT__67(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 16:
    	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:1:134: T__68
    	    {
    	        /* 1:134: T__68 */
    	        mT__68(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 17:
    	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:1:140: T__69
    	    {
    	        /* 1:140: T__69 */
    	        mT__69(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 18:
    	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:1:146: ID
    	    {
    	        /* 1:146: ID */
    	        mID(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 19:
    	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:1:149: INTL
    	    {
    	        /* 1:149: INTL */
    	        mINTL(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 20:
    	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:1:154: FLOATL
    	    {
    	        /* 1:154: FLOATL */
    	        mFLOATL(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 21:
    	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:1:161: COMMENT
    	    {
    	        /* 1:161: COMMENT */
    	        mCOMMENT(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 22:
    	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:1:169: STRINGL
    	    {
    	        /* 1:169: STRINGL */
    	        mSTRINGL(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 23:
    	    // C:\\Users\\Ernesto\\Documents\\Visual Studio 2008\\Projects\\FeedViz\\ContainedObjects\\ContainedObjects.g:1:177: SPACE
    	    {
    	        /* 1:177: SPACE */
    	        mSPACE(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;

        }
    }

    
    goto ruleTokensEx; /* Prevent compiler warnings */
ruleTokensEx: ;
}

/* =========================================================================
 * Lexer matching rules end.
 * =========================================================================
 */
/* End of Lexer code
 * ================================================
 * ================================================
 */ 


/* End of code
 * =============================================================================
 */
